<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我们为什么要睡觉</title>
      <link href="/2019/12/16/%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%9D%A1%E8%A7%89/"/>
      <url>/2019/12/16/%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%9D%A1%E8%A7%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转自 <a href="https://www.gatesnotes.com/Books/Why-We-Sleep" target="_blank" rel="noopener">https://www.gatesnotes.com/Books/Why-We-Sleep</a></p></blockquote><h3 id="曾经年少爱追梦"><a href="#曾经年少爱追梦" class="headerlink" title="曾经年少爱追梦"></a>曾经年少爱追梦</h3><p>在微软早期，当我们不得不交付一款软件时，我通常会熬夜加班，有一两次连续熬了两个晚上。我知道我并没有那么厉害，主要依靠咖啡因和肾上腺素支持，不过当时我迷上了自己的工作，觉得睡太多觉是懒的表现。</p><a id="more"></a><p><img src="/2019/12/16/我们为什么要睡觉/a4a6176f.png" alt></p><h3 id="关于这本书"><a href="#关于这本书" class="headerlink" title="关于这本书"></a>关于这本书</h3><p>最近读过Matthew Walker的《为什么睡觉》这本书后，我意识到所有的熬夜工作(几乎都不足8小时的睡眠)都会付出巨大的代价。这本书是我的女儿Jenn和John Doerr(“风险投资之王”)推荐给我的。</p><p>Walker是加州大学伯克利分校人类睡眠科学中心主任，他在书里解释了忽视睡眠如何削弱你的创造力、解决问题能力、决策、学习、记忆力、心脏健康、脑部健康、心理健康、情绪健康、免疫系统甚至你的寿命，书中提到”整个工业化国家睡眠的减少正在带来灾难性的影响”。</p><h3 id="读后感FAQ"><a href="#读后感FAQ" class="headerlink" title="读后感FAQ"></a>读后感FAQ</h3><p>对于他书中的观点我不一定会照单全收，例如他声称睡眠不足与阿尔茨海默氏症之间存在紧密联系，另外为了使我们所有人意识到睡眠不足的危害，他有时会使用科学尚未证实的东西。</p><p>但不管怎么说，《为什么睡觉》是一本重要而有趣的书。这只是一篇简短的评论，所以我将回答一些我认为对你来说最重要的问题。</p><h4 id="是否每个人都需要一天7或8小时的睡眠？"><a href="#是否每个人都需要一天7或8小时的睡眠？" class="headerlink" title="是否每个人都需要一天7或8小时的睡眠？"></a>是否每个人都需要一天7或8小时的睡眠？</h4><p>答案是肯定的，你几乎肯定会这样做，即使你已经说服自己不这样做。用底特律亨利·福特医院的托马斯·罗斯博士的话来说，“能在不超过5小时的睡眠中存活下来且没有受到损害的人数为零。”</p><h4 id="我们为什么要睡觉？"><a href="#我们为什么要睡觉？" class="headerlink" title="我们为什么要睡觉？"></a>我们为什么要睡觉？</h4><p>毕竟，在睡觉时（所有动物也一样），你无法狩猎、采集、饮食、繁殖或保护自己。然而，Walker得出的结论是，睡眠的优点远大于这些缺点。简而言之，睡眠会产生复杂的神经化学反应，从而以各种方式改善我们的大脑。而且，它“补充了我们免疫系统的武器库，有助于抵抗恶性肿瘤，防止感染并防止各种疾病。”换句话说，睡眠极大地增强了我们的进化适应能力，用我们看不到的方式。</p><h4 id="我能做些什么来改善我的睡眠质量呢？"><a href="#我能做些什么来改善我的睡眠质量呢？" class="headerlink" title="我能做些什么来改善我的睡眠质量呢？"></a>我能做些什么来改善我的睡眠质量呢？</h4><ul><li>替换卧室中的所有LED灯泡，因为它们发出的蓝光对睡眠影响很大</li><li>如果你有幸能够控制自己的居住温度，则可以在打算睡觉时将卧室的温度降至18℃。Walker说，“要成功进入睡眠……你的身体温度需要降低2至3华氏度”</li><li>限制饮酒，因为喝酒对睡眠没帮助，这和大家普遍的看法相反。 Walker说，虽然喝酒可能有助于诱发睡眠，但“酒精是REM（<a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E5%8B%95%E7%9C%BC%E6%9C%9F" target="_blank" rel="noopener">快速动眼期</a>）的最有力抑制剂之一”</li><li>如果你可以像我们的祖先以前那样短暂地午睡(一些地中海和南美地区仍这样做)，你应该这么做（但不要晚于下午3点）。它可能会改善您的创造力和冠状动脉健康，并延长您的寿命</li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>我花了比平常更长的时间来读完《为什么睡觉》，因为我遵循Walker的建议，比以前习惯更早一点放下书睡觉（这样我可以睡得更好）。Walker教给我很多这种地球上每个人都需要的基本知识，我想他的书对你也会有帮助。</p>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> Bill Gates </tag>
            
            <tag> Matthew Walker </tag>
            
            <tag> Why We Sleep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我小时候背过的启蒙读物</title>
      <link href="/2019/11/09/%E7%AB%A5%E5%B9%B4%E6%96%87%E7%AB%A0%E7%A4%BA%E4%BE%8B/"/>
      <url>/2019/11/09/%E7%AB%A5%E5%B9%B4%E6%96%87%E7%AB%A0%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 童年 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小时了了 </tag>
            
            <tag> 童年记忆好 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码审查的检查项</title>
      <link href="/2019/11/06/code_review_checklist/"/>
      <url>/2019/11/06/code_review_checklist/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.evoketechnologies.com/blog/code-review-checklist-perform-effective-code-reviews/" target="_blank" rel="noopener">https://www.evoketechnologies.com/blog/code-review-checklist-perform-effective-code-reviews/</a></p></blockquote><p>In my previous blog post, we discussed about “10 Simple Code Review Tips for Effective Code Reviews”. Now, let’s take this topic further and explore the code review checklist, which would help to perform effective code reviews to deliver best quality software.<br><img src="/2019/11/06/code_review_checklist/91b1df61.png" alt></p><p>This code review checklist also helps the code reviewers and software developers (during self code review) to gain expertise in the code review process, as these points are easy to remember and follow during the code review process. </p><p>Let’s first begin with the basic code review checklist and later move on to the detailed code review checklist. </p><a id="more"></a><h3 id="Basic-Code-Review-Checklist"><a href="#Basic-Code-Review-Checklist" class="headerlink" title="Basic Code Review Checklist"></a>Basic Code Review Checklist</h3><p>Let’s discuss about the basic code review checklist, which can be very handy if you are a beginner in code reviews and/or during initial code reviews.</p><p>While reviewing the code, ask yourself the following basic questions:</p><ul><li>Am I able to understand the code easily?</li><li>Is the code written following the coding standards/guidelines?</li><li>Is the same code duplicated more than twice?</li><li>Can I unit test / debug the code easily to find the root cause?</li><li>Is this function or class too big? If yes, is the function or class having too many responsibilities?</li><li>If you feel that the answer is not satisfactory to any of the above questions, then you can suggest/recommend code changes.</li></ul><h3 id="Detailed-Code-Review-Checklist"><a href="#Detailed-Code-Review-Checklist" class="headerlink" title="Detailed Code Review Checklist"></a>Detailed Code Review Checklist</h3><p>The following code review checklist gives an idea about the various aspects you need to consider while reviewing the code:</p><p><img src="/2019/11/06/code_review_checklist/95021398.png" alt></p><h4 id="Code-formatting"><a href="#Code-formatting" class="headerlink" title="Code formatting"></a>Code formatting</h4><p>While going through the code, check the code formatting to improve readability and ensure that there are no blockers:</p><p>a) Use alignments (left margin), proper white space. Also ensure that code block starting point and ending point are easily identifiable.</p><p>b) Ensure that proper naming conventions (Pascal, CamelCase etc.) have been followed. </p><p>c) Code should fit in the standard 14 inch laptop screen.  There shouldn’t be a need to scroll horizontally to view the code. In a 21 inch monitor, other windows (toolbox, properties etc.) can be opened while modifying code, so always write code keeping in view a 14 inch monitor.</p><p>d) Remove the commented code as this is always a blocker, while going through the code. Commented code can be obtained from Source Control (like SVN), if required.</p><h4 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h4><p>a) The code should follow the defined architecture.</p><p>Separation of Concerns followed<br>Split into multiple layers and tiers as per requirements (Presentation, Business and Data layers).<br>Split into respective files (HTML, JavaScript and CSS).<br>Code is in sync with existing code patterns/technologies.<br>Design patterns: Use appropriate design pattern (if it helps), after completely understanding the problem and context.</p><h4 id="Coding-best-practices"><a href="#Coding-best-practices" class="headerlink" title="Coding best practices"></a>Coding best practices</h4><p>No hard coding, use constants/configuration values.<br>Group similar values under an enumeration (enum).<br>Comments – Do not write comments for what you are doing, instead write comments on why you are doing. Specify about any hacks, workaround and temporary fixes. Additionally, mention pending tasks in your to-do comments, which can be tracked easily.<br>Avoid multiple if/else blocks.<br>Use framework features, wherever possible instead of writing custom code.</p><h4 id="Non-Functional-requirements"><a href="#Non-Functional-requirements" class="headerlink" title="Non Functional requirements"></a>Non Functional requirements</h4><p>a) Maintainability (Supportability) – The application should require the least amount of effort to support in near future. It should be easy to identify and fix a defect.</p><p>Readability: Code should be self-explanatory. Get a feel of story reading, while going through the code. Use appropriate name for variables, functions and classes. If you are taking more time to understand the code, then either code needs refactoring or at least comments have to be written to make it clear.<br>Testability: The code should be easy to test. Refactor into a separate function (if required). Use interfaces while talking to other layers, as interfaces can be mocked easily. Try to avoid static functions, singleton classes as these are not easily testable by mocks.<br>Debuggability: Provide support to log the flow of control, parameter data and exception details to find the root cause easily. If you are using Log4Net like component then add support for database logging also, as querying the log table is easy.<br>Configurability: Keep the configurable values in place (XML file, database table) so that no code changes are required, if the data is changed frequently.<br>b) Reusability</p><p>DRY (Do not Repeat Yourself) principle: The same code should not be repeated more than twice.<br>Consider reusable services, functions and components.<br>Consider generic functions and classes.<br>c) Reliability – Exception handling and cleanup (dispose) resources.</p><p>d) Extensibility – Easy to add enhancements with minimal changes to the existing code. One component should be easily replaceable by a better component.</p><p>e) Security – Authentication, authorization, input data validation against security threats such as SQL injections and Cross Site Scripting (XSS), encrypting the sensitive data (passwords, credit card information etc.)</p><p>f) Performance</p><p>Use a data type that best suits the needs such as StringBuilder, generic collection classes.<br>Lazy loading, asynchronous and parallel processing.<br>Caching and session/application data.<br>g) Scalability – Consider if it supports a large user base/data? Can this be deployed into web farms?</p><p>h) Usability – Put yourself in the shoes of a end-user and ascertain, if the user interface/API is easy to understand and use. If you are not convinced with the user interface design, then start discussing your ideas with the business analyst.</p><h4 id="Object-Oriented-Analysis-and-Design-OOAD-Principles"><a href="#Object-Oriented-Analysis-and-Design-OOAD-Principles" class="headerlink" title="Object-Oriented Analysis and Design (OOAD) Principles"></a>Object-Oriented Analysis and Design (OOAD) Principles</h4><p>Single Responsibility Principle (SRS): Do not place more than one responsibility into a single class or function, refactor into separate classes and functions.<br>Open Closed Principle: While adding new functionality, existing code should not be modified. New functionality should be written in new classes and functions.<br>Liskov substitutability principle: The child class should not change the behavior (meaning) of the parent class. The child class can be used as a substitute for a base class.<br>Interface segregation: Do not create lengthy interfaces, instead split them into smaller interfaces based on the functionality. The interface should not contain any dependencies (parameters), which are not required for the expected functionality.<br>Dependency Injection: Do not hardcode the dependencies, instead inject them.<br>In most cases the principles are interrelated, following one principle automatically satisfies other principles. For e.g: if the ‘Single Responsibility Principle’ is followed, then Reusability and Testability will automatically increase.</p><p>In a few cases, one requirement may contradict with other requirement. So need to trade-off based on the importance of the weight-age, e.g. Performance vs Security. Too many checks and logging at multiple layers (UI, Middle tier, Database) would decrease the performance of an application. But few applications, especially relating to finance and banking require multiple checks, audit logging etc. So it is ok to compromise a little on performance to provide enhanced security.</p><h3 id="Tools-for-Code-Reviews"><a href="#Tools-for-Code-Reviews" class="headerlink" title="Tools for Code Reviews"></a>Tools for Code Reviews</h3><p>The first step while assessing the code quality of the entire project is through a static code analysis tool. Use the tools (based on technology) such as SonarQube, NDepend, FxCop, TFS code analysis rules. There is a myth that static code analysis tools are only for managers.<br>Use plug-ins such as Resharper, which suggests the best practices in Visual studio.<br>To track the code review comments use the tools like Crucible, Bitbucket and TFS code review process.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>The above code review checklist is not exhaustive, but provides a direction to the code reviewer to conduct effective code reviews and deliver good quality code. Initially, it would take some time to review the code from various aspects. After a bit of practice, code reviewers can perform effective code reviews, without much effort and time. If you would like to become an expert code reviewer, this code review checklist serves as a great starting point. Happy Code Reviewing!</p>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> checklist </tag>
            
            <tag> 流程规范 </tag>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十个有效代码审查的建议</title>
      <link href="/2019/11/06/code_review_tips/"/>
      <url>/2019/11/06/code_review_tips/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.evoketechnologies.com/blog/simple-effective-code-review-tips/" target="_blank" rel="noopener">https://www.evoketechnologies.com/blog/simple-effective-code-review-tips/</a></p></blockquote><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>在软件开发中，代码审查可以确保代码符合业务功能需求，帮助开发者遵循最佳实践，另外，代码审查环节也帮助提高了软件质量。</p><h3 id="具体建议"><a href="#具体建议" class="headerlink" title="具体建议"></a>具体建议</h3><p>根据我的经验，这里想分享10个简单的代码审查建议，用来帮助代码审查者和软件开发者进行代码审查。</p><a id="more"></a><ol><li><p>Highlight issues in the code<br>Never force software developers to change the code written by them. It may hurt their ego and they may repeat the same mistake if they do not understand the reason behind code change recommendation. Highlight the issues in the existing code and its consequences.<br>Here’s an interesting quote on this point: “If an egg is broken by outside force, life ends. If broken by inside force, life begins. Great things always begin from inside.” – Jim Kwik, Learning Expert.</p></li><li><p>Explain relevant principles<br>If software developers hesitate to accept given suggestions/recommendations, then explain them relevant principles such as Separation of Concerns, SRS (Single Responsibility Principle), Open-Closed principle, Cyclomatic complexity. If necessary, discuss with them the Non Functional Requirements (NFR) such as Maintainability, Extensibility, Testability and Reliability.</p></li><li><p>Discuss relevant quotes<br>To make the code review process more interesting and engrossing, remind developers relevant quotes/proverbs:<br>“Any stupid can write the program that computer understands but only good programmers write code that humans understand” – Martin Fowler<br>“Measuring programming progress by lines of code is like measuring aircraft building progress by weight.” – Bill Gates<br>“Fat model and thin controller”, “High cohesion and Low coupling”<br>“When debugging, novices insert corrective code; experts remove defective code.” – Richard Pattis</p></li><li><p>Do few things offline<br>Instead of explaining the entire solution to developers during the code review process, simply share the links of relevant websites or encourage them to research on the internet by providing keywords. This action would certainly save the code reviewer’s time and energy. And of course, developers would also like it, since they too need some time to assimilate the proposed solution.<br>Instead of always sitting next to a developer during the code review process, code reviewers should obtain the code from the source control or shared path, so that it saves developers time. And this would also give code reviewers ample time to recommend the best solution in the context.</p></li><li><p>Consider as an Opportunity to learn best practices<br>Sometimes software developers may take the code reviewer’s comments personally and defend the code without a valid reason. It then becomes the responsibility of a code reviewer to inform the developer to consider this exercise as an opportunity to learn/discuss best practices, but not to identify issues to criticize. Ideally, code reviewers should inform the managers that code review comments should not be used to assess a software developer’s skills. Code review should always be done in a competitive spirit to find more useful comments.</p></li><li><p>Always be patient and relook if required<br>Sometimes, developers do not accept suggestions/recommendation and keep debating. A code reviewer many not know the exact context and challenges, when the code was written. A code reviewer should understand all the points being made by the developer without losing patience. Furthermore, to make the point crystal clear, a code reviewer can explain the points on a paper or on a whiteboard by comparing the developer’s approach vs code reviewer’s approach. Every approach has its pros and cons, need to choose the right approach, whichever weighs more after careful evaluation.<br>Many times, a third approach evolves which is acceptable to both the developer and the code reviewer. If both of them do not come to a conclusion, then stop the discussion by saying “Let’s discuss this tomorrow, after doing some more analysis”. If the same issue is re-looked on another day with a fresh mindset, it is quite likely that a new approach evolves. Always remember that “No problem can be solved from the same level of consciousness that created it.” – Albert Einstein</p></li><li><p>Explain the need for best coding practices<br>Generally, software developers mention that best coding practices are not followed due to tight project schedules. Developers may feel that it is an acceptable practice. However, code reviewers should educate software developers that as the code size increases or after sometime, the application becomes very difficult to maintain. Moreover, if a client verifies the code then poor quality code may give wrong impression on the team’s/organization’s quality standards. It may also impact awarding new projects or referring an organization to prospective clients.<br>If the project schedules are too tight then code reviewers should suggest developers to perform code refactoring while fixing a defect/adding an enhancement or in next version. While refactoring the code, some functionality may break accidently. Code reviewers should convince the project managers by explaining the importance of code refactoring and the need for allocating additional time to plan this activity.</p></li><li><p>Consult second level code reviewer (if not convinced)<br>If a code reviewer recommends few suggestions, but the developer hesitates to accept these, then discuss it out with the developer. It is quite possible that the code reviewer may not know the entire context. If the developer is still not convinced with the recommendations of the code reviewer, it is perfectly all right to consult a second level code reviewer. However, the developer should ensure that second code reviewer’s suggestions are forwarded to the first code reviewer to ensure that everyone is on the same page.</p></li><li><p>Capture the enhancements and technical debt<br>It is quite likely that some code review suggestions cannot be implemented during current release. However, a code reviewer should ensure that all accepted recommendations are clearly documented in a shared code review document, so that these are implemented at an appropriate time in future. Additionally, code reviewer should identify and capture all the enhancements from technology and business perspective. Once the project is completed, all captured enhancements can be considered for implementation, instead of searching at that moment. Finding enhancements during code reviews is more efficient than finding separately at the end of the project.</p></li><li><p>Document all code review comments<br>Document all code review comments in an email, word document, excel, or any standard tool used by the organization. Making a mistake for the first time is acceptable, but it is not a good sign to repeat the same mistake. The code review document helps software developers to cross check the highlighted issues and avoid making similar mistakes in future. Additionally, maintaining a code review document is a mandatory part of the Capability Maturity Model Integration (CMMI) level process.</p></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>The above code review tips would help code reviewers and developers to perform effective code reviews. The code review process should always be pursued in a constructive way by all stakeholders to gain maximum benefit.</p><p>The code review process not only improves the software quality but also helps software developers to enhance their skills continuously. Hence, organizations/project managers must ensure that code reviews are made integral part of software development lifecycle.</p>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码质量 </tag>
            
            <tag> 最佳实践 </tag>
            
            <tag> 建议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装postfix利用已有邮箱发信</title>
      <link href="/2017/11/02/CentOS%E5%AE%89%E8%A3%85postfix%E5%88%A9%E7%94%A8%E5%B7%B2%E6%9C%89%E9%82%AE%E7%AE%B1%E5%8F%91%E4%BF%A1/"/>
      <url>/2017/11/02/CentOS%E5%AE%89%E8%A3%85postfix%E5%88%A9%E7%94%A8%E5%B7%B2%E6%9C%89%E9%82%AE%E7%AE%B1%E5%8F%91%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="卸载sendmail并安装postfix-mailx"><a href="#卸载sendmail并安装postfix-mailx" class="headerlink" title="卸载sendmail并安装postfix+mailx"></a>卸载sendmail并安装postfix+mailx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#卸载sendmail</span></span><br><span class="line">service sendmail stop</span><br><span class="line">chkconfig sendmail off</span><br><span class="line">yum remove sendmail</span><br><span class="line"><span class="comment">#安装postfix mailx和sasl需要的包</span></span><br><span class="line">yum install postfix mailx cyrus-sasl-plain</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="配置SMTP信息"><a href="#配置SMTP信息" class="headerlink" title="配置SMTP信息"></a>配置SMTP信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">                地址端口（不带SSL）端口（带SSL）</span><br><span class="line">POP3服务器pop.139.com110995</span><br><span class="line">SMTP服务器smtp.139.com25465</span><br><span class="line">IMAP服务器imap.139.com143993</span><br></pre></td></tr></table></figure><p>接着创建密码配置文件 /etc/postfix/sasl_passwd  账号密码用分号:隔开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"[smtp.139.com]:465 xxx@139.com:xxx"</span>  &gt; /etc/postfix/sasl_passwd</span><br><span class="line"></span><br><span class="line">postmap <span class="built_in">hash</span>:/etc/postfix/sasl_passwd</span><br><span class="line"></span><br><span class="line">rm /etc/postfix/sasl_passwd</span><br></pre></td></tr></table></figure><p>密码是明文存储的，通过postmap创建hash加密文件sasl_passwd.db</p><p>最后测试没问题就可以删除sasl_passwd</p><h3 id="创建ca证书配置main-cf"><a href="#创建ca证书配置main-cf" class="headerlink" title="创建ca证书配置main.cf"></a>创建ca证书配置main.cf</h3><p>进入certs目录，先修改创建的证书时间，默认有效期只有一年，改成10年先</p><p>找到里面所有的 -days 365 改为 -days 3650,也可以随便定个时间,保存退出后执行make创建证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/ssl/certs/</span><br><span class="line">vi Makefile</span><br><span class="line"></span><br><span class="line">make server.pem</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:BEIJING</span><br><span class="line">Locality Name (eg, city) [Default City]:BEIJING</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:SK</span><br><span class="line">Organizational Unit Name (eg, section) []:</span><br><span class="line">Common Name (eg, your name or your server<span class="string">'s hostname) []:</span></span><br><span class="line"><span class="string">Email Address []:</span></span><br><span class="line"><span class="string">-----</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#移动到/etc/postfix/目录</span></span><br><span class="line"><span class="string">mv server.pem /etc/postfix/</span></span><br></pre></td></tr></table></figure><p>添加账号映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"root@139.com xxx@139.com"</span> &gt;&gt; /etc/postfix/generic</span><br><span class="line">postmap /etc/postfix/generic</span><br></pre></td></tr></table></figure><p>备份并修改/etc/postfix/main.cf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mydomain = 139.com</span><br><span class="line">myorigin = <span class="variable">$mydomain</span></span><br><span class="line">myhostname = <span class="variable">$mydomain</span></span><br><span class="line">mydestination = <span class="variable">$mydomain</span></span><br><span class="line">alias_maps = <span class="built_in">hash</span>:/etc/aliases</span><br><span class="line">alias_database = <span class="built_in">hash</span>:/etc/aliases</span><br><span class="line">relayhost = [smtp.139.com]:465</span><br><span class="line">smtp_use_tls = yes</span><br><span class="line">smtp_tls_CAfile = /etc/postfix/server.pem</span><br><span class="line">smtp_generic_maps = <span class="built_in">hash</span>:/etc/postfix/generic</span><br><span class="line">smtp_sasl_auth_enable = yes</span><br><span class="line">smtp_sasl_security_options = noanonymous</span><br><span class="line">smtp_sasl_password_maps = <span class="built_in">hash</span>:/etc/postfix/sasl_passwd</span><br></pre></td></tr></table></figure><h3 id="重启postfix发送测试邮件"><a href="#重启postfix发送测试邮件" class="headerlink" title="重启postfix发送测试邮件"></a>重启postfix发送测试邮件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service postfix restart</span><br><span class="line"><span class="comment">#测试发送，最好先测试发送到其他域的邮件，例如163.com</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'This is a test mail'</span> | mail -s <span class="string">'This is a test mail'</span> xxxxx@163.com</span><br></pre></td></tr></table></figure><h3 id="监控发送日志"><a href="#监控发送日志" class="headerlink" title="监控发送日志"></a>监控发送日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/<span class="built_in">log</span>/maillog</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> postfix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>calibre书籍转换</title>
      <link href="/2017/10/10/calibre%E4%B9%A6%E7%B1%8D%E8%BD%AC%E6%8D%A2/"/>
      <url>/2017/10/10/calibre%E4%B9%A6%E7%B1%8D%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Android官方培训课程"><a href="#Android官方培训课程" class="headerlink" title="Android官方培训课程"></a>Android官方培训课程</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> calibre.web.feeds.recipes <span class="keyword">import</span> BasicNewsRecipe</span><br><span class="line"><span class="keyword">from</span> calibre.ebooks.BeautifulSoup <span class="keyword">import</span> NavigableString, Tag</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DesignPattern</span><span class="params">(BasicNewsRecipe)</span>:</span></span><br><span class="line"> </span><br><span class="line">    title = <span class="string">'Android官方培训课程'</span></span><br><span class="line">    description = <span class="string">'Android官方培训课程'</span></span><br><span class="line">    cover_url = <span class="string">'http://hukai.me/android-training-course-in-chinese/android_training.jpg'</span></span><br><span class="line"> </span><br><span class="line">    url_prefix = <span class="string">'http://hukai.me/android-training-course-in-chinese/'</span></span><br><span class="line">    url = <span class="string">'http://hukai.me/android-training-course-in-chinese/'</span></span><br><span class="line">    no_stylesheets = <span class="literal">True</span></span><br><span class="line">    keep_only_tags = [dict(attrs=&#123;<span class="string">'class'</span> : [<span class="string">'page-inner'</span>]&#125;)]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_text</span><span class="params">(self, tag)</span>:</span></span><br><span class="line">        text = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> tag.contents:</span><br><span class="line">            <span class="keyword">if</span> isinstance(c, NavigableString):</span><br><span class="line">                text = text + str(c)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                text = text + self.get_text(c)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> text.strip()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_index</span><span class="params">(self)</span>:</span></span><br><span class="line">        soup = self.index_to_soup(self.url)</span><br><span class="line"> </span><br><span class="line">        div = soup.find(<span class="string">'ul'</span>, &#123; <span class="string">'class'</span>: <span class="string">'summary'</span> &#125;)</span><br><span class="line"> </span><br><span class="line">        articles = []</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> div.findAll(<span class="string">'a'</span>):</span><br><span class="line">            til = self.get_text(link)</span><br><span class="line">            url = self.url_prefix +<span class="string">'/'</span>+ link[<span class="string">'href'</span>]</span><br><span class="line">            a = &#123; <span class="string">'title'</span>: til, <span class="string">'url'</span>: url &#125;</span><br><span class="line"> </span><br><span class="line">            articles.append(a)</span><br><span class="line"> </span><br><span class="line">        ans = [(<span class="string">'Android官方培训课程'</span>, articles)]</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Kafka设计解析"><a href="#Kafka设计解析" class="headerlink" title="Kafka设计解析"></a>Kafka设计解析</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> calibre.web.feeds.recipes <span class="keyword">import</span> BasicNewsRecipe</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DesignPattern</span><span class="params">(BasicNewsRecipe)</span>:</span></span><br><span class="line"> </span><br><span class="line">    title = <span class="string">'Kafka设计解析'</span></span><br><span class="line">    description = <span class="string">'Kafka设计解析'</span></span><br><span class="line">    cover_url = <span class="string">'https://kafka.apache.org/images/apache-kafka.png'</span></span><br><span class="line"> </span><br><span class="line">    url_prefix = <span class="string">'http://www.jasongj.com/'</span></span><br><span class="line">    url = <span class="string">'http://www.jasongj.com/tags/Kafka/'</span></span><br><span class="line">    no_stylesheets = <span class="literal">True</span></span><br><span class="line">    keep_only_tags = [dict(attrs=&#123;<span class="string">'class'</span> : [<span class="string">'posts-collapse'</span>, <span class="string">'post-description'</span>, <span class="string">'post-body'</span>]&#125;)]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_index</span><span class="params">(self)</span>:</span></span><br><span class="line">        soup = self.index_to_soup(self.url)</span><br><span class="line"> </span><br><span class="line">        div = soup.find(<span class="string">'div'</span>, &#123; <span class="string">'class'</span>: <span class="string">'posts-collapse'</span> &#125;)</span><br><span class="line"> </span><br><span class="line">        articles = []</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> div.findAll(<span class="string">'a'</span>):</span><br><span class="line"></span><br><span class="line">            til = link.find(<span class="string">'span'</span>).contents[<span class="number">0</span>].strip()</span><br><span class="line">            url = self.url_prefix +<span class="string">'/'</span>+ link[<span class="string">'href'</span>]</span><br><span class="line">            a = &#123; <span class="string">'title'</span>: til, <span class="string">'url'</span>: url &#125;</span><br><span class="line"> </span><br><span class="line">            articles.append(a)</span><br><span class="line"> </span><br><span class="line">        ans = [(<span class="string">'Kafka设计解析'</span>, articles)]</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h1 id="java进阶"><a href="#java进阶" class="headerlink" title="java进阶"></a>java进阶</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> calibre.web.feeds.recipes <span class="keyword">import</span> BasicNewsRecipe</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DesignPattern</span><span class="params">(BasicNewsRecipe)</span>:</span></span><br><span class="line"> </span><br><span class="line">    title = <span class="string">'java进阶'</span></span><br><span class="line">    description = <span class="string">'Java进阶'</span></span><br><span class="line">    cover_url = <span class="string">'https://upload.wikimedia.org/wikipedia/en/thumb/3/30/Java_programming_language_logo.svg/1200px-Java_programming_language_logo.svg.png'</span></span><br><span class="line"> </span><br><span class="line">    url_prefix = <span class="string">'http://www.jasongj.com/'</span></span><br><span class="line">    url = <span class="string">'http://www.jasongj.com/categories/java/'</span></span><br><span class="line">    no_stylesheets = <span class="literal">True</span></span><br><span class="line">    keep_only_tags = [dict(attrs=&#123;<span class="string">'class'</span> : [<span class="string">'posts-collapse'</span>, <span class="string">'post-description'</span>, <span class="string">'post-body'</span>]&#125;)]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_index</span><span class="params">(self)</span>:</span></span><br><span class="line">        soup = self.index_to_soup(self.url)</span><br><span class="line"> </span><br><span class="line">        div = soup.find(<span class="string">'section'</span>, &#123; <span class="string">'class'</span>: <span class="string">'posts-collapse'</span> &#125;)</span><br><span class="line"> </span><br><span class="line">        articles = []</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> div.findAll(<span class="string">'a'</span>):</span><br><span class="line"></span><br><span class="line">            til = link.find(<span class="string">'span'</span>).contents[<span class="number">0</span>].strip()</span><br><span class="line">            url = self.url_prefix +<span class="string">'/'</span>+ link[<span class="string">'href'</span>]</span><br><span class="line">            a = &#123; <span class="string">'title'</span>: til, <span class="string">'url'</span>: url &#125;</span><br><span class="line"> </span><br><span class="line">            articles.append(a)</span><br><span class="line"> </span><br><span class="line">        ans = [(<span class="string">'Java进阶'</span>, articles)]</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h1 id="Java设计模式"><a href="#Java设计模式" class="headerlink" title="Java设计模式"></a>Java设计模式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> calibre.web.feeds.recipes <span class="keyword">import</span> BasicNewsRecipe</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DesignPattern</span><span class="params">(BasicNewsRecipe)</span>:</span></span><br><span class="line"> </span><br><span class="line">    title = <span class="string">'设计模式'</span></span><br><span class="line">    description = <span class="string">'Java设计模式'</span></span><br><span class="line">    cover_url = <span class="string">'http://www.cvc.uab.es/shared/teach/a21291/web/images/sourcemakingdp.png'</span></span><br><span class="line"> </span><br><span class="line">    url_prefix = <span class="string">'http://www.jasongj.com/'</span></span><br><span class="line">    url = <span class="string">'http://www.jasongj.com/tags/Design-Pattern/'</span></span><br><span class="line">    no_stylesheets = <span class="literal">True</span></span><br><span class="line">    keep_only_tags = [dict(attrs=&#123;<span class="string">'class'</span> : [<span class="string">'posts-collapse'</span>, <span class="string">'post-description'</span>, <span class="string">'post-body'</span>]&#125;)]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_index</span><span class="params">(self)</span>:</span></span><br><span class="line">        soup = self.index_to_soup(self.url)</span><br><span class="line"> </span><br><span class="line">        div = soup.find(<span class="string">'div'</span>, &#123; <span class="string">'class'</span>: <span class="string">'posts-collapse'</span> &#125;)</span><br><span class="line"> </span><br><span class="line">        articles = []</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> div.findAll(<span class="string">'a'</span>):</span><br><span class="line"></span><br><span class="line">            til = link.find(<span class="string">'span'</span>).contents[<span class="number">0</span>].strip()</span><br><span class="line">            url = self.url_prefix +<span class="string">'/'</span>+ link[<span class="string">'href'</span>]</span><br><span class="line">            a = &#123; <span class="string">'title'</span>: til, <span class="string">'url'</span>: url &#125;</span><br><span class="line"> </span><br><span class="line">            articles.append(a)</span><br><span class="line"> </span><br><span class="line">        ans = [(<span class="string">'设计模式'</span>, articles)]</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> calibre </tag>
            
            <tag> 电子书 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017计划</title>
      <link href="/2017/04/26/2017%E8%AE%A1%E5%88%92/"/>
      <url>/2017/04/26/2017%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h3 id="锻炼"><a href="#锻炼" class="headerlink" title="锻炼"></a>锻炼</h3><ul><li><input disabled type="checkbox"> 每天早起</li><li><input disabled type="checkbox"> 🏃十公里</li><li><input disabled type="checkbox"> 锻炼上肢力量，引体向上，俯卧撑</li><li><input disabled type="checkbox"> 健康用眼</li></ul><a id="more"></a><h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><ul><li><input checked disabled type="checkbox"> <a href="https://book.douban.com/subject/2035179/" target="_blank" rel="noopener">动物农场</a></li><li><input disabled type="checkbox"> <a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">深入理解Java虚拟机（第2版）</a></li></ul><h3 id="观影"><a href="#观影" class="headerlink" title="观影"></a>观影</h3><ul><li><input disabled type="checkbox"> <a href="https://movie.douban.com/subject/26260853/?from=showing" target="_blank" rel="noopener">速度与激情8</a></li><li><input disabled type="checkbox"> <a href="https://movie.douban.com/subject/25765735/" target="_blank" rel="noopener">金刚狼3：殊死一战</a></li></ul><h3 id="世界那么大"><a href="#世界那么大" class="headerlink" title="世界那么大"></a>世界那么大</h3><ul><li><input disabled type="checkbox"> 牧童遥指杏花村，未果</li></ul>]]></content>
      
      
      <categories>
          
          <category> 在人间 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知易行难 </tag>
            
            <tag> 快2020了 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java skill大杂烩</title>
      <link href="/2017/04/25/java%E6%8A%80%E8%83%BD/"/>
      <url>/2017/04/25/java%E6%8A%80%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="SKILLS"><a href="#SKILLS" class="headerlink" title="SKILLS"></a>SKILLS</h3><h4 id="J2EE"><a href="#J2EE" class="headerlink" title="J2EE"></a>J2EE</h4><ul><li>J2EE(Servlet/Concurrence/RMI/JMS/JMX/JDBC…)</li><li>Framework(Spring/Struts/Hibernate/Ibatis…)</li><li>Weapon(Zookeeper/ActiveMQ/Ant/Maven…)</li><li>Server(Nginx/Resin/JBoss/Apache/Jetty…)</li></ul><a id="more"></a><h4 id="Architecture-Design"><a href="#Architecture-Design" class="headerlink" title="Architecture Design"></a>Architecture Design</h4><ul><li>Distributed System(RMI/RESTful/ICE…)</li><li>NoSQL(memcached/redis/mongodb…)</li><li>Architecture Design</li></ul><h4 id="Internet-plus"><a href="#Internet-plus" class="headerlink" title="Internet plus"></a>Internet plus</h4><ul><li>SNS</li><li>Elecronic Business</li></ul><h4 id="PROGRAMING"><a href="#PROGRAMING" class="headerlink" title="PROGRAMING"></a>PROGRAMING</h4><ul><li>Java</li><li>PHP</li><li>C</li><li>Bash</li></ul><h4 id="OPENSOURCE"><a href="#OPENSOURCE" class="headerlink" title="OPENSOURCE"></a>OPENSOURCE</h4><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="接口的意义-百度"><a href="#接口的意义-百度" class="headerlink" title="接口的意义-百度"></a>接口的意义-百度</h4><p>规范、扩展、回调</p><!-- more --><h4 id="抽象类的意义-乐视"><a href="#抽象类的意义-乐视" class="headerlink" title="抽象类的意义-乐视"></a>抽象类的意义-乐视</h4><p>为其子类提供一个公共的类型<br>封装子类中得重复内容<br>定义抽象方法，子类虽然有不同的实现 但是定义是一致的</p><h4 id="内部类的作用-乐视"><a href="#内部类的作用-乐视" class="headerlink" title="内部类的作用-乐视"></a>内部类的作用-乐视</h4><ol><li>内部类可以用多个实例，每个实例都有自己的状态信息，并且与其他外围对象的信息相互独立。</li><li>在单个外围类中，可以让多个内部类以不同的方式实现同一个接口，或者继承同一个类。</li><li>创建内部类对象的时刻并不依赖于外围类对象的创建。</li><li>内部类并没有令人迷惑的“is-a”关系，他就是一个独立的实体。</li><li>内部类提供了更好的封装，除了该外围类，其他类都不能访问</li></ol><h4 id="父类的静态方法能否被子类重写-猎豹"><a href="#父类的静态方法能否被子类重写-猎豹" class="headerlink" title="父类的静态方法能否被子类重写-猎豹"></a>父类的静态方法能否被子类重写-猎豹</h4><p>不能</p><p>子类继承父类后，用相同的静态方法和非静态方法，这时非静态方法覆盖父类中的方法（即方法重写），父类的该静态方法被隐藏（如果对象是父类则调用该隐藏的方法），另外子类可继承父类的静态与非静态方法，至于方法重载我觉得它其中一要素就是在同一类中，不能说父类中的什么方法与子类里的什么方法是方法重载的体现</p><h4 id="java排序算法-美团"><a href="#java排序算法-美团" class="headerlink" title="java排序算法-美团"></a>java排序算法-美团</h4><p><a href="http://blog.csdn.net/qy1387/article/details/7752973" target="_blank" rel="noopener">http://blog.csdn.net/qy1387/article/details/7752973</a></p><h4 id="列举java的集合和继承关系-百度-美团"><a href="#列举java的集合和继承关系-百度-美团" class="headerlink" title="列举java的集合和继承关系-百度-美团"></a>列举java的集合和继承关系-百度-美团</h4><h4 id="java虚拟机的特性-百度-乐视"><a href="#java虚拟机的特性-百度-乐视" class="headerlink" title="java虚拟机的特性-百度-乐视"></a>java虚拟机的特性-百度-乐视</h4><p>Java语言的一个非常重要的特点就是与平台的无关性。而使用Java虚拟机是实现这一特点的关键。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。而引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用模式Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。</p><h4 id="哪些情况下的对象会被垃圾回收机制处理掉-美团-小米"><a href="#哪些情况下的对象会被垃圾回收机制处理掉-美团-小米" class="headerlink" title="哪些情况下的对象会被垃圾回收机制处理掉-美团-小米"></a>哪些情况下的对象会被垃圾回收机制处理掉-美团-小米</h4><p>Java 垃圾回收机制最基本的做法是分代回收。内存中的区域被划分成不同的世代，对象根据其存活的时间被保存在对应世代的区域中。一般的实现是划分成3个世代：年轻、年老和永久。内存的分配是发生在年轻世代中的。当一个对象存活时间足够长的时候，它就会被复制到年老世代中。对于不同的世代可以使用不同的垃圾回收算法。进行世代划分的出发点是对应用中对象存活时间进行研究之后得出的统计规律。一般来说，一个应用中的大部分对象的存活时间都很短。比如局部变量的存活时间就只在方法的执行过程中。基于这一点，对于年轻世代的垃圾回收算法就可以很有针对性。</p><h4 id="进程和线程的区别-猎豹-美团"><a href="#进程和线程的区别-猎豹-美团" class="headerlink" title="进程和线程的区别-猎豹-美团"></a>进程和线程的区别-猎豹-美团</h4><p>简而言之,一个程序至少有一个进程,一个进程至少有一个线程。</p><p>线程的划分尺度小于进程，使得多线程程序的并发性高。</p><p>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p><p>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</p><p>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p><p>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位.</p><p>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.</p><p>一个线程可以创建和撤销另一个线程;同一个进程中的多个线程之间可以并发执行.</p><p>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。如果有兴趣深入的话，我建议你们看看《现代操作系统》或者《操作系统的设计与实现》。对就个问题说得比较清楚。</p><h4 id="java中-和equals和hashCode的区别-乐视"><a href="#java中-和equals和hashCode的区别-乐视" class="headerlink" title="java中==和equals和hashCode的区别-乐视"></a>java中==和equals和hashCode的区别-乐视</h4><p><a href="http://blog.csdn.net/tiantiandjava/article/details/46988461" target="_blank" rel="noopener">http://blog.csdn.net/tiantiandjava/article/details/46988461</a></p><h4 id="HashMap的实现原理-美团"><a href="#HashMap的实现原理-美团" class="headerlink" title="HashMap的实现原理-美团"></a>HashMap的实现原理-美团</h4><ol><li>HashMap概述：<br>HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。 </li><li>HashMap的数据结构：<br> 在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。</li></ol><p>从上图中可以看出，HashMap底层就是一个数组结构，数组中的每一项又是一个链表。当新建一个HashMap的时候，就会初始化一个数组。</p><h4 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h4><p><a href="http://www.jdon.com/designpatterns/designpattern_State.htm" target="_blank" rel="noopener">http://www.jdon.com/designpatterns/designpattern_State.htm</a></p><h4 id="int-char-long各占多少字节数"><a href="#int-char-long各占多少字节数" class="headerlink" title="int-char-long各占多少字节数"></a>int-char-long各占多少字节数</h4><p>byte 位数 8 字节数 1</p><p>short 16 2</p><p>int 32 4</p><p>long 64 8</p><p>float 32 4</p><p>double 64 8</p><p>char 16 2</p><h4 id="int与integer的区别"><a href="#int与integer的区别" class="headerlink" title="int与integer的区别"></a>int与integer的区别</h4><p><a href="http://www.cnblogs.com/shenliang123/archive/2011/10/27/2226903.html" target="_blank" rel="noopener">http://www.cnblogs.com/shenliang123/archive/2011/10/27/2226903.html</a></p><h4 id="string-stringbuffer-stringbuilder区别-小米-乐视-百度"><a href="#string-stringbuffer-stringbuilder区别-小米-乐视-百度" class="headerlink" title="string-stringbuffer-stringbuilder区别-小米-乐视-百度"></a>string-stringbuffer-stringbuilder区别-小米-乐视-百度</h4><p>String 字符串常量</p><p>StringBuffer 字符串变量（线程安全）</p><p>StringBuilder 字符串变量（非线程安全）</p><p>简要的说， String 类型和 StringBuffer 类型的主要性能区别其实在于 String 是不可变的对象, 因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用String ，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后,JVM 的 GC 就会开始工作，那速度是一定会相当慢的。</p><p>而如果是使用 StringBuffer 类则结果就不一样了，每次结果都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。所以在一般情况下我们推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。而在某些特别情况下， String 对象的字符串拼接其实是被 JVM 解释成了 StringBuffer 对象的拼接，所以这些时候 String 对象的速度并不会比 StringBuffer 对象慢，而特别是以下的字符串对象生成中， String 效率是远要比 StringBuffer 快的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String S1 = <span class="string">"This is only a"</span> + <span class="string">"simple"</span> + <span class="string">" test"</span>;</span><br><span class="line">StringBuffer Sb = <span class="keyword">new</span> StringBuffer(<span class="string">"This is only a"</span>).append(<span class="string">"simple"</span>).append(<span class="string">"test"</span>);</span><br></pre></td></tr></table></figure><p>你会很惊讶的发现，生成 String S1 对象的速度简直太快了，而这个时候 StringBuffer 居然速度上根本一点都不占优势。其实这是 JVM 的一个把戏，在 JVM 眼里，这个<br> String S1 = “This is only a” + “ simple” + “test”; 其实就是：<br> String S1 = “This is only a simple test”; 所以当然不需要太多的时间了。但大家这里要注意的是，如果你的字符串是来自另外的 String 对象的话，速度就没那么快了，譬如：<br> String S2 = “This is only a”;<br>String S3 = “ simple”;<br>String S4 = “ test”;<br>String S1 = S2 +S3 + S4;<br>这时候 JVM 会规规矩矩的按照原来的方式去做</p><p>在大部分情况下 StringBuffer &gt; String</p><p>StringBuffer</p><p>Java.lang.StringBuffer线程安全的可变字符序列。一个类似于 String 的字符串缓冲区，但不能修改。虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。</p><p>可将字符串缓冲区安全地用于多个线程。可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。</p><p>StringBuffer 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据。每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符追加或插入到字符串缓冲区中。append 方法始终将这些字符添加到缓冲区的末端；而 insert 方法则在指定的点添加字符。</p><p>例如，如果 z 引用一个当前内容是“start”的字符串缓冲区对象，则此方法调用 z.append(“le”) 会使字符串缓冲区包含“startle”，而 z.insert(4, “le”) 将更改字符串缓冲区，使之包含“starlet”。</p><p>在大部分情况下 StringBuilder &gt; StringBuffer</p><p>java.lang.StringBuilder</p><p>java.lang.StringBuilder一个可变的字符序列是5.0新增的。此类提供一个与 StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快。两者的方法基本相同</p><h4 id="java多态-乐视"><a href="#java多态-乐视" class="headerlink" title="java多态-乐视"></a>java多态-乐视</h4><p>Java多态性理解</p><p>Java中多态性的实现</p><p>什么是多态</p><p>面向对象的三大特性：封装、继承、多态。从一定角度来看，封装和继承几乎都是为多态而准备的。这是我们最后一个概念，也是最重要的知识点。</p><p>多态的定义：指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。（发送消息就是函数调用）</p><p>实现多态的技术称为：动态绑定（dynamic binding），是指在执行期间判断所引用对象的实<br>际类型，根据其实际的类型调用其相应的方法。</p><p>多态的作用：消除类型之间的耦合关系。</p><p>现实中，关于多态的例子不胜枚举。比方说按下 F1 键这个动作，如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；如果当前在 Word 下弹出的就是 Word 帮助；在 Windows 下弹出的就是 Windows 帮助和支持。同一个事件发生在不同的对象上会产生不同的结果。<br>下面是多态存在的三个必要条件，要求大家做梦时都能背出来！</p><p>多态存在的三个必要条件<br>一、要有继承；<br>二、要有重写；<br>三、父类引用指向子类对象。</p><p> 多态的好处：</p><p>1.可替换性（substitutability）。多态对已存在代码具有可替换性。例如，多态对圆Circle类工作，对其他任何圆形几何体，如圆环，也同样工作。</p><p>2.可扩充性（extensibility）。多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作。实际上新加子类更容易获得多态功能。例如，在实现了圆锥、半圆锥以及半球体的多态基础上，很容易增添球体类的多态性。</p><p>3.接口性（interface-ability）。多态是超类通过方法签名，向子类提供了一个共同接口，由子类来完善或者覆盖它而实现的。如图8.3 所示。图中超类Shape规定了两个实现多态的接口方法，computeArea()以及computeVolume()。子类，如Circle和Sphere为了实现多态，完善或者覆盖这两个接口方法。</p><p>4.灵活性（flexibility）。它在应用中体现了灵活多样的操作，提高了使用效率。</p><p>5.简化性（simplicity）。多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。</p><p>Java中多态的实现方式：接口实现，继承父类进行方法重写，同一个类中进行方法重载。</p><h4 id="什么导致线程阻塞-58-美团"><a href="#什么导致线程阻塞-58-美团" class="headerlink" title="什么导致线程阻塞-58-美团"></a>什么导致线程阻塞-58-美团</h4><p>线程的阻塞</p><p>为了解决对共享存储区的访问冲突，Java 引入了同步机制，现在让我们来考察多个线程对共享资源的访问，显然同步机制已经不够了，因为在任意时刻所要求的资源不一定已经准备好了被访问，反过来，同一时刻准备好了的资源也可能不止一个。为了解决这种情况下的访问控制问题，Java 引入了对阻塞机制的支持.</p><p>阻塞指的是暂停一个线程的执行以等待某个条件发生（如某资源就绪），学过操作系统的同学对它一定已经很熟悉了。Java 提供了大量方法来支持阻塞，下面让我们逐一分析。</p><ol><li>sleep() 方法：sleep() 允许 指定以毫秒为单位的一段时间作为参数，它使得线程在指定的时间内进入阻塞状态，不能得到CPU 时间，指定的时间一过，线程重新进入可执行状态。典型地，sleep() 被用在等待某个资源就绪的情形：测试发现条件不满足后，让线程阻塞一段时间后重新测试，直到条件满足为止。</li><li>suspend() 和 resume() 方法：两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的resume() 被调用，才能使得线程重新进入可执行状态。典型地，suspend() 和 resume() 被用在等待另一个线程产生的结果的情形：测试发现结果还没有产生后，让线程阻塞，另一个线程产生了结果后，调用 resume() 使其恢复。</li><li>yield() 方法：yield() 使得线程放弃当前分得的 CPU 时间，但是不使线程阻塞，即线程仍处于可执行状态，随时可能再次分得 CPU 时间。调用 yield() 的效果等价于调度程序认为该线程已执行了足够的时间从而转到另一个线程.</li><li>wait() 和 notify() 方法：两个方法配套使用，wait() 使得线程进入阻塞状态，它有两种形式，一种允许 指定以毫秒为单位的一段时间作为参数，另一种没有参数，前者当对应的 notify() 被调用或者超出指定时间时线程重新进入可执行状态，后者则必须对应的 notify() 被调用.</li></ol><p>初看起来它们与 suspend() 和 resume() 方法对没有什么分别，但是事实上它们是截然不同的。区别的核心在于，前面叙述的所有方法，阻塞时都不会释放占用的锁（如果占用了的话），而这一对方法则相反。</p><p>上述的核心区别导致了一系列的细节上的区别。</p><p>首先，前面叙述的所有方法都隶属于 Thread 类，但是这一对却直接隶属于 Object 类，也就是说，所有对象都拥有这一对方法。初看起来这十分不可思议，但是实际上却是很自然的，因为这一对方法阻塞时要释放占用的锁，而锁是任何对象都具有的，调用任意对象的 wait() 方法导致线程阻塞，并且该对象上的锁被释放。而调用 任意对象的notify()方法则导致因调用该对象的 wait() 方法而阻塞的线程中随机选择的一个解除阻塞（但要等到获得锁后才真正可执行）。</p><p>其次，前面叙述的所有方法都可在任何位置调用，但是这一对方法却必须在 synchronized 方法或块中调用，理由也很简单，只有在synchronized 方法或块中当前线程才占有锁，才有锁可以释放。同样的道理，调用这一对方法的对象上的锁必须为当前线程所拥有，这样才有锁可以释放。因此，这一对方法调用必须放置在这样的 synchronized 方法或块中，该方法或块的上锁对象就是调用这一对方法的对象。若不满足这一条件，则程序虽然仍能编译，但在运行时会出现IllegalMonitorStateException 异常。</p><p>wait() 和 notify() 方法的上述特性决定了它们经常和synchronized 方法或块一起使用，将它们和操作系统的进程间通信机制作一个比较就会发现它们的相似性：synchronized方法或块提供了类似于操作系统原语的功能，它们的执行不会受到多线程机制的干扰，而这一对方法则相当于 block 和wakeup 原语（这一对方法均声明为 synchronized）。它们的结合使得我们可以实现操作系统上一系列精妙的进程间通信的算法（如信号量算法），并用于解决各种复杂的线程间通信问题。</p><p>关于 wait() 和 notify() 方法最后再说明两点：</p><p>第一：调用 notify() 方法导致解除阻塞的线程是从因调用该对象的 wait() 方法而阻塞的线程中随机选取的，我们无法预料哪一个线程将会被选择，所以编程时要特别小心，避免因这种不确定性而产生问题。</p><p>第二：除了 notify()，还有一个方法 notifyAll() 也可起到类似作用，唯一的区别在于，调用 notifyAll() 方法将把因调用该对象的 wait() 方法而阻塞的所有线程一次性全部解除阻塞。当然，只有获得锁的那一个线程才能进入可执行状态。</p><p>谈到阻塞，就不能不谈一谈死锁，略一分析就能发现，suspend() 方法和不指定超时期限的 wait() 方法的调用都可能产生死锁。遗憾的是，Java 并不在语言级别上支持死锁的避免，我们在编程中必须小心地避免死锁。</p><p>以上我们对 Java 中实现线程阻塞的各种方法作了一番分析，我们重点分析了 wait() 和 notify() 方法，因为它们的功能最强大，使用也最灵活，但是这也导致了它们的效率较低，较容易出错。实际使用中我们应该灵活使用各种方法，以便更好地达到我们的目的。</p><h4 id="抽象类接口区别-360"><a href="#抽象类接口区别-360" class="headerlink" title="抽象类接口区别-360"></a>抽象类接口区别-360</h4><ol><li><p>默认的方法实现<br>抽象类可以有默认的方法实现完全是抽象的。接口根本不存在方法的实现</p></li><li><p>实现<br>子类使用extends关键字来继承抽象类。如果子类不是抽象类的话，它需要提供抽象类中所有声明的方法的实现。<br>子类使用关键字implements来实现接口。它需要提供接口中所有声明的方法的实现</p></li><li><p>构造器<br>抽象类可以有构造器<br>接口不能有构造器</p></li><li><p>与正常Java类的区别<br>除了你不能实例化抽象类之外，它和普通Java类没有任何区<br>接口是完全不同的类型</p></li><li><p>访问修饰符<br>抽象方法可以有public、protected和default这些修饰符<br>接口方法默认修饰符是public。你不可以使用其它修饰符。</p></li><li><p>main方法<br>抽象方法可以有main方法并且我们可以运行它<br>接口没有main方法，因此我们不能运行它。</p></li><li><p>多继承<br>抽象类在java语言中所表示的是一种继承关系，一个子类只能存在一个父类，但是可以存在多个接口。</p></li><li><p>速度<br>它比接口速度要快<br>接口是稍微有点慢的，因为它需要时间去寻找在类中实现的方法。</p></li><li><p>添加新方法<br>如果你往抽象类中添加新的方法，你可以给它提供默认的实现。因此你不需要改变你现在的代码。<br>如果你往接口中添加方法，那么你必须改变实现该接口的类。</p></li></ol><h4 id="容器类之间的区别-乐视-美团"><a href="#容器类之间的区别-乐视-美团" class="headerlink" title="容器类之间的区别-乐视-美团"></a>容器类之间的区别-乐视-美团</h4><p><a href="http://www.cnblogs.com/yuanermen/archive/2009/08/05/1539917.html" target="_blank" rel="noopener">http://www.cnblogs.com/yuanermen/archive/2009/08/05/1539917.html</a><br><a href="http://alexyyek.github.io/2015/04/06/Collection/" target="_blank" rel="noopener">http://alexyyek.github.io/2015/04/06/Collection/</a><br><a href="http://tianmaying.com/tutorial/java_collection" target="_blank" rel="noopener">http://tianmaying.com/tutorial/java_collection</a></p><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p><a href="http://www.cnblogs.com/chenssy/p/3388487.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenssy/p/3388487.html</a></p><h4 id="hashmap和hashtable的区别-乐视-小米"><a href="#hashmap和hashtable的区别-乐视-小米" class="headerlink" title="hashmap和hashtable的区别-乐视-小米"></a>hashmap和hashtable的区别-乐视-小米</h4><p><a href="http://www.233.com/ncre2/JAVA/jichu/20100717/084230917.html" target="_blank" rel="noopener">http://www.233.com/ncre2/JAVA/jichu/20100717/084230917.html</a></p><h4 id="ArrayMap对比HashMap"><a href="#ArrayMap对比HashMap" class="headerlink" title="ArrayMap对比HashMap"></a>ArrayMap对比HashMap</h4><p><a href="http://lvable.com/?p=217" target="_blank" rel="noopener">http://lvable.com/?p=217</a></p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><h4 id="如何导入外部数据库"><a href="#如何导入外部数据库" class="headerlink" title="如何导入外部数据库"></a>如何导入外部数据库</h4><p>把原数据库包括在项目源码的 res/raw </p><p>android系统下数据库应该存放在 /data/data/com.<em>.</em>（package name）/ 目录下，所以我们需要做的是把已有的数据库传入那个目录下.操作方法是用FileInputStream读取原数据库，再用FileOutputStream把读取到的东西写入到那个目录.</p><h4 id="本地广播和全局广播有什么差别"><a href="#本地广播和全局广播有什么差别" class="headerlink" title="本地广播和全局广播有什么差别"></a>本地广播和全局广播有什么差别</h4><p>因广播数据在本应用范围内传播，不用担心隐私数据泄露的问题。<br>不用担心别的应用伪造广播，造成安全隐患。<br>相比在系统内发送全局广播，它更高效。</p><h4 id="intentService作用是什么-AIDL解决了什么问题-小米"><a href="#intentService作用是什么-AIDL解决了什么问题-小米" class="headerlink" title="intentService作用是什么,AIDL解决了什么问题-小米"></a>intentService作用是什么,AIDL解决了什么问题-小米</h4><p>生成一个默认的且与主线程互相独立的工作者线程来执行所有传送至onStartCommand() 方法的Intetnt。</p><p>生成一个工作队列来传送Intent对象给你的onHandleIntent()方法，同一时刻只传送一个Intent对象，这样一来，你就不必担心多线程的问题。在所有的请求(Intent)都被执行完以后会自动停止服务，所以，你不需要自己去调用stopSelf()方法来停止。</p><p>该服务提供了一个onBind()方法的默认实现，它返回null</p><p>提供了一个onStartCommand()方法的默认实现，它将Intent先传送至工作队列，然后从工作队列中每次取出一个传送至onHandleIntent()方法，在该方法中对Intent对相应的处理。</p><p>AIDL (Android Interface Definition Language) 是一种IDL 语言，用于生成可以在Android设备上两个进程之间进行进程间通信(interprocess communication, IPC)的代码。如果在一个进程中（例如Activity）要调用另一个进程中（例如Service）对象的操作，就可以使用AIDL生成可序列化的参数。<br>AIDL IPC机制是面向接口的，像COM或Corba一样，但是更加轻量级。它是使用代理类在客户端和实现端传递数据。</p><h4 id="Activity-Window-View三者的差别-fragment的特点-360"><a href="#Activity-Window-View三者的差别-fragment的特点-360" class="headerlink" title="Activity/Window/View三者的差别,fragment的特点-360"></a>Activity/Window/View三者的差别,fragment的特点-360</h4><p>Activity像一个工匠（控制单元），Window像窗户（承载模型），View像窗花（显示视图）<br>LayoutInflater像剪刀，Xml配置像窗花图纸。</p><ol><li>在Activity中调用attach，创建了一个Window</li><li>创建的window是其子类PhoneWindow，在attach中创建PhoneWindow</li><li>在Activity中调用setContentView(R.layout.xxx)</li><li>其中实际上是调用的getWindow().setContentView()</li><li>调用PhoneWindow中的setContentView方法</li><li>创建ParentView： 作为ViewGroup的子类，实际是创建的DecorView(作为FramLayout的子类）</li><li>将指定的R.layout.xxx进行填充 通过布局填充器进行填充【其中的parent指的就是DecorView】</li><li>调用到ViewGroup</li><li>调用ViewGroup的removeAllView()，先将所有的view移除掉</li><li>添加新的view：addView()</li></ol><p>fragment 特点</p><ul><li>Fragment可以作为Activity界面的一部分组成出现；</li><li>可以在一个Activity中同时出现多个Fragment，并且一个Fragment也可以在多个Activity中使用；</li><li>在Activity运行过程中，可以添加、移除或者替换Fragment；</li><li>Fragment可以响应自己的输入事件，并且有自己的生命周期，它们的生命周期会受宿主Activity的生命周期影响。</li></ul><h4 id="描述一次网络请求的流程-新浪"><a href="#描述一次网络请求的流程-新浪" class="headerlink" title="描述一次网络请求的流程-新浪"></a>描述一次网络请求的流程-新浪</h4><h4 id="Handler-Thread和HandlerThread的差别-小米"><a href="#Handler-Thread和HandlerThread的差别-小米" class="headerlink" title="Handler,Thread和HandlerThread的差别-小米"></a>Handler,Thread和HandlerThread的差别-小米</h4><p><a href="http://blog.csdn.net/guolin_blog/article/details/9991569" target="_blank" rel="noopener">http://blog.csdn.net/guolin_blog/article/details/9991569</a></p><p><a href="http://droidyue.com/blog/2015/11/08/make-use-of-handlerthread/" target="_blank" rel="noopener">http://droidyue.com/blog/2015/11/08/make-use-of-handlerthread/</a></p><p>从Android中Thread（java.lang.Thread -&gt; java.lang.Object）描述可以看出，Android的Thread没有对Java的Thread做任何封装，但是Android提供了一个继承自Thread的类HandlerThread（android.os.HandlerThread -&gt; java.lang.Thread），这个类对Java的Thread做了很多便利Android系统的封装。</p><p>android.os.Handler可以通过Looper对象实例化，并运行于另外的线程中，Android提供了让Handler运行于其它线程的线程实现，也是就HandlerThread。HandlerThread对象start后可以获得其Looper对象，并且使用这个Looper对象实例Handler。</p><h4 id="低版本SDK实现高版本api-小米"><a href="#低版本SDK实现高版本api-小米" class="headerlink" title="低版本SDK实现高版本api-小米"></a>低版本SDK实现高版本api-小米</h4><p>自己实现或@TargetApi annotation</p><h4 id="Ubuntu编译安卓系统-百度"><a href="#Ubuntu编译安卓系统-百度" class="headerlink" title="Ubuntu编译安卓系统-百度"></a>Ubuntu编译安卓系统-百度</h4><ol><li>进入源码根目录</li><li>. build/envsetup.sh</li><li>lunch</li><li>full(编译全部)</li><li>userdebug(选择编译版本)</li><li>make -j8(开启8个线程编译)</li></ol><h4 id="LaunchMode应用场景-百度-小米-乐视"><a href="#LaunchMode应用场景-百度-小米-乐视" class="headerlink" title="LaunchMode应用场景-百度-小米-乐视"></a>LaunchMode应用场景-百度-小米-乐视</h4><p>standard，创建一个新的Activity。</p><p>singleTop，栈顶不是该类型的Activity，创建一个新的Activity。否则，onNewIntent。</p><p>singleTask，回退栈中没有该类型的Activity，创建Activity，否则，onNewIntent+ClearTop。</p><p>注意:</p><ol><li>设置了”singleTask”启动模式的Activity，它在启动的时候，会先在系统中查找属性值affinity等于它的属性值taskAffinity的Task存在； 如果存在这样的Task，它就会在这个Task中启动，否则就会在新的任务栈中启动。因此， 如果我们想要设置了”singleTask”启动模式的Activity在新的任务中启动，就要为它设置一个独立的taskAffinity属性值。</li><li>如果设置了”singleTask”启动模式的Activity不是在新的任务中启动时，它会在已有的任务中查看是否已经存在相应的Activity实例， 如果存在，就会把位于这个Activity实例上面的Activity全部结束掉，即最终这个Activity 实例会位于任务的Stack顶端中。</li><li>在一个任务栈中只有一个”singleTask”启动模式的Activity存在。他的上面可以有其他的Activity。这点与singleInstance是有区别的。</li></ol><p>singleInstance，回退栈中，只有这一个Activity，没有其他Activity。</p><p>singleTop适合接收通知启动的内容显示页面。</p><p>例如，某个新闻客户端的新闻内容页面，如果收到10个新闻推送，每次都打开一个新闻内容页面是很烦人的。</p><p>singleTask适合作为程序入口点。</p><p>例如浏览器的主界面。不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走onNewIntent，并且会清空主界面上面的其他页面。</p><p>singleInstance应用场景：</p><p>闹铃的响铃界面。 你以前设置了一个闹铃：上午6点。在上午5点58分，你启动了闹铃设置界面，并按 Home 键回桌面；在上午5点59分时，你在微信和朋友聊天；在6点时，闹铃响了，并且弹出了一个对话框形式的 Activity(名为 AlarmAlertActivity) 提示你到6点了(这个 Activity 就是以 SingleInstance 加载模式打开的)，你按返回键，回到的是微信的聊天界面，这是因为 AlarmAlertActivity 所在的 Task 的栈只有他一个元素， 因此退出之后这个 Task 的栈空了。如果是以 SingleTask 打开 AlarmAlertActivity，那么当闹铃响了的时候，按返回键应该进入闹铃设置界面。</p><h4 id="Touch事件传递流程-小米"><a href="#Touch事件传递流程-小米" class="headerlink" title="Touch事件传递流程-小米"></a>Touch事件传递流程-小米</h4><p><a href="http://hanhailong.com/2015/09/24/Android-%E4%B8%89%E5%BC%A0%E5%9B%BE%E6%90%9E%E5%AE%9ATouch%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">http://hanhailong.com/2015/09/24/Android-%E4%B8%89%E5%BC%A0%E5%9B%BE%E6%90%9E%E5%AE%9ATouch%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</a></p><h4 id="View绘制流程-百度"><a href="#View绘制流程-百度" class="headerlink" title="View绘制流程-百度"></a>View绘制流程-百度</h4><p><a href="http://www.codekk.com/blogs/detail/54cfab086c4761e5001b253f" target="_blank" rel="noopener">http://www.codekk.com/blogs/detail/54cfab086c4761e5001b253f</a></p><h4 id="多线程-360"><a href="#多线程-360" class="headerlink" title="多线程-360"></a>多线程-360</h4><ul><li>Activity.runOnUiThread(Runnable)</li><li>View.post(Runnable),View.postDelay(Runnable,long)</li><li>Handler</li><li>AsyncTask</li></ul><h4 id="线程同步-百度"><a href="#线程同步-百度" class="headerlink" title="线程同步-百度"></a>线程同步-百度</h4><p><a href="http://www.itzhai.com/java-based-notebook-thread-synchronization-problem-solving-synchronization-problems-synchronized-block-synchronized-methods.html#read-more" target="_blank" rel="noopener">http://www.itzhai.com/java-based-notebook-thread-synchronization-problem-solving-synchronization-problems-synchronized-block-synchronized-methods.html#read-more</a></p><p><a href="http://www.juwends.com/tech/android/android-inter-thread-comm.html" target="_blank" rel="noopener">http://www.juwends.com/tech/android/android-inter-thread-comm.html</a></p><p>单例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton mSingleton;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(mSingleton == <span class="keyword">null</span>)&#123;\\A</span><br><span class="line">    <span class="keyword">synchronized</span>(Singleton.class)&#123;\\C</span><br><span class="line">     <span class="keyword">if</span>(mSingleton == <span class="keyword">null</span>)</span><br><span class="line">      mSingleton = <span class="keyword">new</span> Singleton();\\B</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mSingleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="什么情况导致内存泄漏-美团"><a href="#什么情况导致内存泄漏-美团" class="headerlink" title="什么情况导致内存泄漏-美团"></a>什么情况导致内存泄漏-美团</h4><p>1.资源对象没关闭造成的内存泄漏</p><p>描述：<br>资源性对象比如(Cursor，File文件等)往往都用了一些缓冲，我们在不使用的时候，应该及时关闭它们，以便它们的缓冲及时回收内存。它们的缓冲不仅存在于 java虚拟机内，还存在于java虚拟机外。如果我们仅仅是把它的引用设置为null,而不关闭它们，往往会造成内存泄漏。因为有些资源性对象，比如 SQLiteCursor(在析构函数finalize(),如果我们没有关闭它，它自己会调close()关闭)，如果我们没有关闭它，系统在回收它时也会关闭它，但是这样的效率太低了。因此对于资源性对象在不使用的时候，应该调用它的close()函数，将其关闭掉，然后才置为null.在我们的程序退出时一定要确保我们的资源性对象已经关闭。<br>程序中经常会进行查询数据库的操作，但是经常会有使用完毕Cursor后没有关闭的情况。如果我们的查询结果集比较小，对内存的消耗不容易被发现，只有在常时间大量操作的情况下才会复现内存问题，这样就会给以后的测试和问题排查带来困难和风险。</p><p>2.构造Adapter时，没有使用缓存的convertView</p><p>描述：<br>以构造ListView的BaseAdapter为例，在BaseAdapter中提供了方法：<br>public View getView(int position, ViewconvertView, ViewGroup parent)<br>来向ListView提供每一个item所需要的view对象。初始时ListView会从BaseAdapter中根据当前的屏幕布局实例化一定数量的 view对象，同时ListView会将这些view对象缓存起来。当向上滚动ListView时，原先位于最上面的list item的view对象会被回收，然后被用来构造新出现的最下面的list item。这个构造过程就是由getView()方法完成的，getView()的第二个形参View convertView就是被缓存起来的list item的view对象(初始化时缓存中没有view对象则convertView是null)。由此可以看出，如果我们不去使用 convertView，而是每次都在getView()中重新实例化一个View对象的话，即浪费资源也浪费时间，也会使得内存占用越来越大。 ListView回收list item的view对象的过程可以查看:<br>android.widget.AbsListView.java –&gt; voidaddScrapView(View scrap) 方法。<br>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public View getView(int position, ViewconvertView, ViewGroup parent) &#123;</span><br><span class="line">View view = new Xxx(...); </span><br><span class="line">... ... </span><br><span class="line">return view; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修正示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public View getView(int position, ViewconvertView, ViewGroup parent) &#123;</span><br><span class="line">View view = null; </span><br><span class="line">if (convertView != null) &#123; </span><br><span class="line">view = convertView; </span><br><span class="line">populate(view, getItem(position)); </span><br><span class="line">... </span><br><span class="line">&#125; else &#123; </span><br><span class="line">view = new Xxx(...); </span><br><span class="line">... </span><br><span class="line">&#125; </span><br><span class="line">return view; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.Bitmap对象不在使用时调用recycle()释放内存</p><p>描述：<br>有时我们会手工的操作Bitmap对象，如果一个Bitmap对象比较占内存，当它不在被使用的时候，可以调用Bitmap.recycle()方法回收此对象的像素所占用的内存，但这不是必须的，视情况而定。可以看一下代码中的注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">•Free up the memory associated with thisbitmap's pixels, and mark the </span></span><br><span class="line"><span class="comment">•bitmap as "dead", meaning itwill throw an exception if getPixels() or </span></span><br><span class="line"><span class="comment">•setPixels() is called, and will drawnothing. This operation cannot be </span></span><br><span class="line"><span class="comment">•reversed, so it should only be called ifyou are sure there are no </span></span><br><span class="line"><span class="comment">•further uses for the bitmap. This is anadvanced call, and normally need </span></span><br><span class="line"><span class="comment">•not be called, since the normal GCprocess will free up this memory when </span></span><br><span class="line"><span class="comment">•there are no more references to thisbitmap. </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>4.试着使用关于application的context来替代和activity相关的context</p><p>这是一个很隐晦的内存泄漏的情况。有一种简单的方法来避免context相关的内存泄漏。最显著地一个是避免context逃出他自己的范围之外。使用Application context。这个context的生存周期和你的应用的生存周期一样长，而不是取决于activity的生存周期。如果你想保持一个长期生存的对象，并且这个对象需要一个context,记得使用application对象。你可以通过调用 Context.getApplicationContext() or Activity.getApplication()来获得。更多的请看这篇文章如何避免<br>Android内存泄漏。</p><p>5.注册没取消造成的内存泄漏</p><p>一些Android程序可能引用我们的Anroid程序的对象(比如注册机制)。即使我们的Android程序已经结束了，但是别的引用程序仍然还有对我们的Android程序的某个对象的引用，泄漏的内存依然不能被垃圾回收。调用registerReceiver后未调用unregisterReceiver。<br>比如:假设我们希望在锁屏界面(LockScreen)中，监听系统中的电话服务以获取一些信息(如信号强度等)，则可以在LockScreen中定义一个 PhoneStateListener的对象，同时将它注册到TelephonyManager服务中。对于LockScreen对象，当需要显示锁屏界面的时候就会创建一个LockScreen对象，而当锁屏界面消失的时候LockScreen对象就会被释放掉。<br>但是如果在释放 LockScreen对象的时候忘记取消我们之前注册的PhoneStateListener对象，则会导致LockScreen无法被垃圾回收。如果不断的使锁屏界面显示和消失，则最终会由于大量的LockScreen对象没有办法被回收而引起OutOfMemory,使得system_process 进程挂掉。<br>虽然有些系统程序，它本身好像是可以自动取消注册的(当然不及时)，但是我们还是应该在我们的程序中明确的取消注册，程序结束时应该把所有的注册都取消掉。</p><p>6.集合中对象没清理造成的内存泄漏</p><p>我们通常把一些对象的引用加入到了集合中，当我们不需要该对象时，并没有把它的引用从集合中清理掉，这样这个集合就会越来越大。如果这个集合是static的话，那情况就更严重了。</p><h4 id="ANR定位和修正"><a href="#ANR定位和修正" class="headerlink" title="ANR定位和修正"></a>ANR定位和修正</h4><p>如果开发机器上出现问题，我们可以通过查看/data/anr/traces.txt即可，最新的ANR信息在最开始部分。</p><ul><li><p>主线程被IO操作（从4.0之后网络IO不允许在主线程中）阻塞。</p></li><li><p>主线程中存在耗时的计算</p></li><li><p>主线程中错误的操作，比如Thread.wait或者Thread.sleep等<br>Android系统会监控程序的响应状况，一旦出现下面两种情况，则弹出ANR对话框</p></li><li><p>应用在5秒内未响应用户的输入事件（如按键或者触摸）</p></li><li><p>BroadcastReceiver未在10秒内完成相关的处理</p></li><li><p>Service在特定的时间内无法处理完成 20秒</p></li><li><p>使用AsyncTask处理耗时IO操作。</p></li><li><p>使用Thread或者HandlerThread时，调用Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND)设置优先级，否则仍然会降低程序响应，因为默认Thread的优先级和主线程相同。</p></li><li><p>使用Handler处理工作线程结果，而不是使用Thread.wait()或者Thread.sleep()来阻塞主线程。</p></li><li><p>Activity的onCreate和onResume回调中尽量避免耗时的代码</p></li><li><p>BroadcastReceiver中onReceive代码也要尽量减少耗时，建议使用IntentService处理。</p></li></ul><h4 id="什么情况导致oom-乐视-美团"><a href="#什么情况导致oom-乐视-美团" class="headerlink" title="什么情况导致oom-乐视-美团"></a>什么情况导致oom-乐视-美团</h4><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0920/3478.html" target="_blank" rel="noopener">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0920/3478.html</a></p><p>1）使用更加轻量的数据结构<br>2）Android里面使用Enum<br>3）Bitmap对象的内存占用<br>4）更大的图片<br>5）onDraw方法里面执行对象的创建<br>6）StringBuilder</p><h4 id="Service与Activity之间通信的几种方式"><a href="#Service与Activity之间通信的几种方式" class="headerlink" title="Service与Activity之间通信的几种方式"></a>Service与Activity之间通信的几种方式</h4><ul><li>通过Binder对象</li><li>通过broadcast(广播)的形式</li></ul><h4 id="Android各个版本API的区别"><a href="#Android各个版本API的区别" class="headerlink" title="Android各个版本API的区别"></a>Android各个版本API的区别</h4><p><a href="http://blog.csdn.net/lijun952048910/article/details/7980562" target="_blank" rel="noopener">http://blog.csdn.net/lijun952048910/article/details/7980562</a></p><h4 id="Android代码中实现WAP方式联网-360"><a href="#Android代码中实现WAP方式联网-360" class="headerlink" title="Android代码中实现WAP方式联网-360"></a>Android代码中实现WAP方式联网-360</h4><p><a href="http://blog.csdn.net/asce1885/article/details/7844159" target="_blank" rel="noopener">http://blog.csdn.net/asce1885/article/details/7844159</a></p><h4 id="如何保证service在后台不被Kill"><a href="#如何保证service在后台不被Kill" class="headerlink" title="如何保证service在后台不被Kill"></a>如何保证service在后台不被Kill</h4><p>一、onStartCommand方法，返回START_STICKY</p><ol><li><p>START_STICKY<br>在运行onStartCommand后service进程被kill后，那将保留在开始状态，但是不保留那些传入的intent。不久后service就会再次尝试重新创建，因为保留在开始状态，在创建     service后将保证调用onstartCommand。如果没有传递任何开始命令给service，那将获取到null的intent。</p></li><li><p>START_NOT_STICKY<br>在运行onStartCommand后service进程被kill后，并且没有新的intent传递给它。Service将移出开始状态，并且直到新的明显的方法（startService）调用才重新创建。因为如果没有传递任何未决定的intent那么service是不会启动，也就是期间onstartCommand不会接收到任何null的intent。</p></li><li><p>START_REDELIVER_INTENT<br>在运行onStartCommand后service进程被kill后，系统将会再次启动service，并传入最后一个intent给onstartCommand。直到调用stopSelf(int)才停止传递intent。如果在被kill后还有未处理好的intent，那被kill后服务还是会自动启动。因此onstartCommand不会接收到任何null的intent。</p></li></ol><p>二、提升service优先级</p><p>在AndroidManifest.xml文件中对于intent-filter可以通过android:priority = “1000”这个属性设置最高优先级，1000是最高值，如果数字越小则优先级越低，同时适用于广播。</p><p>三、提升service进程优先级</p><p>Android中的进程是托管的，当系统进程空间紧张的时候，会依照优先级自动进行进程的回收。Android将进程分为6个等级,它们按优先级顺序由高到低依次是:</p><ol><li>前台进程( FOREGROUND_APP)</li><li>可视进程(VISIBLE_APP )</li><li>次要服务进程(SECONDARY_SERVER )</li><li>后台进程 (HIDDEN_APP)</li><li>内容供应节点(CONTENT_PROVIDER)</li><li>空进程(EMPTY_APP)</li></ol><p>当service运行在低内存的环境时，将会kill掉一些存在的进程。因此进程的优先级将会很重要，可以使用startForeground 将service放到前台状态。这样在低内存时被kill的几率会低一些。</p><p>四、onDestroy方法里重启service</p><p>service +broadcast  方式，就是当service走ondestory的时候，发送一个自定义的广播，当收到广播的时候，重新启动service；</p><p>五、Application加上Persistent属性</p><p>六、监听系统广播判断Service状态</p><p>通过系统的一些广播，比如：手机重启、界面唤醒、应用状态改变等等监听并捕获到，然后判断我们的Service是否还存活，别忘记加权限啊。</p><h4 id="Requestlayout-onlayout-onDraw-DrawChild区别与联系-猎豹"><a href="#Requestlayout-onlayout-onDraw-DrawChild区别与联系-猎豹" class="headerlink" title="Requestlayout,onlayout,onDraw,DrawChild区别与联系-猎豹"></a>Requestlayout,onlayout,onDraw,DrawChild区别与联系-猎豹</h4><p>requestLayout()方法 ：会导致调用measure()过程 和 layout()过程 。<br>将会根据标志位判断是否需要ondraw</p><p>onLayout()方法(如果该View是ViewGroup对象，需要实现该方法，对每个子视图进行布局)</p><p>调用onDraw()方法绘制视图本身   (每个View都需要重载该方法，ViewGroup不需要实现该方法)</p><p>drawChild()去重新回调每个子视图的draw()方法</p><h4 id="invalidate-和postInvalidate-的区别及使用-百度"><a href="#invalidate-和postInvalidate-的区别及使用-百度" class="headerlink" title="invalidate()和postInvalidate()的区别及使用-百度"></a>invalidate()和postInvalidate()的区别及使用-百度</h4><p><a href="http://blog.csdn.net/mars2639/article/details/6650876" target="_blank" rel="noopener">http://blog.csdn.net/mars2639/article/details/6650876</a></p><h4 id="Android动画框架实现原理"><a href="#Android动画框架实现原理" class="headerlink" title="Android动画框架实现原理"></a>Android动画框架实现原理</h4><p>Animation框架定义了透明度，旋转，缩放和位移几种常见的动画，而且控制的是整个View，实现原理是每次绘制视图时View所在的ViewGroup中的drawChild函数获取该View的Animation的Transformation值，然后调用canvas.concat(transformToApply.getMatrix())，通过矩阵运算完成动画帧，如果动画没有完成，继续调用invalidate()函数，启动下次绘制来驱动动画，动画过程中的帧之间间隙时间是绘制函数所消耗的时间，可能会导致动画消耗比较多的CPU资源，最重要的是，动画改变的只是显示，并不能相应事件。</p><h4 id="Android为每个应用程序分配的内存大小是多少-美团"><a href="#Android为每个应用程序分配的内存大小是多少-美团" class="headerlink" title="Android为每个应用程序分配的内存大小是多少-美团"></a>Android为每个应用程序分配的内存大小是多少-美团</h4><p>android程序内存一般限制在16M，也有的是24M</p><h4 id="View刷新机制-百度-美团"><a href="#View刷新机制-百度-美团" class="headerlink" title="View刷新机制-百度-美团"></a>View刷新机制-百度-美团</h4><p>由ViewRoot对象的performTraversals()方法调用draw()方法发起绘制该View树，值得注意的是每次发起绘图时，并不会重新绘制每个View树的视图，而只会重新绘制那些“需要重绘”的视图，View类内部变量包含了一个标志位DRAWN，当该视图需要重绘时，就会为该View添加该标志位。</p><p>调用流程 ：</p><p>mView.draw()开始绘制，draw()方法实现的功能如下：</p><ol><li>绘制该View的背景</li><li>为显示渐变框做一些准备操作(见5，大多数情况下，不需要改渐变框)          </li><li>调用onDraw()方法绘制视图本身   (每个View都需要重载该方法，ViewGroup不需要实现该方法)</li><li>调用dispatchDraw ()方法绘制子视图(如果该View类型不为ViewGroup，即不包含子视图，不需要重载该方法)值得说明的是，ViewGroup类已经为我们重写了dispatchDraw ()的功能实现，应用程序一般不需要重写该方法，但可以重载父类函数实现具体的功能。</li></ol><h4 id="LinearLayout和RelativeLayout性能对比-百度"><a href="#LinearLayout和RelativeLayout性能对比-百度" class="headerlink" title="LinearLayout和RelativeLayout性能对比-百度"></a>LinearLayout和RelativeLayout性能对比-百度</h4><ol><li>RelativeLayout会让子View调用2次onMeasure，LinearLayout 在有weight时，也会调用子View2次onMeasure</li><li>RelativeLayout的子View如果高度和RelativeLayout不同，则会引发效率问题，当子View很复杂时，这个问题会更加严重。如果可以，尽量使用padding代替margin。</li><li>在不影响层级深度的情况下,使用LinearLayout和FrameLayout而不是RelativeLayout。</li></ol><p>最后再思考一下文章开头那个矛盾的问题，为什么Google给开发者默认新建了个RelativeLayout，而自己却在DecorView中用了个LinearLayout。因为DecorView的层级深度是已知而且固定的，上面一个标题栏，下面一个内容栏。采用RelativeLayout并不会降低层级深度，所以此时在根节点上用LinearLayout是效率最高的。而之所以给开发者默认新建了个RelativeLayout是希望开发者能采用尽量少的View层级来表达布局以实现性能最优，因为复杂的View嵌套对性能的影响会更大一些。</p><h4 id="优化自定义view百度-乐视-小米"><a href="#优化自定义view百度-乐视-小米" class="headerlink" title="优化自定义view百度-乐视-小米"></a>优化自定义view百度-乐视-小米</h4><p>为了加速你的view，对于频繁调用的方法，需要尽量减少不必要的代码。先从onDraw开始，需要特别注意不应该在这里做内存分配的事情，因为它会导致GC，从而导致卡顿。在初始化或者动画间隙期间做分配内存的动作。不要在动画正在执行的时候做内存分配的事情。</p><p>你还需要尽可能的减少onDraw被调用的次数，大多数时候导致onDraw都是因为调用了invalidate().因此请尽量减少调用invaildate()的次数。如果可能的话，尽量调用含有4个参数的invalidate()方法而不是没有参数的invalidate()。没有参数的invalidate会强制重绘整个view。</p><p>另外一个非常耗时的操作是请求layout。任何时候执行requestLayout()，会使得Android UI系统去遍历整个View的层级来计算出每一个view的大小。如果找到有冲突的值，它会需要重新计算好几次。另外需要尽量保持View的层级是扁平化的，这样对提高效率很有帮助。</p><p>如果你有一个复杂的UI，你应该考虑写一个自定义的ViewGroup来执行他的layout操作。与内置的view不同，自定义的view可以使得程序仅仅测量这一部分，这避免了遍历整个view的层级结构来计算大小。这个PieChart 例子展示了如何继承ViewGroup作为自定义view的一部分。PieChart 有子views，但是它从来不测量它们。而是根据他自身的layout法则，直接设置它们的大小。</p><h4 id="ContentProvider-乐视"><a href="#ContentProvider-乐视" class="headerlink" title="ContentProvider-乐视"></a>ContentProvider-乐视</h4><p><a href="http://blog.csdn.net/coder_pig/article/details/47858489" target="_blank" rel="noopener">http://blog.csdn.net/coder_pig/article/details/47858489</a></p><h4 id="Fragment生命周期"><a href="#Fragment生命周期" class="headerlink" title="Fragment生命周期"></a>Fragment生命周期</h4><h4 id="volley解析-美团-乐视"><a href="#volley解析-美团-乐视" class="headerlink" title="volley解析-美团-乐视"></a>volley解析-美团-乐视</h4><p><a href="http://a.codekk.com/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener">http://a.codekk.com/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90</a></p><h4 id="Glide源码解析"><a href="#Glide源码解析" class="headerlink" title="Glide源码解析"></a>Glide源码解析</h4><p><a href="http://www.lightskystreet.com/2015/10/12/glide_source_analysis/" target="_blank" rel="noopener">http://www.lightskystreet.com/2015/10/12/glide_source_analysis/</a><br><a href="http://frodoking.github.io/2015/10/10/android-glide/" target="_blank" rel="noopener">http://frodoking.github.io/2015/10/10/android-glide/</a></p><h4 id="Android设计模式"><a href="#Android设计模式" class="headerlink" title="Android设计模式"></a>Android设计模式</h4><p><a href="http://blog.csdn.net/bboyfeiyu/article/details/44563871" target="_blank" rel="noopener">http://blog.csdn.net/bboyfeiyu/article/details/44563871</a></p><h4 id="架构设计-搜狐"><a href="#架构设计-搜狐" class="headerlink" title="架构设计-搜狐"></a>架构设计-搜狐</h4><p><a href="http://www.tianmaying.com/tutorial/AndroidMVC" target="_blank" rel="noopener">http://www.tianmaying.com/tutorial/AndroidMVC</a></p><h4 id="Android属性动画特性-乐视-小米"><a href="#Android属性动画特性-乐视-小米" class="headerlink" title="Android属性动画特性-乐视-小米"></a>Android属性动画特性-乐视-小米</h4><p>如果你的需求中只需要对View进行移动、缩放、旋转和淡入淡出操作，那么补间动画确实已经足够健全了。但是很显然，这些功能是不足以覆盖所有的场景的，一旦我们的需求超出了移动、缩放、旋转和淡入淡出这四种对View的操作，那么补间动画就不能再帮我们忙了，也就是说它在功能和可扩展方面都有相当大的局限性，那么下面我们就来看看补间动画所不能胜任的场景。</p><p>注意上面我在介绍补间动画的时候都有使用“对View进行操作”这样的描述，没错，补间动画是只能够作用在View上的。也就是说，我们可以对一个Button、TextView、甚至是LinearLayout、或者其它任何继承自View的组件进行动画操作，但是如果我们想要对一个非View的对象进行动画操作，抱歉，补间动画就帮不上忙了。可能有的朋友会感到不能理解，我怎么会需要对一个非View的对象进行动画操作呢？这里我举一个简单的例子，比如说我们有一个自定义的View，在这个View当中有一个Point对象用于管理坐标，然后在onDraw()方法当中就是根据这个Point对象的坐标值来进行绘制的。也就是说，如果我们可以对Point对象进行动画操作，那么整个自定义View的动画效果就有了。显然，补间动画是不具备这个功能的，这是它的第一个缺陷。</p><p>然后补间动画还有一个缺陷，就是它只能够实现移动、缩放、旋转和淡入淡出这四种动画操作，那如果我们希望可以对View的背景色进行动态地改变呢？很遗憾，我们只能靠自己去实现了。说白了，之前的补间动画机制就是使用硬编码的方式来完成的，功能限定死就是这些，基本上没有任何扩展性可言。</p><p>最后，补间动画还有一个致命的缺陷，就是它只是改变了View的显示效果而已，而不会真正去改变View的属性。什么意思呢？比如说，现在屏幕的左上角有一个按钮，然后我们通过补间动画将它移动到了屏幕的右下角，现在你可以去尝试点击一下这个按钮，点击事件是绝对不会触发的，因为实际上这个按钮还是停留在屏幕的左上角，只不过补间动画将这个按钮绘制到了屏幕的右下角而已。</p><h3 id="专题"><a href="#专题" class="headerlink" title="专题"></a>专题</h3><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h4 id="Android性能优化典范-第1季"><a href="#Android性能优化典范-第1季" class="headerlink" title="Android性能优化典范 - 第1季"></a><a href="http://hukai.me/android-performance-patterns/" target="_blank" rel="noopener">Android性能优化典范 - 第1季</a></h4><ol><li><strong>Render Performance</strong> Android系统每隔16ms发出VSYNC信号，触发对UI进行渲染，如果每次渲染都成功，这样就能够达到流畅的画面所需要的60fps，为了能够实现60fps，这意味着程序的大多数操作都必须在16ms内完成。我们可以通过一些工具来定位问题，比如可以使用HierarchyViewer来查找Activity中的布局是否过于复杂，也可以使用手机设置里面的开发者选项，打开Show GPU Overdraw等选项进行观察。你还可以使用TraceView来观察CPU的执行情况，更加快捷的找到性能瓶颈。</li><li><strong>Understanding Overdraw</strong> Overdraw(过度绘制)描述的是屏幕上的某个像素在同一帧的时间内被绘制了多次。在多层次的UI结构里面，如果不可见的UI也在做绘制的操作，这就会导致某些像素区域被绘制了多次。这就浪费大量的CPU以及GPU资源。Overdraw有时候是因为你的UI布局存在大量重叠的部分，还有的时候是因为非必须的重叠背景。例如某个Activity有一个背景，然后里面的Layout又有自己的背景，同时子View又分别有自己的背景。仅仅是通过移除非必须的背景图片，这就能够减少大量的红色Overdraw区域，增加蓝色区域的占比。这一措施能够显著提升程序性能。</li><li><strong>Understanding VSYNC</strong> Refresh Rate：代表了屏幕在一秒内刷新屏幕的次数，这取决于硬件的固定参数，例如60Hz。Frame Rate：代表了GPU在一秒内绘制操作的帧数，例如30fps，60fps。通常来说，帧率超过刷新频率只是一种理想的状况，在超过60fps的情况下，GPU所产生的帧数据会因为等待VSYNC的刷新信息而被Hold住，这样能够保持每次刷新都有实际的新的数据可以显示。但是我们遇到更多的情况是帧率小于刷新频率。</li><li><strong>Tool:Profile GPU Rendering</strong> 性能问题如此的麻烦，幸好我们可以有工具来进行调试。打开手机里面的开发者选项，选择Profile GPU Rendering，选中On screen as bars的选项。</li><li><strong>Why 60fps?</strong> 我们通常都会提到60fps与16ms，可是知道为何会是以程序是否达到60fps来作为App性能的衡量标准吗？这是因为人眼与大脑之间的协作无法感知超过60fps的画面更新。开发app的性能目标就是保持60fps，这意味着每一帧你只有16ms=1000/60的时间来处理所有的任务。</li><li><strong>Android, UI and the GPU</strong> 在Android里面那些由主题所提供的资源，例如Bitmaps，Drawables都是一起打包到统一的Texture纹理当中，然后再传递到GPU里面，这意味着每次你需要使用这些资源的时候，都是直接从纹理里面进行获取渲染的。当然随着UI组件的越来越丰富，有了更多演变的形态。例如显示图片的时候，需要先经过CPU的计算加载到内存中，然后传递给GPU进行渲染。文字的显示更加复杂，需要先经过CPU换算成纹理，然后再交给GPU进行渲染，回到CPU绘制单个字符的时候，再重新引用经过GPU渲染的内容。动画则是一个更加复杂的操作流程。为了能够使得App流畅，我们需要在每一帧16ms以内处理完所有的CPU与GPU计算，绘制，渲染等等操作。</li><li><strong>Invalidations, Layouts, and Performance</strong> 任何时候View中的绘制内容发生变化时，都会重新执行创建DisplayList，渲染DisplayList，更新到屏幕上等一系列操作。这个流程的表现性能取决于你的View的复杂程度，View的状态变化以及渲染管道的执行性能。举个例子，假设某个Button的大小需要增大到目前的两倍，在增大Button大小之前，需要通过父View重新计算并摆放其他子View的位置。修改View的大小会触发整个HierarcyView的重新计算大小的操作。如果是修改View的位置则会触发HierarchView重新计算其他View的位置。如果布局很复杂，这就会很容易导致严重的性能问题。我们需要尽量减少Overdraw。</li><li><strong>Overdraw, Cliprect, QuickReject</strong> 我们可以通过canvas.clipRect()来帮助系统识别那些可见的区域。这个方法可以指定一块矩形区域，只有在这个区域内才会被绘制，其他的区域会被忽视。这个API可以很好的帮助那些有多组重叠组件的自定义View来控制显示的区域。同时clipRect方法还可以帮助节约CPU与GPU资源，在clipRect区域之外的绘制指令都不会被执行，那些部分内容在矩形区域内的组件，仍然会得到绘制。</li><li><strong>Memory Churn and performance</strong> 执行GC操作的时候，所有线程的任何操作都会需要暂停，等待GC操作完成之后，其他操作才能够继续运行。Memory Churn内存抖动，内存抖动是因为大量的对象被创建又在短时间内马上被释放。瞬间产生大量的对象会严重占用Young Generation的内存区域，当达到阀值，剩余空间不够的时候，也会触发GC。即使每次分配的对象占用了很少的内存，但是他们叠加在一起会增加Heap的压力，从而触发更多其他类型的GC。这个操作有可能会影响到帧率，并使得用户感知到性能问题。</li><li><strong>Garbage Collection in Android</strong> 原始JVM中的GC机制在Android中得到了很大程度上的优化。Android里面是一个三级Generation的内存模型，最近分配的对象会存放在Young Generation区域，当这个对象在这个区域停留的时间达到一定程度，它会被移动到Old Generation，最后到Permanent Generation区域。如果不小心在最小的for循环单元里面执行了创建对象的操作，这将很容易引起GC并导致性能问题。通过Memory Monitor我们可以查看到内存的占用情况，每一次瞬间的内存降低都是因为此时发生了GC操作，如果在短时间内发生大量的内存上涨与降低的事件，这说明很有可能这里有性能问题。我们还可以通过Heap and Allocation Tracker工具来查看此时内存中分配的到底有哪些对象。</li><li><strong>Performance Cost of Memory Leaks</strong> 内存泄漏指的是那些程序不再使用的对象无法被GC识别，这样就导致这个对象一直留在内存当中，占用了宝贵的内存空间。显然，这还使得每级Generation的内存区域可用空间变小，GC就会更容易被触发，从而引起性能问题。</li><li><strong>Memory Performance</strong> 通常来说，Android对GC做了大量的优化操作，虽然执行GC操作的时候会暂停其他任务，可是大多数情况下，GC操作还是相对很安静并且高效的。但是如果我们对内存的使用不恰当，导致GC频繁执行，这样就会引起不小的性能问题。</li><li><strong>Tool - Memory Monitor</strong> Android Studio中的Memory Monitor可以很好的帮助我们查看程序的内存使用情况。</li><li><strong>Battery Performance</strong> 我们应该尽量减少唤醒屏幕的次数与持续的时间，使用WakeLock来处理唤醒的问题，能够正确执行唤醒操作并根据设定及时关闭操作进入睡眠状态。某些非必须马上执行的操作，例如上传歌曲，图片处理等，可以等到设备处于充电状态或者电量充足的时候才进行。触发网络请求的操作，每次都会保持无线信号持续一段时间，我们可以把零散的网络请求打包进行一次操作，避免过多的无线信号引起的电量消耗。关于网络请求引起无线信号的电量消耗</li><li><strong>Understanding Battery Drain on Android</strong> 使用WakeLock或者JobScheduler唤醒设备处理定时的任务之后，一定要及时让设备回到初始状态。每次唤醒无线信号进行数据传递，都会消耗很多电量，它比WiFi等操作更加的耗电</li><li><strong>Battery Drain and WakeLocks</strong> 这正是JobScheduler API所做的事情。它会根据当前的情况与任务，组合出理想的唤醒时间，例如等到正在充电或者连接到WiFi的时候，或者集中任务一起执行。我们可以通过这个API实现很多免费的调度算法。</li></ol><h4 id="Android性能优化典范-第2季"><a href="#Android性能优化典范-第2季" class="headerlink" title="Android性能优化典范 - 第2季"></a><a href="http://hukai.me/android-performance-patterns-season-2/" target="_blank" rel="noopener">Android性能优化典范 - 第2季</a></h4><ol><li><strong>Battery Drain and Networking</strong> 我们可以有针对性的把请求行为捆绑起来，延迟到某个时刻统一发起请求。这部分主要会涉及到Prefetch(预取)与Compressed(压缩)这两个技术。对于Prefetch的使用，我们需要预先判断用户在此次操作之后，后续零散的请求是否很有可能会马上被触发，可以把后面5分钟有可能会使用到的零散请求都一次集中执行完毕。对于Compressed的使用，在上传与下载数据之前，使用CPU对数据进行压缩与解压，可以很大程度上减少网络传输的时间。</li><li><strong>Wear &amp; Sensors</strong> 首先我们需要尽量使用Android平台提供的既有运动数据，而不是自己去实现监听采集数据，因为大多数Android Watch自身记录Sensor数据的行为是有经过做电量优化的。其次在Activity不需要监听某些Sensor数据的时候需要尽快释放监听注册。还有我们需要尽量控制更新的频率，仅仅在需要刷新显示数据的时候才触发获取最新数据的操作。另外我们可以针对Sensor的数据做批量处理，待数据累积一定次数或者某个程度的时候才更新到UI上。最后当Watch与Phone连接起来的时候，可以把某些复杂操作的事情交给Phone来执行，Watch只需要等待返回的结果。</li><li><strong>Smooth Android Wear Animation</strong> 在Android里面一个相对操作比较繁重的事情是对Bitmap进行旋转，缩放，裁剪等等。例如在一个圆形的钟表图上，我们把时钟的指针抠出来当做单独的图片进行旋转会比旋转一张完整的圆形图的所形成的帧率要高56%。</li><li><strong>Android Wear Data Batching</strong> 仅仅在真正需要刷新界面的时候才发出请求，尽量把计算复杂操作的任务交给Phone来处理，Phone仅仅在数据发生变化的时候才通知到Wear，把零碎的数据请求捆绑一起再进行操作。</li><li><strong>Object Pools</strong> 使用对象池技术有很多好处，它可以避免内存抖动，提升性能，但是在使用的时候有一些内容是需要特别注意的。通常情况下，初始化的对象池里面都是空白的，当使用某个对象的时候先去对象池查询是否存在，如果不存在则创建这个对象然后加入对象池，但是我们也可以在程序刚启动的时候就事先为对象池填充一些即将要使用到的数据，这样可以在需要使用到这些对象的时候提供更快的首次加载速度，这种行为就叫做预分配。使用对象池也有不好的一面，程序员需要手动管理这些对象的分配与释放，所以我们需要慎重地使用这项技术，避免发生对象的内存泄漏。为了确保所有的对象能够正确被释放，我们需要保证加入对象池的对象和其他外部对象没有互相引用的关系。</li><li><strong>To Index or Iterate?</strong> for index的方式有更好的效率，但是因为不同平台编译器优化各有差异，我们最好还是针对实际的方法做一下简单的测量比较好，拿到数据之后，再选择效率最高的那个方式。</li><li><strong>The Magic of LRU Cache</strong> 使用LRU Cache能够显著提升应用的性能，可是也需要注意LRU Cache中被淘汰对象的回收，否者会引起严重的内存泄露。</li><li><strong>Using LINT for Performance Tips</strong> Lint已经集成到Android Studio中了，我们可以手动去触发这个工具，点击工具栏的Analysis -&gt; Inspect Code，触发之后，Lint会开始工作，并把结果输出到底部的工具栏，我们可以逐个查看原因并根据指示做相应的优化修改。</li><li><strong>Hidden Cost of Transparency</strong> 通常来说，对于不透明的View，显示它只需要渲染一次即可，可是如果这个View设置了alpha值，会至少需要渲染两次。</li><li><strong>Avoiding Allocations in onDraw()</strong> 首先onDraw()方法是执行在UI线程的，在UI线程尽量避免做任何可能影响到性能的操作。虽然分配内存的操作并不需要花费太多系统资源，但是这并不意味着是免费无代价的。设备有一定的刷新频率，导致View的onDraw方法会被频繁的调用，如果onDraw方法效率低下，在频繁刷新累积的效应下，效率低的问题会被扩大，然后会对性能有严重的影响。</li><li><strong>Tool: Strict Mode</strong> Android提供了一个叫做Strict Mode的工具，我们可以通过手机设置里面的开发者选项，打开Strict Mode选项，如果程序存在潜在的隐患，屏幕就会闪现红色。我们也可以通过StrictMode API在代码层面做细化的跟踪，可以设置StrictMode监听那些潜在问题，出现问题时如何提醒开发者，可以对屏幕闪红色，也可以输出错误日志。</li><li><strong>Custom Views and Performance</strong> Useless calls to onDraw()：我们知道调用View.invalidate()会触发View的重绘，有两个原则需要遵守，第1个是仅仅在View的内容发生改变的时候才去触发invalidate方法，第2个是尽量使用ClipRect等方法来提高绘制的性能。Useless pixels：减少绘制时不必要的绘制元素，对于那些不可见的元素，我们需要尽量避免重绘。Wasted CPU cycles：对于不在屏幕上的元素，可以使用Canvas.quickReject把他们给剔除，避免浪费CPU资源。另外尽量使用GPU来进行UI的渲染，这样能够极大的提高程序的整体表现性能。</li><li><strong>Batching Background Work Until Later</strong> </li><li>AlarmManager 使用AlarmManager设置定时任务，可以选择精确的间隔时间，也可以选择非精确时间作为参数。除非程序有很强烈的需要使用精确的定时唤醒，否者一定要避免使用他，我们应该尽量使用非精确的方式。2.SyncAdapter 我们可以使用SyncAdapter为应用添加设置账户，这样在手机设置的账户列表里面可以找到我们的应用。这种方式功能更多，但是实现起来比较复杂。我们可以从这里看到官方的培训课程：<a href="http://developer.android.com/training/sync-adapters/index.html" target="_blank" rel="noopener">http://developer.android.com/training/sync-adapters/index.html</a> 3.JobSchedulor 这是最简单高效的方法，我们可以设置任务延迟的间隔，执行条件，还可以增加重试机制。</li><li><strong>Smaller Pixel Formats</strong> Android的Heap空间是不会自动做兼容压缩的，意思就是如果Heap空间中的图片被收回之后，这块区域并不会和其他已经回收过的区域做重新排序合并处理，那么当一个更大的图片需要放到heap之前，很可能找不到那么大的连续空闲区域，那么就会触发GC，使得heap腾出一块足以放下这张图片的空闲区域，如果无法腾出，就会发生OOM。</li><li><strong>Smaller PNG Files</strong> 尽量减少PNG图片的大小是Android里面很重要的一条规范。相比起JPEG，PNG能够提供更加清晰无损的图片，但是PNG格式的图片会更大，占用更多的磁盘空间。到底是使用PNG还是JPEG，需要设计师仔细衡量，对于那些使用JPEG就可以达到视觉效果的，可以考虑采用JPEG即可。</li><li><strong>Pre-scaling Bitmaps</strong> 对bitmap做缩放，这也是Android里面最遇到的问题。对bitmap做缩放的意义很明显，提示显示性能，避免分配不必要的内存。Android提供了现成的bitmap缩放的API，叫做createScaledBitmap()</li><li><strong>Re-using Bitmaps</strong> 使用inBitmap属性可以告知Bitmap解码器去尝试使用已经存在的内存区域，新解码的bitmap会尝试去使用之前那张bitmap在heap中所占据的pixel data内存区域，而不是去问内存重新申请一块区域来存放bitmap。利用这种特性，即使是上千张的图片，也只会仅仅只需要占用屏幕所能够显示的图片数量的内存大小。</li><li><strong>The Performance Lifecycle</strong> Gather：收集数据，Insight：分析数据，Action：解决问题</li></ol><h4 id="Android性能优化典范-第3季"><a href="#Android性能优化典范-第3季" class="headerlink" title="Android性能优化典范 - 第3季"></a><a href="http://hukai.me/android-performance-patterns-season-3/" target="_blank" rel="noopener">Android性能优化典范 - 第3季</a></h4><ol><li><strong>Fun with ArrayMaps</strong> 为了解决HashMap更占内存的弊端，Android提供了内存效率更高的ArrayMap。它内部使用两个数组进行工作，其中一个数组记录key hash过后的顺序列表，另外一个数组按key的顺序记录Key-Value值</li><li><strong>Beware Autoboxing</strong> 有时候性能问题也可能是因为那些不起眼的小细节引起的，例如在代码中不经意的“自动装箱”。我们知道基础数据类型的大小：boolean(8 bits), int(32 bits), float(32 bits)，long(64 bits)，为了能够让这些基础数据类型在大多数Java容器中运作，会需要做一个autoboxing的操作，转换成Boolean，Integer，Float等对象</li><li><strong>SparseArray Family Ties</strong> 为了避免HashMap的autoboxing行为，Android系统提供了SparseBoolMap，SparseIntMap，SparseLongMap，LongSparseMap等容器。</li><li><strong>The price of ENUMs</strong> Android官方强烈建议不要在Android程序里面使用到enum。</li><li><strong>Trimming and Sharing Memory</strong> Android系统提供了一些回调来通知应用的内存使用情况，通常来说，当所有的background应用都被kill掉的时候，forground应用会收到onLowMemory()的回调。在这种情况下，需要尽快释放当前应用的非必须内存资源，从而确保系统能够稳定继续运行。Android系统还提供了onTrimMemory()的回调，当系统内存达到某些条件的时候，所有正在运行的应用都会收到这个回调</li><li><strong>DO NOT LEAK VIEWS</strong> 避免使用异步回调,避免使用Static对象,避免把View添加到没有清除机制的容器里面</li><li><strong>Location &amp; Battery Drain</strong> 其中存在的一个优化点是，我们可以通过判断返回的位置信息是否相同，从而决定设置下次的更新间隔是否增加一倍，通过这种方式可以减少电量的消耗</li><li><strong>Double Layout Taxation</strong> 布局中的任何一个View一旦发生一些属性变化，都可能引起很大的连锁反应。例如某个button的大小突然增加一倍，有可能会导致兄弟视图的位置变化，也有可能导致父视图的大小发生改变。当大量的layout()操作被频繁调用执行的时候，就很可能引起丢帧的现象。</li><li><strong>Network Performance 101</strong> 减少移动网络被激活的时间与次数,压缩传输数据</li><li><strong>Effective Network Batching</strong> 发起网络请求与接收返回数据都是比较耗电的，在网络硬件模块被激活之后，会继续保持几十秒的电量消耗，直到没有新的网络操作行为之后，才会进入休眠状态。前面一个段落介绍了使用Batching的技术来捆绑网络请求，从而达到减少网络请求的频率。那么如何实现Batching技术呢？通常来说，我们可以会把那些发出的网络请求，先暂存到一个PendingQueue里面，等到条件合适的时候再触发Queue里面的网络请求。</li><li><strong>Optimizing Network Request Frequencies</strong> 前面的段落已经提到了应该减少网络请求的频率，这是为了减少电量的消耗。我们可以使用Batching，Prefetching的技术来避免频繁的网络请求。Google提供了GCMNetworkManager来帮助开发者实现那些功能，通过提供的API，我们可以选择在接入WiFi，开始充电，等待移动网络被激活等条件下再次激活网络请求。</li><li><strong>Effective Prefetching</strong> 类似上面的情况会频繁触发网络请求，但是如果我们能够预先请求后续可能会使用到网络资源，避免频繁的触发网络请求，这样就能够显著的减少电量的消耗。可是预先获取多少数据量是很值得考量的，因为如果预取数据量偏少，就起不到减少频繁请求的作用，可是如果预取数据过多，就会造成资源的浪费。</li></ol><h4 id="Android性能优化典范-第4季"><a href="#Android性能优化典范-第4季" class="headerlink" title="Android性能优化典范 - 第4季"></a><a href="http://hukai.me/android-performance-patterns-season-4/" target="_blank" rel="noopener">Android性能优化典范 - 第4季</a></h4><ol><li><strong>Cachematters for networking</strong> 想要使得Android系统上的网络访问操作更加的高效就必须做好网络数据的缓存。这是提高网络访问性能最基础的步骤之一。从手机的缓存中直接读取数据肯定比从网络上获取数据要更加的便捷高效，特别是对于那些会被频繁访问到的数据，需要把这些数据缓存到设备上，以便更加快速的进行访问。</li><li><strong>Optimizing Network Request Frequencies</strong> 首先我们要对网络行为进行分类，区分需要立即更新数据的行为和其他可以进行延迟的更新行为，为不同的场景进行差异化处理。其次要避免客户端对服务器的轮询操作，这样会浪费很多的电量与带宽流量。解决这个问题，我们可以使用Google Cloud Message来对更新的数据进行推送。然后在某些必须做同步的场景下，需要避免使用固定的间隔频率来进行更新操作，我们应该在返回的数据无更新的时候，使用双倍的间隔时间来进行下一次同步。最后更进一步，我们还可以通过判断当前设备的状态来决定同步的频率，例如判断设备处于休眠，运动等不同的状态设计各自不同时间间隔的同步频率。</li><li><strong>Effective Prefetching</strong> 到底预取多少才比较合适呢？一个比较普适的规则是，在3G网络下可以预取1-5Mb的数据量，或者是按照提前预期后续1-2分钟的数据作为基线标准。在实际的操作当中，我们还需要考虑当前的网络速度来决定预取的数据量，例如在同样的时间下，4G网络可以获取到12张图片的数据，而2G网络则只能拿到3张图片的数据。所以，我们还需要把当前的网络环境情况添加到设计预取数据量的策略当中去。判断当前设备的状态与网络情况，可以使用前面提到过的GCMNetworkManager。</li><li><strong>Adapting to Latency</strong> 一个典型的网络操作行为，通常包含以下几个步骤：首先手机端发起网络请求，到达网络服务运营商的基站，再转移到服务提供者的服务器上，经过解码之后，接着访问本地的存储数据库，获取到数据之后，进行编码，最后按照原来传递的路径逐层返回。常来说，我们可以把网络请求延迟划分为三档：例如把网络延迟小于60ms的划分为GOOD，大于220ms的划分为BAD，介于两者之间的划分为OK（这里的60ms，220ms会需要根据不同的场景提前进行预算推测）。</li><li><strong>Minimizing Asset Payload</strong> 为了能够减小网络传输的数据量，我们需要对传输的数据做压缩的处理，这样能够提高网络操作的性能。首先需要做的是减少图片的大小，其次需要做的是减少序列化数据的大小。</li><li><strong>Service Performance Patterns</strong> Service是Android程序里面最常用的基础组件之一，但是使用Service很容易引起电量的过度消耗以及系统资源的未及时释放。避免错误的使用Service，例如我们不应该使用Service来监听某些事件的变化，不应该搞一个Service在后台对服务器不断的进行轮询(应该使用Google Cloud Messaging)。如果已经事先知道Service里面的任务应该执行在后台线程(非默认的主线程)的时候，我们应该使用IntentService或者结合HanderThread，AsycnTask Loader实现的Service。</li><li><strong>Removing unused code</strong> Android为我们提供了Proguard的工具来帮助应用程序对代码进行瘦身，优化，混淆的处理。它会帮助移除那些没有使用到的代码，还可以对类名，方法名进行混淆处理以避免程序被反编译。</li><li><strong>Removing unused resources</strong> 所幸的是，我们可以使用Gradle来帮助我们分析代码，分析引用的资源，对于那些没有被引用到的资源，会在编译阶段被排除在APK安装包之外，要实现这个功能，对我们来说仅仅只需要在build.gradle文件中配置shrinkResource为true就好了</li><li><strong>Perf Theory: Caching</strong> 当我们讨论性能优化的时候，缓存是最常见最有效的策略之一。无论是为了提高CPU的计算速度还是提高数据的访问速度，在绝大多数的场景下，我们都会使用到缓存。</li><li><strong>Perf Theory: Approximation(近似法)</strong> 例如使用一张比较接近实际大小的图片来替代原图，换取更快的加载速度。所以对于那些对计算结果要求不需要十分精确的场景，我们可以使用近似法则来提高程序的性能。</li><li><strong>Perf Theory: Culling(遴选，挑选)</strong> 一个提高性能的方法是逐步对数据进行过滤筛选，减小搜索的数据集，以此提高程序的执行性能。例如我们需要搜索到居住在某个地方，年龄是多少，符合某些特定条件的候选人，就可以通过逐层过滤筛选的方式来提高后续搜索的执行效率。</li><li><strong>Perf Theory: Threading</strong> 使用多线程并发处理任务，从某种程度上可以快速提高程序的执行性能。对于Android程序来说，主线程通常也成为UI线程，需要处理UI的渲染，响应用户的操作等等。</li><li><strong>Perf Theory: Batching</strong> 网络请求的批量执行是另外一个比较适合说明batching使用场景的例子，因为每次发起网络请求都相对来说比较耗时耗电，如果能够做到批量一起执行，可以大大的减少电量的消耗。</li><li><strong>Serialization performance</strong> 数据序列化的行为可能发生在数据传递过程中的任何阶段，例如网络传输，不同进程间数据传递，不同类之间的参数传递，把数据存储到磁盘上等等。通常情况下，我们会把那些需要序列化的类实现Serializable接口(如下图所示)，但是这种传统的做法效率不高，实施的过程会消耗更多的内存。但是我们如果使用GSON库来处理这个序列化的问题，不仅仅执行速度更快，内存的使用效率也更高。Android的XML布局文件会在编译的阶段被转换成更加复杂的格式，具备更加高效的执行性能与更高的内存使用效率。</li><li><strong>Smaller Serialized Data</strong> 数据呈现的顺序以及结构会对序列化之后的空间产生不小的影响。</li><li><strong>Caching UI data</strong> 缓存UI界面上的数据，可以采用方案有存储到文件系统，Preference，SQLite等等，做了缓存之后，这样就可以在请求数据返回结果之前，呈现给用户旧的数据，而不是使用正在加载的方式让用户什么数据都看不到，当然在请求网络最新数据的过程中，需要有正在刷新的提示。至于到底选择哪个方案来对数据进行缓存，就需要根据具体情况来做选择了。</li><li><strong>CPU Frequency Scaling</strong> 调节CPU的频率会执行的性能产生较大的影响，为了最大化的延长设备的续航时间，系统会动态调整CPU的频率，频率越高执行代码的速度自然就越快。我们可以使用Systrace工具来导出CPU的执行情况，以便帮助定位性能问题。</li></ol><h4 id="Android性能优化典范-第5季"><a href="#Android性能优化典范-第5季" class="headerlink" title="Android性能优化典范 - 第5季"></a><a href="http://hukai.me/android-performance-patterns-season-5/" target="_blank" rel="noopener">Android性能优化典范 - 第5季</a></h4><ol><li><strong>Threading Performance</strong> AsyncTask: 为UI线程与工作线程之间进行快速的切换提供一种简单便捷的机制。适用于当下立即需要启动，但是异步执行的生命周期短暂的使用场景。HandlerThread: 为某些回调方法或者等待某些任务的执行设置一个专属的线程，并提供线程任务的调度机制。ThreadPool: 把任务分解成不同的单元，分发到各个不同的线程上，进行同时并发处理。IntentService: 适合于执行由UI触发的后台Service任务，并可以把后台任务执行的情况通过一定的机制反馈给UI。</li><li><strong>Understanding Android Threading</strong> 通常来说，一个线程需要经历三个生命阶段：开始，执行，结束。线程会在任务执行完毕之后结束，那么为了确保线程的存活，我们会在执行阶段给线程赋予不同的任务，然后在里面添加退出的条件从而确保任务能够执行完毕后退出。</li><li><strong>Memory &amp; Threading</strong> 不要在任何非UI线程里面去持有UI对象的引用。系统为了确保所有的UI对象都只会被UI线程所进行创建，更新，销毁的操作，特地设计了对应的工作机制(当Activity被销毁的时候，由该Activity所触发的非UI线程都将无法对UI对象进行操作，否者就会抛出程序执行异常的错误)来防止UI对象被错误的使用。</li><li><strong>Good AsyncTask Hunting</strong> AsyncTask虽然提供了一种简单便捷的异步机制，但是我们还是很有必要特别关注到他的缺点，避免出现因为使用错误而导致的严重系统性能问题。</li><li><strong>Getting a HandlerThread</strong> HandlerThread比较合适处理那些在工作线程执行，需要花费时间偏长的任务。我们只需要把任务发送给HandlerThread，然后就只需要等待任务执行结束的时候通知返回到主线程就好了。另外很重要的一点是，一旦我们使用了HandlerThread，需要特别注意给HandlerThread设置不同的线程优先级，CPU会根据设置的不同线程优先级对所有的线程进行调度优化。</li><li><strong>Swimming in Threadpools</strong> 线程池适合用在把任务进行分解，并发进行执行的场景。通常来说，系统里面会针对不同的任务设置一个单独的守护线程用来专门处理这项任务。</li><li><strong>The Zen of IntentService</strong> 默认的Service是执行在主线程的，可是通常情况下，这很容易影响到程序的绘制性能(抢占了主线程的资源)。除了前面介绍过的AsyncTask与HandlerThread，我们还可以选择使用IntentService来实现异步操作。IntentService继承自普通Service同时又在内部创建了一个HandlerThread，在onHandlerIntent()的回调里面处理扔到IntentService的任务。所以IntentService就不仅仅具备了异步线程的特性，还同时保留了Service不受主页面生命周期影响的特点。</li><li><strong>Threading and Loaders</strong> 当启动工作线程的Activity被销毁的时候，我们应该做点什么呢？为了方便的控制工作线程的启动与结束，Android为我们引入了Loader来解决这个问题。我们知道Activity有可能因为用户的主动切换而频繁的被创建与销毁，也有可能是因为类似屏幕发生旋转等被动原因而销毁再重建。在Activity不停的创建与销毁的过程当中，很有可能因为工作线程持有Activity的View而导致内存泄漏(因为工作线程很可能持有View的强引用，另外工作线程的生命周期还无法保证和Activity的生命周期一致，这样就容易发生内存泄漏了)。除了可能引起内存泄漏之外，在Activity被销毁之后，工作线程还继续更新视图是没有意义的，因为此时视图已经不在界面上显示了。</li><li><strong>The Importance of Thread Priority</strong> 在Android系统里面，我们可以通过android.os.Process.setThreadPriority(int)设置线程的优先级，参数范围从-20到24，数值越小优先级越高。Android系统还为我们提供了以下的一些预设值，我们可以通过给不同的工作线程设置不同数值的优先级来达到更细粒度的控制。</li><li><strong>Profile GPU Rendering : M Update</strong> 从Android M系统开始，系统更新了GPU Profiling的工具来帮助我们定位UI的渲染性能问题。早期的CPU Profiling工具只能粗略的显示出Process，Execute，Update三大步骤的时间耗费情况。</li></ol><h4 id="官方性能优化系列教程"><a href="#官方性能优化系列教程" class="headerlink" title="官方性能优化系列教程"></a><a href="https://www.youtube.com/playlist?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE" target="_blank" rel="noopener">官方性能优化系列教程</a></h4><h3 id="架构分析"><a href="#架构分析" class="headerlink" title="架构分析"></a>架构分析</h3><p><a href="http://tech.meituan.com/android_mvvm.html" target="_blank" rel="noopener">MVVM</a></p><p><a href="https://code.tutsplus.com/series/how-to-adopt-model-view-presenter-on-android--cms-1012" target="_blank" rel="noopener">MVP</a></p><h3 id="阿里面试题"><a href="#阿里面试题" class="headerlink" title="阿里面试题"></a>阿里面试题</h3><h4 id="进程间通信方式"><a href="#进程间通信方式" class="headerlink" title="进程间通信方式"></a>进程间通信方式</h4><ol><li>通过Intent在Activity、Service或BroadcastReceiver间进行进程间通信，可通过Intent传递数据</li><li>AIDL方式</li><li>Messenger方式</li><li>利用ContentProvider</li><li>Socket方式</li><li>基于文件共享的方式</li></ol><h4 id="什么是协程"><a href="#什么是协程" class="headerlink" title="什么是协程"></a>什么是协程</h4><p>我们知道多个线程相对独立，有自己的上下文，切换受系统控制；而协程也相对独立，有自己的上下文，但是其切换由自己控制，由当前协程切换到其他协程由当前协程来控制。<br>￼</p><h4 id="内存泄露是怎么回事"><a href="#内存泄露是怎么回事" class="headerlink" title="内存泄露是怎么回事"></a>内存泄露是怎么回事</h4><p>由忘记释放分配的内存导致的</p><h4 id="程序计数器，引到了逻辑地址（虚地址）和物理地址及其映射关系"><a href="#程序计数器，引到了逻辑地址（虚地址）和物理地址及其映射关系" class="headerlink" title="程序计数器，引到了逻辑地址（虚地址）和物理地址及其映射关系"></a>程序计数器，引到了逻辑地址（虚地址）和物理地址及其映射关系</h4><p>虚拟机中的程序计数器是Java运行时数据区中的一小块内存区域，但是它的功能和通常的程序计数器是类似的，它指向虚拟机正在执行字节码指令的地址。具体点儿说，当虚拟机执行的方法不是native的时，程序计数器指向虚拟机正在执行字节码指令的地址；当虚拟机执行的方法是native的时，程序计数器中的值是未定义的。另外，程序计数器是线程私有的，也就是说，每一个线程都拥有仅属于自己的程序计数器。</p><h4 id="数组和链表的区别"><a href="#数组和链表的区别" class="headerlink" title="数组和链表的区别"></a>数组和链表的区别</h4><p>数组是将元素在内存中连续存放，由于每个元素占用内存相同，可以通过下标迅速访问数组中任何元素。但是如果要在数组中增加一个元素，需要移动大量元素，在内存中空出一个元素的空间，然后将要增加的元素放在其中。同样的道理，如果想删除一个元素，同样需要移动大量元素去填掉被移动的元素。如果应用需要快速访问数据，很少或不插入和删除元素，就应该用数组。</p><p>链表恰好相反，链表中的元素在内存中不是顺序存储的，而是通过存在元素中的指针联系到一起。比如：上一个元素有个指针指到下一个元素，以此类推，直到最后一个元素。如果要访问链表中一个元素，需要从第一个元素开始，一直找到需要的元素位置。但是增加和删除一个元素对于链表数据结构就非常简单了，只要修改元素中的指针就可以了。如果应用需要经常插入和删除元素你就需要用链表数据结构了。</p><h4 id="二叉树的深度优先遍历和广度优先遍历的具体实现"><a href="#二叉树的深度优先遍历和广度优先遍历的具体实现" class="headerlink" title="二叉树的深度优先遍历和广度优先遍历的具体实现"></a>二叉树的深度优先遍历和广度优先遍历的具体实现</h4><p><a href="http://www.i3geek.com/archives/794" target="_blank" rel="noopener">http://www.i3geek.com/archives/794</a></p><h4 id="堆的结构"><a href="#堆的结构" class="headerlink" title="堆的结构"></a>堆的结构</h4><p>年轻代（Young Generation）、年老代（Old Generation）和持久代（Permanent<br>Generation）。其中持久代主要存放的是Java类的类信息，与垃圾收集要收集的Java对象关系<br>不大。年轻代和年老代的划分是对垃 圾收集影响比较大的。</p><h4 id="bitmap对象的理解"><a href="#bitmap对象的理解" class="headerlink" title="bitmap对象的理解"></a>bitmap对象的理解</h4><p><a href="http://blog.csdn.net/angel1hao/article/details/51890938" target="_blank" rel="noopener">http://blog.csdn.net/angel1hao/article/details/51890938</a></p><h4 id="什么是深拷贝和浅拷"><a href="#什么是深拷贝和浅拷" class="headerlink" title="什么是深拷贝和浅拷"></a>什么是深拷贝和浅拷</h4><p>浅拷贝：使用一个已知实例对新创建实例的成员变量逐个赋值，这个方式被称为浅拷贝。<br>深拷贝：当一个类的拷贝构造方法，不仅要复制对象的所有非引用成员变量值，还要为引用类型的成员变量创建新的实例，并且初始化为形式参数实例值。这个方式称为深拷贝</p><h4 id="对象锁和类锁是否会互相影响"><a href="#对象锁和类锁是否会互相影响" class="headerlink" title="对象锁和类锁是否会互相影响"></a>对象锁和类锁是否会互相影响</h4><p>对象锁：Java的所有对象都含有1个互斥锁，这个锁由JVM自动获取和释放。线程进入synchronized方法的时候获取该对象的锁，当然如果已经有线程获取了这个对象的锁，那么当前线程会等待；synchronized方法正常返回或者抛异常而终止，JVM会自动释放对象锁。这里也体现了用synchronized来加锁的1个好处，方法抛异常的时候，锁仍然可以由JVM来自动释放。<br>类锁： 对象锁是用来控制实例方法之间的同步，类锁是用来控制静态方法（或静态变量互斥体）之间的同步。其实类锁只是一个概念上的东西，并不是真实存在的，它只是用来帮助我们理解锁定实例方法和静态方法的区别的。我们都知道，java类可能会有很多个对象，但是只有1个Class对象，也就是说类的不同实例之间共享该类的Class对象。Class对象其实也仅仅是1个java对象，只不过有点特殊而已。由于每个java对象都有1个互斥锁，而类的静态方法是需要Class对象。所以所谓的类锁，不过是Class对象的锁而已。获取类的Class对象有好几种，最简单的就是MyClass.class的方式。<br>类锁和对象锁不是同1个东西，一个是类的Class对象的锁，一个是类的实例的锁。也就是说：1个线程访问静态synchronized的时候，允许另一个线程访问对象的实例synchronized方法。反过来也是成立的，因为他们需要的锁是不同的。</p><h4 id="looper架构"><a href="#looper架构" class="headerlink" title="looper架构"></a>looper架构</h4><p><a href="http://wangkuiwu.github.io/2014/08/26/MessageQueue/" target="_blank" rel="noopener">http://wangkuiwu.github.io/2014/08/26/MessageQueue/</a></p><h4 id="自定义控件原理"><a href="#自定义控件原理" class="headerlink" title="自定义控件原理"></a>自定义控件原理</h4><p><a href="http://www.jianshu.com/p/988326f9c8a3" target="_blank" rel="noopener">http://www.jianshu.com/p/988326f9c8a3</a></p><h4 id="binder工作原理"><a href="#binder工作原理" class="headerlink" title="binder工作原理"></a>binder工作原理</h4><p>Binder是客户端和服务端进行通讯的媒介</p><h4 id="ActivityThread，Ams，Wms的工作原理"><a href="#ActivityThread，Ams，Wms的工作原理" class="headerlink" title="ActivityThread，Ams，Wms的工作原理"></a>ActivityThread，Ams，Wms的工作原理</h4><p>ActivityThread: 运行在应用进程的主线程上，响应 ActivityManangerService 启动、暂停Activity，广播接收等消息。<br>ams:统一调度各应用程序的Activity、内存管理、进程管理</p><h4 id="Java中final，finally，finalize的区别"><a href="#Java中final，finally，finalize的区别" class="headerlink" title="Java中final，finally，finalize的区别"></a>Java中final，finally，finalize的区别</h4><ul><li>final 用于声明属性,方法和类, 分别表示属性不可变, 方法不可覆盖, 类不可继承. </li><li>finally 是异常处理语句结构的一部分，表示总是执行. </li><li>finalize 是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等. JVM不保证此方法总被调用.</li></ul><h4 id="一个文件中有100万个整数，由空格分开，在程序中判断用户输入的整数是否在此文件中。说出最优的方法"><a href="#一个文件中有100万个整数，由空格分开，在程序中判断用户输入的整数是否在此文件中。说出最优的方法" class="headerlink" title="一个文件中有100万个整数，由空格分开，在程序中判断用户输入的整数是否在此文件中。说出最优的方法"></a>一个文件中有100万个整数，由空格分开，在程序中判断用户输入的整数是否在此文件中。说出最优的方法</h4><h4 id="两个进程同时要求写或者读，能不能实现？如何防止进程的同步？"><a href="#两个进程同时要求写或者读，能不能实现？如何防止进程的同步？" class="headerlink" title="两个进程同时要求写或者读，能不能实现？如何防止进程的同步？"></a>两个进程同时要求写或者读，能不能实现？如何防止进程的同步？</h4><h4 id="volatile-的意义？"><a href="#volatile-的意义？" class="headerlink" title="volatile 的意义？"></a>volatile 的意义？</h4><p>防止CPU指令重排序</p><h4 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton mSingleton;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(mSingleton == <span class="keyword">null</span>)&#123;\\A</span><br><span class="line">    <span class="keyword">synchronized</span>(Singleton.class)&#123;\\C</span><br><span class="line">     <span class="keyword">if</span>(mSingleton == <span class="keyword">null</span>)</span><br><span class="line">      mSingleton = <span class="keyword">new</span> Singleton();\\B</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mSingleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Given-a-string-determine-if-it-is-a-palindrome（回文，如果不清楚，按字面意思脑补下）-considering-only-alphanumeric-characters-and-ignoring-cases"><a href="#Given-a-string-determine-if-it-is-a-palindrome（回文，如果不清楚，按字面意思脑补下）-considering-only-alphanumeric-characters-and-ignoring-cases" class="headerlink" title="Given a string, determine if it is a palindrome（回文，如果不清楚，按字面意思脑补下）, considering only alphanumeric characters and ignoring cases."></a>Given a string, determine if it is a palindrome（回文，如果不清楚，按字面意思脑补下）, considering only alphanumeric characters and ignoring cases.</h4><p>For example,  “A man, a plan, a canal: Panama” is a palindrome.  “race a car” is not a palindrome.  </p><p>Note:  Have you consider that the string might be empty? This is a good question to ask during an interview.  For the purpose of this problem, we define empty string as valid palindrome.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public boolean isPalindrome(String palindrome)&#123;</span><br><span class="line">char[] palindromes = palidrome.toCharArray();</span><br><span class="line"> if(palindromes.lengh == 0)&#123;</span><br><span class="line"> return true</span><br><span class="line"> &#125;</span><br><span class="line"> Arraylist&lt;Char&gt; temp = new Arraylist();</span><br><span class="line"> for(int i=0;i&lt;palindromes.length;i++)&#123;</span><br><span class="line"> if((palindromes[i]&gt;&apos;a&apos; &amp;&amp; palindromes[i]&lt;&apos;z&apos;)||palindromes[i]&gt;&apos;A&apos; &amp;&amp; palindromes[i]&lt;&apos;Z&apos;))&#123;</span><br><span class="line"> temp.add(palindromes[i].toLowerCase());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> for(int i=0;i&lt;temp.size()/2;i++)&#123;</span><br><span class="line"> if(temp.get(i) != temp.get(temp.size()-i))&#123;</span><br><span class="line"> //</span><br><span class="line"> return false;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="烧一根不均匀的绳，从头烧到尾总共需要1个小时。现在有若干条材质相同的绳子，问如何用烧绳的方法来计时一个小时十五分钟呢"><a href="#烧一根不均匀的绳，从头烧到尾总共需要1个小时。现在有若干条材质相同的绳子，问如何用烧绳的方法来计时一个小时十五分钟呢" class="headerlink" title="烧一根不均匀的绳，从头烧到尾总共需要1个小时。现在有若干条材质相同的绳子，问如何用烧绳的方法来计时一个小时十五分钟呢"></a>烧一根不均匀的绳，从头烧到尾总共需要1个小时。现在有若干条材质相同的绳子，问如何用烧绳的方法来计时一个小时十五分钟呢</h4><p>用两根绳子，一个绳子两头烧，一个一头烧。</p><h3 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h3><h4 id="2000万个整数，找出第五十大的数字？"><a href="#2000万个整数，找出第五十大的数字？" class="headerlink" title="2000万个整数，找出第五十大的数字？"></a>2000万个整数，找出第五十大的数字？</h4><p>冒泡、选择、建堆</p><h4 id="从网络加载一个10M的图片，说下注意事项"><a href="#从网络加载一个10M的图片，说下注意事项" class="headerlink" title="从网络加载一个10M的图片，说下注意事项"></a>从网络加载一个10M的图片，说下注意事项</h4><p>图片缓存、异常恢复、质量压缩</p><h4 id="自定义View注意事项"><a href="#自定义View注意事项" class="headerlink" title="自定义View注意事项"></a>自定义View注意事项</h4><p>渲染帧率、内存</p><h4 id="项目中常用的设计模式"><a href="#项目中常用的设计模式" class="headerlink" title="项目中常用的设计模式"></a>项目中常用的设计模式</h4><p>单例、观察者、适配器、建造者。。</p><h4 id="JVM的理解"><a href="#JVM的理解" class="headerlink" title="JVM的理解"></a>JVM的理解</h4><p><a href="http://www.infoq.com/cn/articles/java-memory-model-1" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/java-memory-model-1</a></p><h3 id="java-1"><a href="#java-1" class="headerlink" title="java"></a>java</h3><h4 id="接口的意义"><a href="#接口的意义" class="headerlink" title="接口的意义"></a>接口的意义</h4><p>规范、扩展、回调</p><h4 id="抽象类的意义"><a href="#抽象类的意义" class="headerlink" title="抽象类的意义"></a>抽象类的意义</h4><p>为其子类提供一个公共的类型 封装子类中得重复内容 定义抽象方法，子类虽然有不同的实现 但是定义是一致的</p><!-- more --><h4 id="内部类的作用"><a href="#内部类的作用" class="headerlink" title="内部类的作用"></a>内部类的作用</h4><p>内部类可以用多个实例，每个实例都有自己的状态信息，并且与其他外围对象的信息相互独立。<br>在单个外围类中，可以让多个内部类以不同的方式实现同一个接口，或者继承同一个类。<br>创建内部类对象的时刻并不依赖于外围类对象的创建。<br>内部类并没有令人迷惑的“is-a”关系，他就是一个独立的实体。<br>内部类提供了更好的封装，除了该外围类，其他类都不能访问</p><h4 id="父类的静态方法能否被子类重写"><a href="#父类的静态方法能否被子类重写" class="headerlink" title="父类的静态方法能否被子类重写"></a>父类的静态方法能否被子类重写</h4><p>不能</p><p>子类继承父类后，用相同的静态方法和非静态方法，这时非静态方法覆盖父类中的方法（即方法重写），父类的该静态方法被隐藏（如果对象是父类则调用该隐藏的方法），另外子类可继承父类的静态与非静态方法，至于方法重载我觉得它其中一要素就是在同一类中，不能说父类中的什么方法与子类里的什么方法是方法重载的体现</p><h4 id="java排序算法"><a href="#java排序算法" class="headerlink" title="java排序算法"></a>java排序算法</h4><p><a href="http://blog.csdn.net/qy1387/article/details/7752973" target="_blank" rel="noopener">http://blog.csdn.net/qy1387/article/details/7752973</a></p><h4 id="java虚拟机的特性"><a href="#java虚拟机的特性" class="headerlink" title="java虚拟机的特性"></a>java虚拟机的特性</h4><p>Java语言的一个非常重要的特点就是与平台的无关性。而使用Java虚拟机是实现这一特点的关键。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。而引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用模式Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。</p><h4 id="哪些情况下的对象会被垃圾回收机制处理掉"><a href="#哪些情况下的对象会被垃圾回收机制处理掉" class="headerlink" title="哪些情况下的对象会被垃圾回收机制处理掉"></a>哪些情况下的对象会被垃圾回收机制处理掉</h4><p>Java 垃圾回收机制最基本的做法是分代回收。内存中的区域被划分成不同的世代，对象根据其存活的时间被保存在对应世代的区域中。一般的实现是划分成3个世代：年轻、年老和永久。内存的分配是发生在年轻世代中的。当一个对象存活时间足够长的时候，它就会被复制到年老世代中。对于不同的世代可以使用不同的垃圾回收算法。进行世代划分的出发点是对应用中对象存活时间进行研究之后得出的统计规律。一般来说，一个应用中的大部分对象的存活时间都很短。比如局部变量的存活时间就只在方法的执行过程中。基于这一点，对于年轻世代的垃圾回收算法就可以很有针对性。</p><h4 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h4><p>简而言之,一个程序至少有一个进程,一个进程至少有一个线程。</p><p>线程的划分尺度小于进程，使得多线程程序的并发性高。</p><p>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p><p>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</p><p>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p><p>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位.</p><p>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.</p><p>一个线程可以创建和撤销另一个线程;同一个进程中的多个线程之间可以并发执行.</p><p>进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。如果有兴趣深入的话，我建议你们看看《现代操作系统》或者《操作系统的设计与实现》。对就个问题说得比较清楚。</p><h4 id="java中-和equals和hashCode的区别"><a href="#java中-和equals和hashCode的区别" class="headerlink" title="java中==和equals和hashCode的区别"></a>java中==和equals和hashCode的区别</h4><p><a href="http://blog.csdn.net/tiantiandjava/article/details/46988461" target="_blank" rel="noopener">http://blog.csdn.net/tiantiandjava/article/details/46988461</a></p><h4 id="HashMap的实现原理"><a href="#HashMap的实现原理" class="headerlink" title="HashMap的实现原理"></a>HashMap的实现原理</h4><p>HashMap概述：    HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。<br>HashMap的数据结构： 在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。</p><p>从上图中可以看出，HashMap底层就是一个数组结构，数组中的每一项又是一个链表。当新建一个HashMap的时候，就会初始化一个数组。</p><h4 id="状态机-1"><a href="#状态机-1" class="headerlink" title="状态机"></a>状态机</h4><p><a href="http://www.jdon.com/designpatterns/designpattern_State.htm" target="_blank" rel="noopener">http://www.jdon.com/designpatterns/designpattern_State.htm</a></p><h4 id="int-char-long各占多少字节数-1"><a href="#int-char-long各占多少字节数-1" class="headerlink" title="int-char-long各占多少字节数"></a>int-char-long各占多少字节数</h4><p>byte 位数 8 字节数 1</p><p>short 16 2</p><p>int 32 4</p><p>long 64 8</p><p>float 32 4</p><p>double 64 8</p><p>char 16 2</p><h4 id="int与integer的区别-1"><a href="#int与integer的区别-1" class="headerlink" title="int与integer的区别"></a>int与integer的区别</h4><p><a href="http://www.cnblogs.com/shenliang123/archive/2011/10/27/2226903.html" target="_blank" rel="noopener">http://www.cnblogs.com/shenliang123/archive/2011/10/27/2226903.html</a></p><h4 id="string-stringbuffer-stringbuilder区别"><a href="#string-stringbuffer-stringbuilder区别" class="headerlink" title="string-stringbuffer-stringbuilder区别"></a>string-stringbuffer-stringbuilder区别</h4><p>String 字符串常量</p><p>StringBuffer 字符串变量（线程安全）</p><p>StringBuilder 字符串变量（非线程安全）</p><p>简要的说， String 类型和 StringBuffer 类型的主要性能区别其实在于 String 是不可变的对象, 因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用String ，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后,JVM 的 GC 就会开始工作，那速度是一定会相当慢的。</p><p>而如果是使用 StringBuffer 类则结果就不一样了，每次结果都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。所以在一般情况下我们推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。而在某些特别情况下， String 对象的字符串拼接其实是被 JVM 解释成了 StringBuffer 对象的拼接，所以这些时候 String 对象的速度并不会比 StringBuffer 对象慢，而特别是以下的字符串对象生成中， String 效率是远要比 StringBuffer 快的：</p><p>String S1 = “This is only a” + “simple” + “ test”;<br>StringBuffer Sb = new StringBuffer(“This is only a”).append(“simple”).append(“test”);<br>你会很惊讶的发现，生成 String S1 对象的速度简直太快了，而这个时候 StringBuffer 居然速度上根本一点都不占优势。其实这是 JVM 的一个把戏，在 JVM 眼里，这个  String S1 = “This is only a” + “ simple” + “test”; 其实就是：  String S1 = “This is only a simple test”; 所以当然不需要太多的时间了。但大家这里要注意的是，如果你的字符串是来自另外的 String 对象的话，速度就没那么快了，譬如：  String S2 = “This is only a”; String S3 = “ simple”; String S4 = “ test”; String S1 = S2 +S3 + S4; 这时候 JVM 会规规矩矩的按照原来的方式去做</p><p>在大部分情况下 StringBuffer &gt; String</p><p>StringBuffer</p><p>Java.lang.StringBuffer线程安全的可变字符序列。一个类似于 String 的字符串缓冲区，但不能修改。虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。</p><p>可将字符串缓冲区安全地用于多个线程。可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。</p><p>StringBuffer 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据。每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符追加或插入到字符串缓冲区中。append 方法始终将这些字符添加到缓冲区的末端；而 insert 方法则在指定的点添加字符。</p><p>例如，如果 z 引用一个当前内容是“start”的字符串缓冲区对象，则此方法调用 z.append(“le”) 会使字符串缓冲区包含“startle”，而 z.insert(4, “le”) 将更改字符串缓冲区，使之包含“starlet”。</p><p>在大部分情况下 StringBuilder &gt; StringBuffer</p><p>java.lang.StringBuilder</p><p>java.lang.StringBuilder一个可变的字符序列是5.0新增的。此类提供一个与 StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快。两者的方法基本相同</p><h4 id="java多态"><a href="#java多态" class="headerlink" title="java多态"></a>java多态</h4><p>Java多态性理解</p><p>Java中多态性的实现</p><p>什么是多态</p><p>面向对象的三大特性：封装、继承、多态。从一定角度来看，封装和继承几乎都是为多态而准备的。这是我们最后一个概念，也是最重要的知识点。</p><p>多态的定义：指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。（发送消息就是函数调用）</p><p>实现多态的技术称为：动态绑定（dynamic binding），是指在执行期间判断所引用对象的实 际类型，根据其实际的类型调用其相应的方法。</p><p>多态的作用：消除类型之间的耦合关系。</p><p>现实中，关于多态的例子不胜枚举。比方说按下 F1 键这个动作，如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；如果当前在 Word 下弹出的就是 Word 帮助；在 Windows 下弹出的就是 Windows 帮助和支持。同一个事件发生在不同的对象上会产生不同的结果。 下面是多态存在的三个必要条件，要求大家做梦时都能背出来！</p><p>多态存在的三个必要条件 一、要有继承； 二、要有重写； 三、父类引用指向子类对象。</p><p> 多态的好处：</p><p>1.可替换性（substitutability）。多态对已存在代码具有可替换性。例如，多态对圆Circle类工作，对其他任何圆形几何体，如圆环，也同样工作。</p><p>2.可扩充性（extensibility）。多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作。实际上新加子类更容易获得多态功能。例如，在实现了圆锥、半圆锥以及半球体的多态基础上，很容易增添球体类的多态性。</p><p>3.接口性（interface-ability）。多态是超类通过方法签名，向子类提供了一个共同接口，由子类来完善或者覆盖它而实现的。如图8.3 所示。图中超类Shape规定了两个实现多态的接口方法，computeArea()以及computeVolume()。子类，如Circle和Sphere为了实现多态，完善或者覆盖这两个接口方法。</p><p>4.灵活性（flexibility）。它在应用中体现了灵活多样的操作，提高了使用效率。</p><p>5.简化性（simplicity）。多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。</p><p>Java中多态的实现方式：接口实现，继承父类进行方法重写，同一个类中进行方法重载。</p><h4 id="什么导致线程阻塞"><a href="#什么导致线程阻塞" class="headerlink" title="什么导致线程阻塞"></a>什么导致线程阻塞</h4><p>线程的阻塞</p><p>为了解决对共享存储区的访问冲突，Java 引入了同步机制，现在让我们来考察多个线程对共享资源的访问，显然同步机制已经不够了，因为在任意时刻所要求的资源不一定已经准备好了被访问，反过来，同一时刻准备好了的资源也可能不止一个。为了解决这种情况下的访问控制问题，Java 引入了对阻塞机制的支持.</p><p>阻塞指的是暂停一个线程的执行以等待某个条件发生（如某资源就绪），学过操作系统的同学对它一定已经很熟悉了。Java 提供了大量方法来支持阻塞，下面让我们逐一分析。</p><p>sleep() 方法：sleep() 允许 指定以毫秒为单位的一段时间作为参数，它使得线程在指定的时间内进入阻塞状态，不能得到CPU 时间，指定的时间一过，线程重新进入可执行状态。 典型地，sleep() 被用在等待某个资源就绪的情形：测试发现条件不满足后，让线程阻塞一段时间后重新测试，直到条件满足为止。<br>suspend() 和 resume() 方法：两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的resume() 被调用，才能使得线程重新进入可执行状态。典型地，suspend() 和 resume() 被用在等待另一个线程产生的结果的情形：测试发现结果还没有产生后，让线程阻塞，另一个线程产生了结果后，调用 resume() 使其恢复。<br>yield() 方法：yield() 使得线程放弃当前分得的 CPU 时间，但是不使线程阻塞，即线程仍处于可执行状态，随时可能再次分得 CPU 时间。调用 yield() 的效果等价于调度程序认为该线程已执行了足够的时间从而转到另一个线程.<br>wait() 和 notify() 方法：两个方法配套使用，wait() 使得线程进入阻塞状态，它有两种形式，一种允许 指定以毫秒为单位的一段时间作为参数，另一种没有参数，前者当对应的 notify() 被调用或者超出指定时间时线程重新进入可执行状态，后者则必须对应的 notify() 被调用.<br>初看起来它们与 suspend() 和 resume() 方法对没有什么分别，但是事实上它们是截然不同的。区别的核心在于，前面叙述的所有方法，阻塞时都不会释放占用的锁（如果占用了的话），而这一对方法则相反。</p><p>上述的核心区别导致了一系列的细节上的区别。</p><p>首先，前面叙述的所有方法都隶属于 Thread 类，但是这一对却直接隶属于 Object 类，也就是说，所有对象都拥有这一对方法。初看起来这十分不可思议，但是实际上却是很自然的，因为这一对方法阻塞时要释放占用的锁，而锁是任何对象都具有的，调用任意对象的 wait() 方法导致线程阻塞，并且该对象上的锁被释放。而调用 任意对象的notify()方法则导致因调用该对象的 wait() 方法而阻塞的线程中随机选择的一个解除阻塞（但要等到获得锁后才真正可执行）。</p><p>其次，前面叙述的所有方法都可在任何位置调用，但是这一对方法却必须在 synchronized 方法或块中调用，理由也很简单，只有在synchronized 方法或块中当前线程才占有锁，才有锁可以释放。同样的道理，调用这一对方法的对象上的锁必须为当前线程所拥有，这样才有锁可以释放。因此，这一对方法调用必须放置在这样的 synchronized 方法或块中，该方法或块的上锁对象就是调用这一对方法的对象。若不满足这一条件，则程序虽然仍能编译，但在运行时会出现IllegalMonitorStateException 异常。</p><p>wait() 和 notify() 方法的上述特性决定了它们经常和synchronized 方法或块一起使用，将它们和操作系统的进程间通信机制作一个比较就会发现它们的相似性：synchronized方法或块提供了类似于操作系统原语的功能，它们的执行不会受到多线程机制的干扰，而这一对方法则相当于 block 和wakeup 原语（这一对方法均声明为 synchronized）。它们的结合使得我们可以实现操作系统上一系列精妙的进程间通信的算法（如信号量算法），并用于解决各种复杂的线程间通信问题。</p><p>关于 wait() 和 notify() 方法最后再说明两点：</p><p>第一：调用 notify() 方法导致解除阻塞的线程是从因调用该对象的 wait() 方法而阻塞的线程中随机选取的，我们无法预料哪一个线程将会被选择，所以编程时要特别小心，避免因这种不确定性而产生问题。</p><p>第二：除了 notify()，还有一个方法 notifyAll() 也可起到类似作用，唯一的区别在于，调用 notifyAll() 方法将把因调用该对象的 wait() 方法而阻塞的所有线程一次性全部解除阻塞。当然，只有获得锁的那一个线程才能进入可执行状态。</p><p>谈到阻塞，就不能不谈一谈死锁，略一分析就能发现，suspend() 方法和不指定超时期限的 wait() 方法的调用都可能产生死锁。遗憾的是，Java 并不在语言级别上支持死锁的避免，我们在编程中必须小心地避免死锁。</p><p>以上我们对 Java 中实现线程阻塞的各种方法作了一番分析，我们重点分析了 wait() 和 notify() 方法，因为它们的功能最强大，使用也最灵活，但是这也导致了它们的效率较低，较容易出错。实际使用中我们应该灵活使用各种方法，以便更好地达到我们的目的。</p><h4 id="抽象类接口区别"><a href="#抽象类接口区别" class="headerlink" title="抽象类接口区别"></a>抽象类接口区别</h4><p>默认的方法实现 抽象类可以有默认的方法实现完全是抽象的。接口根本不存在方法的实现</p><p>实现 子类使用extends关键字来继承抽象类。如果子类不是抽象类的话，它需要提供抽象类中所有声明的方法的实现。 子类使用关键字implements来实现接口。它需要提供接口中所有声明的方法的实现</p><p>构造器 抽象类可以有构造器 接口不能有构造器</p><p>与正常Java类的区别 除了你不能实例化抽象类之外，它和普通Java类没有任何区 接口是完全不同的类型</p><p>访问修饰符 抽象方法可以有public、protected和default这些修饰符 接口方法默认修饰符是public。你不可以使用其它修饰符。</p><p>main方法 抽象方法可以有main方法并且我们可以运行它 接口没有main方法，因此我们不能运行它。</p><p>多继承 抽象类在java语言中所表示的是一种继承关系，一个子类只能存在一个父类，但是可以存在多个接口。</p><p>速度 它比接口速度要快 接口是稍微有点慢的，因为它需要时间去寻找在类中实现的方法。</p><p>添加新方法 如果你往抽象类中添加新的方法，你可以给它提供默认的实现。因此你不需要改变你现在的代码。 如果你往接口中添加方法，那么你必须改变实现该接口的类。</p><h4 id="容器类之间的区别"><a href="#容器类之间的区别" class="headerlink" title="容器类之间的区别"></a>容器类之间的区别</h4><p><a href="http://www.cnblogs.com/yuanermen/archive/2009/08/05/1539917.html" target="_blank" rel="noopener">http://www.cnblogs.com/yuanermen/archive/2009/08/05/1539917.html</a> <a href="http://alexyyek.github.io/2015/04/06/Collection/" target="_blank" rel="noopener">http://alexyyek.github.io/2015/04/06/Collection/</a> <a href="http://tianmaying.com/tutorial/java_collection" target="_blank" rel="noopener">http://tianmaying.com/tutorial/java_collection</a></p><h4 id="内部类-1"><a href="#内部类-1" class="headerlink" title="内部类"></a>内部类</h4><p><a href="http://www.cnblogs.com/chenssy/p/3388487.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenssy/p/3388487.html</a></p><h4 id="hashmap和hashtable的区别"><a href="#hashmap和hashtable的区别" class="headerlink" title="hashmap和hashtable的区别"></a>hashmap和hashtable的区别</h4><p><a href="http://www.233.com/ncre2/JAVA/jichu/20100717/084230917.html" target="_blank" rel="noopener">http://www.233.com/ncre2/JAVA/jichu/20100717/084230917.html</a></p><h4 id="ArrayMap对比HashMap-1"><a href="#ArrayMap对比HashMap-1" class="headerlink" title="ArrayMap对比HashMap"></a>ArrayMap对比HashMap</h4><p><a href="http://lvable.com/?p=217" target="_blank" rel="noopener">http://lvable.com/?p=217</a></p>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java题库 </tag>
            
            <tag> 面试 </tag>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《java并发编程的艺术》笔记</title>
      <link href="/2017/04/01/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/04/01/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="使用并发带来的挑战和解决方案"><a href="#使用并发带来的挑战和解决方案" class="headerlink" title="使用并发带来的挑战和解决方案"></a>使用并发带来的挑战和解决方案</h1><h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p>切换定义：某个线程从上一次（使用CPU时间片）保存状态退出执行到下一次加载执行</p><p>影响：切换带来开销</p><p>评估：Lmbench3 测量切换时长，vmstat 测量切换次数</p><p>解决：无锁并发（如取模分片），CAS算法，避免创建不必要线程，单线程多任务（协程）</p><p>实战：减少web容器配置的maxThreads （根据实际情况确定）</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>原因：互相等待对方释放锁</p><p>场景：异常导致没有到释放环节，或者释放本身异常</p><p>解决：避免一个线程同时获取多个锁、占用多个资源，尝试定时锁</p><h2 id="硬软件资源限制"><a href="#硬软件资源限制" class="headerlink" title="硬软件资源限制"></a>硬软件资源限制</h2><p>示例：带宽、硬盘读写、CPU速度，数据库、socket连接数</p><p>问题：并行退化为串行，额外增加了切换开销</p><p>解决：集群增加资源，池复用资源，确定并发数时考虑资源限制/瓶颈</p><p><strong>* 强烈建议多使用JDK并发包提供的并发容器和工具类 *</strong></p><h1 id="底层实现原理"><a href="#底层实现原理" class="headerlink" title="底层实现原理"></a>底层实现原理</h1><h2 id="JVM-amp-CPU指令"><a href="#JVM-amp-CPU指令" class="headerlink" title="JVM&amp;CPU指令"></a>JVM&amp;CPU指令</h2><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>如果一个字段被声明成volatile，Java线程内存模型确保所有线程看到这个变量的值是一致的<br>volotile变量写操作会多一个lock指令：将当前处理器缓存数据写回系统内存，一个处理器的缓存回写到内存会导致其他处理器的缓存无效<br>处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。</p><p>使用优化：jdk7引入的<a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/java/util/concurrent/LinkedTransferQueue.java#LinkedTransferQueue" target="_blank" rel="noopener">LinkedTransferQueue</a>使用追加字节方式，使得队列头尾节点大小刚好符合处理器缓存一个缓存行大小（如64字节），使得头尾节点位于不同缓存行，修改时不互相影响（锁定缓存行），从而加快入队、出队并发速率</p><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><p>3种形式</p><ul><li>普通同步方法，锁当前实例对象</li><li>静态同步方法，锁对应class对象</li><li>同步方法块，括号中配置对象</li></ul><p>monitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是插入到方法结束处和异常处，JVM要保证每个monitorenter必须有对应的monitorexit与之配对。任何对象都有一个monitor与之关联，当一个monitor被持有后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor的所有权，即尝试获得对象的锁</p><p>不同锁状态</p><ul><li>无锁</li><li>偏向锁<ul><li>场景：大部分情况下锁总是被同一线程多次获得</li><li>解决：对象头MarkWord存储对应锁线程id，以后该线程进入和退出同步块时不需要进行CAS操作来加锁和解锁</li><li>释放锁：其它线程竞争该锁时才释放，偏向锁释放需要等待全局安全点<br><img src="http://img.blog.csdn.net/20161124210648183" alt></li></ul></li><li>轻量级锁<ul><li>使用自旋来竞争<br><img src="http://img.blog.csdn.net/20161124210716044" alt></li></ul></li><li>重量级锁</li></ul>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 坚持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac重装系统</title>
      <link href="/2016/11/15/Mac%E9%87%8D%E8%A3%85/"/>
      <url>/2016/11/15/Mac%E9%87%8D%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="关于备份"><a href="#关于备份" class="headerlink" title="关于备份"></a>关于备份</h1><p>可以用外部存储或网络备份，也可以用磁盘工具单独分一个区用来备份</p><h1 id="关于重装"><a href="#关于重装" class="headerlink" title="关于重装"></a>关于重装</h1><p>关机后，开机时（开机音乐响后）按住command+R，如果不小心看到只有一个带感叹号文件夹在闪，可以开机后按住command+option+P+R,然后再开机按住command+R</p><p>开机后可选择进入磁盘工具，格式化原系统分区；然后退出磁盘工具，选择重新安装系统，注意需要有靠谱网络连接（实测不稳定出现2003F等错误后可关机重复操作，直至下载进度条完成）</p><h1 id="软件安装与配置"><a href="#软件安装与配置" class="headerlink" title="软件安装与配置"></a>软件安装与配置</h1><h2 id="码农必备xcode-command-tools"><a href="#码农必备xcode-command-tools" class="headerlink" title="码农必备xcode command tools"></a>码农必备xcode command tools</h2><p>可使用xcode-select -p查看是否已安装</p><p>也可直接敲gcc命令，mac会聪明的自动弹出安装对话框，选择安装即可</p><p>安装后亲切的git等命令就可以用了</p><h2 id="软件管理必备brew"><a href="#软件管理必备brew" class="headerlink" title="软件管理必备brew"></a>软件管理必备brew</h2><p>使用mac自带“终端”程序，敲入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>”</span></span><br></pre></td></tr></table></figure><p>即完成brew安装。</p><p><del>使用brew cask可方便的安装一些GUI软件，可考虑加上</del> 新版不需要了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install caskroom/cask/brew-cask</span><br></pre></td></tr></table></figure><p>brew操作过程中可能会遇到github API报错（如果brew源未更改的话）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: GitHub API Error: API rate <span class="built_in">limit</span> exceeded <span class="keyword">for</span> 103.37.140.11.</span><br></pre></td></tr></table></figure><p>根据命令行提示去github申请单独token即可</p><p>使用国内软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line">brew update -v</span><br></pre></td></tr></table></figure><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#替换终端</span></span><br><span class="line">brew cask install iterm2</span><br><span class="line"><span class="comment">#替换浏览器</span></span><br><span class="line">brew cask install google-chrome</span><br><span class="line"><span class="comment">#开发</span></span><br><span class="line">brew cask install java</span><br><span class="line">brew install maven</span><br><span class="line">brew install jetty</span><br><span class="line">brew install vim --with-lua --with-override-system-vi</span><br><span class="line"><span class="comment">#brew cask install android-studio</span></span><br><span class="line">brew cask install intellij-idea</span><br><span class="line">brew install wget</span><br><span class="line"><span class="comment">#虚拟机，安装Windows用</span></span><br><span class="line">brew cask install virtualbox virtualbox-extension-pack</span><br><span class="line">brew cask install the-unarchiver</span><br><span class="line">brew cask install mplayerx</span><br><span class="line"><span class="comment">#输入法</span></span><br><span class="line">brew cask install sogouinput</span><br><span class="line">open /usr/<span class="built_in">local</span>/Caskroom/sogouinput/3.8.0.2054/安装搜狗输入法.app</span><br></pre></td></tr></table></figure><h2 id="git库访问权限支持"><a href="#git库访问权限支持" class="headerlink" title="git库访问权限支持"></a>git库访问权限支持</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"xxx@gmail.com"</span></span><br><span class="line"><span class="comment">#拷贝公钥</span></span><br><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h2 id="goproxy"><a href="#goproxy" class="headerlink" title="goproxy"></a>goproxy</h2><p>编译安装比较纠结（“GoProxy 对 golang 周边库做了一些修改”），所以直接下载编译好的包比较方便</p><p><a href="https://github.com/phuslu/goproxy/blob/wiki/SimpleGuide.md" target="_blank" rel="noopener">简易教程</a></p><p>访问<a href="https://github.com/phuslu/goproxy-ci/releases/latest下载最新版，如goproxy_macos_amd64-r1419.tar.bz2，文件托管在amazonaws.com，会有点慢" target="_blank" rel="noopener">https://github.com/phuslu/goproxy-ci/releases/latest下载最新版，如goproxy_macos_amd64-r1419.tar.bz2，文件托管在amazonaws.com，会有点慢</a></p><p>查看appid可访问<a href="https://console.cloud.google.com/home/dashboard" target="_blank" rel="noopener">https://console.cloud.google.com/home/dashboard</a></p><p>导入代理自动切换规则可以参考<a href="https://github.com/gfwlist/gfwlist" target="_blank" rel="noopener">https://github.com/gfwlist/gfwlist</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mkdir goproxy</span><br><span class="line"><span class="built_in">cd</span> goproxy</span><br><span class="line"><span class="comment">#先下载gae服务器程序，用来上传到gae平台，之前已经部署过的话可以跳过</span></span><br><span class="line"><span class="comment">#上传成功，请不要忘记编辑 gae.user.json 把你的appid填进去</span></span><br><span class="line">wget https://github.com/phuslu/goproxy-ci/releases/download/r1419/goproxy-gae-r65.zip</span><br><span class="line">unzip goproxy-gae-r65.zip</span><br><span class="line"><span class="built_in">cd</span> goproxy-r65</span><br><span class="line">python uploader.py</span><br><span class="line"><span class="comment">#然后是下载本地客户端，这里下载的是命令行形式的，也可以下载mac app版本</span></span><br><span class="line">wget https://github.com/phuslu/goproxy-ci/releases/download/r1419/goproxy_macos_amd64-r1419.tar.bz2</span><br><span class="line">tar zxvf goproxy_macos_amd64-r1419.tar.bz2</span><br><span class="line"><span class="comment">#编辑完gae.json就可以运行了</span></span><br><span class="line">vim gae.json</span><br><span class="line">sudo ./goproxy -v=2</span><br><span class="line"><span class="comment">#下载SwitchyOmega插件对应的备份配置，然后导入插件</span></span><br><span class="line">wget https://raw.githubusercontent.com/pengjunlong/goagent/master/<span class="built_in">local</span>/SwitchyOptions.bak</span><br></pre></td></tr></table></figure><h2 id="chrome设置"><a href="#chrome设置" class="headerlink" title="chrome设置"></a>chrome设置</h2><p>登录以同步设置、扩展、书签等<br>SwitchyOmega扩展用来配合科学上网，</p><p>配置在线恢复：<br><a href="http://switchysharp.com/file/SwitchyOptions.bak" target="_blank" rel="noopener">http://switchysharp.com/file/SwitchyOptions.bak</a></p><p>配置自动切换：<br><a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></p><h2 id="dotfile管理"><a href="#dotfile管理" class="headerlink" title="dotfile管理"></a>dotfile管理</h2><p><a href="https://github.com/skwp/dotfiles" target="_blank" rel="noopener">https://github.com/skwp/dotfiles</a></p><p>从github上的介绍，这个“Yet Another Dotfile Repo”包含了vim、zsh相关的很多优秀插件和配置，mac的话还会帮你安装iterm2配色方案，当然有的配置可能不太符合个人原有使用习惯</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"`curl -fsSL https://raw.githubusercontent.com/skwp/dotfiles/master/install.sh `"</span></span><br></pre></td></tr></table></figure><h3 id="启用iterm2中的Solarized-Colors"><a href="#启用iterm2中的Solarized-Colors" class="headerlink" title="启用iterm2中的Solarized Colors"></a>启用iterm2中的Solarized Colors</h3><p>Go to Profiles =&gt; Colors =&gt; Load Presets to pick Solarized Dark.</p><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装hexo</span></span><br><span class="line">brew install node</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment">#下载博客hexo分支</span></span><br><span class="line">git <span class="built_in">clone</span> -b hexo --single-branch git@github.com:pengjunlong/pengjunlong.github.io.git hexo</span><br><span class="line"><span class="built_in">cd</span> hexo/</span><br><span class="line">npm install</span><br><span class="line"><span class="comment">#下载主题</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br><span class="line">git status</span><br><span class="line">git checkout themes/</span><br><span class="line"><span class="comment">#运行</span></span><br><span class="line">hexo s -w</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
            <tag> Mac </tag>
            
            <tag> 常用软件快速安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>增加了一个hexo-admin插件</title>
      <link href="/2016/08/01/%E5%A2%9E%E5%8A%A0%E4%BA%86%E4%B8%80%E4%B8%AAhexo-admin%E6%8F%92%E4%BB%B6/"/>
      <url>/2016/08/01/%E5%A2%9E%E5%8A%A0%E4%BA%86%E4%B8%80%E4%B8%AAhexo-admin%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hexo.io/plugins/" target="_blank" rel="noopener">https://hexo.io/plugins/</a></p><p><a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">https://github.com/jaredly/hexo-admin</a></p><p>Edit your content in style with this integrating blogging environment.</p><p>看着效果不错，应该比命令行new直观点</p><p><img src="https://raw.githubusercontent.com/jaredly/hexo-admin/master/docs/pasted-0.png" alt="截图1"><br><img src="https://raw.githubusercontent.com/jaredly/hexo-admin/master/docs/pasted-1.png" alt="截图2"></p><p>具体添加插件步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br><span class="line">hexo server -d</span><br><span class="line">open http://localhost:4000/admin/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo技巧 </tag>
            
            <tag> 写博客插件 </tag>
            
            <tag> 用IDEA了 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP数组函数性能分析</title>
      <link href="/2016/04/27/PHP%E6%95%B0%E7%BB%84%E5%87%BD%E6%95%B0%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
      <url>/2016/04/27/PHP%E6%95%B0%E7%BB%84%E5%87%BD%E6%95%B0%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/2473989/list-of-big-o-for-php-functions" target="_blank" rel="noopener">List of Big-O for PHP functions</a></p><p>存在所有PHP内置函数的理论（或实际）时间复杂度列表吗？</p><p>Since it doesn’t seem like anyone has done this before I thought it’d be good idea to have it for reference somewhere. I’ve gone though and either via benchmark or code-skimming to characterize the array_* functions. I’ve tried to put the more interesting Big-O near the top. This list is not complete.</p><p>Note: All the Big-O where calculated assuming a hash lookup is O(1) even though it’s really O(n). The coefficient of the n is so low, the ram overhead of storing a large enough array would hurt you before the characteristics of lookup Big-O would start taking effect. For example the difference between a call to array_key_exists at N=1 and N=1,000,000 is ~50% time increase.</p><h1 id="Interesting-Points"><a href="#Interesting-Points" class="headerlink" title="Interesting Points:"></a>Interesting Points:</h1><ol><li>isset/array_key_exists is much faster than in_array and array_search</li><li>+(union) is a bit faster than array_merge (and looks nicer). But it does work differently so keep that in mind.</li><li>shuffle is on the same Big-O tier as array_rand</li><li>array_pop/array_push is faster than array_shift/array_unshift due to re-index penalty</li></ol><h1 id="Lookups"><a href="#Lookups" class="headerlink" title="Lookups:"></a>Lookups:</h1><p>array_key_exists O(n) but really close to O(1) - this is because of linear polling in collisions, but because the chance of collisions is very small, the coefficient is also very small. I find you treat hash lookups as O(1) to give a more realistic big-O. For example the different between N=1000 and N=100000 is only about 50% slow down.</p><p>isset( $array[$index] ) O(n) but really close to O(1) - it uses the same lookup as array_key_exists. Since it’s language construct, will cache the lookup if the key is hardcoded, resulting in speed up in cases where the same key is used repeatedly.</p><p>in_array O(n) - this is because it does a linear search though the array until it finds the value.</p><p>array_search O(n) - it uses the same core function as in_array but returns value.</p><h1 id="Queue-functions"><a href="#Queue-functions" class="headerlink" title="Queue functions:"></a>Queue functions:</h1><p>array_push O(∑ var_i, for all i)</p><p>array_pop O(1)</p><p>array_shift O(n) - it has to reindex all the keys</p><p>array_unshift O(n + ∑ var_i, for all i) - it has to reindex all the keys</p><h1 id="Array-Intersection-Union-Subtraction"><a href="#Array-Intersection-Union-Subtraction" class="headerlink" title="Array Intersection, Union, Subtraction:"></a>Array Intersection, Union, Subtraction:</h1><p>array_intersect_key if intersection 100% do O(Max(param_i_size)*∑param_i_count, for all i), if intersection 0% intersect O(∑param_i_size, for all i)</p><p>array_intersect if intersection 100% do O(n^2*∑param_i_count, for all i), if intersection 0% intersect O(n^2)</p><p>array_intersect_assoc if intersection 100% do O(Max(param_i_size)*∑param_i_count, for all i), if intersection 0% intersect O(∑param_i_size, for all i)</p><p>array_diff O(π param_i_size, for all i) - That’s product of all the param_sizes</p><p>array_diff_key O(∑ param_i_size, for i != 1) - this is because we don’t need to iterate over the first array.</p><p>array_merge O( ∑ array_i, i != 1 ) - doesn’t need to iterate over the first array</p><ul><li>(union) O(n), where n is size of the 2nd array (ie array_first + array_second) - less overhead than array_merge since it doesn’t have to renumber</li></ul><p>array_replace O( ∑ array_i, for all i )</p><h1 id="Random"><a href="#Random" class="headerlink" title="Random:"></a>Random:</h1><p>shuffle O(n)</p><p>array_rand O(n) - Requires a linear poll.</p><h1 id="Obvious-Big-O"><a href="#Obvious-Big-O" class="headerlink" title="Obvious Big-O:"></a>Obvious Big-O:</h1><p>array_fill O(n)</p><p>array_fill_keys O(n)</p><p>range O(n)</p><p>array_splice O(offset + length)</p><p>array_slice O(offset + length) or O(n) if length = NULL</p><p>array_keys O(n)</p><p>array_values O(n)</p><p>array_reverse O(n)</p><p>array_pad O(pad_size)</p><p>array_flip O(n)</p><p>array_sum O(n)</p><p>array_product O(n)</p><p>array_reduce O(n)</p><p>array_filter O(n)</p><p>array_map O(n)</p><p>array_chunk O(n)</p><p>array_combine O(n)</p><p>I’d like to thank Eureqa for making it easy to find the Big-O of the functions. It’s an amazing free program that can find the best fitting function for arbitrary data.</p><p>EDIT:</p><p>For those who doubt that PHP array lookups are O(N), I’ve written a benchmark to test that (they are still effectively O(1) for most realistic values).</p><p><img src="http://ww3.sinaimg.cn/large/4bc2a2bajw1f3bi0rs68yj20te0afaau.jpg" alt></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$tests = <span class="number">1000000</span>;</span><br><span class="line">$max = <span class="number">5000001</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( $i = <span class="number">1</span>; $i &lt;= $max; $i += <span class="number">10000</span> ) &#123;</span><br><span class="line"><span class="comment">//create lookup array</span></span><br><span class="line">$array = array_fill( <span class="number">0</span>, $i, <span class="keyword">NULL</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">//build test indexes</span></span><br><span class="line">$test_indexes = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span>( $j = <span class="number">0</span>; $j &lt; $tests; $j++ ) &#123;</span><br><span class="line">$test_indexes[] = rand( <span class="number">0</span>, $i<span class="number">-1</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//benchmark array lookups</span></span><br><span class="line">$start = microtime( <span class="keyword">TRUE</span> );</span><br><span class="line"><span class="keyword">foreach</span>( $test_indexes <span class="keyword">as</span> $test_index ) &#123;</span><br><span class="line">$value = $array[ $test_index ];</span><br><span class="line"><span class="keyword">unset</span>( $value );</span><br><span class="line">&#125;</span><br><span class="line">$stop = microtime( <span class="keyword">TRUE</span> );</span><br><span class="line"><span class="keyword">unset</span>( $array, $test_indexes, $test_index );</span><br><span class="line"></span><br><span class="line">printf( <span class="string">"%d,%1.15f\n"</span>, $i, $stop - $start ); <span class="comment">//time per 1mil lookups</span></span><br><span class="line"><span class="keyword">unset</span>( $stop, $start );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax:Web开发的新方法</title>
      <link href="/2016/04/27/Ajax-Web%E5%BC%80%E5%8F%91%E7%9A%84%E6%96%B0%E6%96%B9%E6%B3%95/"/>
      <url>/2016/04/27/Ajax-Web%E5%BC%80%E5%8F%91%E7%9A%84%E6%96%B0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><a href="http://adaptivepath.org/ideas/ajax-new-approach-web-applications/" target="_blank" rel="noopener">Ajax: A New Approach to Web Applications</a></p><p>如果最近的交互设计有什么可以称之为“富有魅力的”，那就是产生网页应用了。所有的最酷炫的设计都是在线的。</p><p>尽管如此，网页交互设计师还是对咱们制造桌面软件的同事感觉有些许嫉妒。桌面应用程序丰富且拥有响应能力，这似乎远超在web上的相应功能。使得Web快速增长的“类似的简单性”同样也在我们所提供的经验与用户可以从桌面应用中获取的经验之间形成了落差。</p><p>这个落差正在慢慢弥合。瞧一下Google Suggest吧。看看你输入的词汇暗示更新的方式，几乎是立即的。现在让我们来看一下Google Maps的放大功能。用你的光标来抓取地图并卷动屏幕。再一次的，一切几乎是瞬间发生的，没有任何页面装载的明显等待时间。</p><p>谷歌搜索和谷歌地图是两种新的在自适应路径上我们称之为“AJAX”的网页应用。这个名字是一种缩写，表示了异步的JavaScript以及XML， 而且它表现了一种就网络上可能性而言的基础范式转移。</p><p>Ajax不是一种技术。而是多重技术的组合，其中每一种都有各自存在的理由，各自组合后就产生了一种新的强有力的效应。Ajax包含了：</p><ul><li>使用XHTML和CSS的基于标准的表现形式</li><li>使用文档对象模型DOM的动态交互展示</li><li>使用XML 以及XSLT的数据交互操控</li><li>应用XMLHttpRequest的异步数据检索</li></ul><p>经典的网络应用模型是以下面的方式进行工作的：大多数用户在界面活动，触发一个HTTP请求并返回网络服务器。服务器端做了一些处理：检索数据，分析数值， 与历史遗留系统交互然后返回给客户端一张HTML页面。这是一种较适合网络早期的超文本媒体处理模型，但是使网页适合于超文本的因素并不适用于软件应用。</p><p><img src="http://ww3.sinaimg.cn/large/4bc2a2bajw1f3bhozed6bj20d70cn76m.jpg" alt></p><p>图一： 网络应用的传统模型（左）与AJAX 模型（右）的对比</p><p>这种方式就技术意义而言是一次飞跃，但是就用户体验而言却并没有带来多少提升。当服务器端在做它自己的事的时候，用户在干什么呢？对了，用户在等待。在任务中的每一步，用户都在等待些什么。</p><p>显然，当我们设计网络应用的时候，我们不应该让用户傻等。一旦当一个界面被装载时， 为什么用户一定要在每次应用从服务器需求某些资源时等待(halt)呢？事实上，为什么用户一定要看到应用到达服务器的过程呢？</p><p>Ajax是如何不同于旧的网络模型<br>过在用户和服务器之间引入一个Ajax引擎，可以消除Web应用的开始-停止-开始-停止这样的交互过程。初看起来好像在应用中加入了一层反而使反应性降低了，但事实却恰恰相反。</p><p>在会话的开始时期，浏览器装载AJAX引擎 ，替代经典模型中“装载一个页面”。这个AJAX引擎是用JavaScript写的并隐藏于框架结构的后面。这个引擎负责翻译用户可见接口并站在用户方与服务器交互。AJAX引擎允许用户以异步的方式进行交互——独立于与服务器的交互。所以用户不再需要盯着沙漏图标或空白windows浏览器以等待服务器来做点什么。</p><p><img src="http://ww3.sinaimg.cn/large/4bc2a2bajw1f3bhozslq1j20d70gm41m.jpg" alt></p><p>图二： 传统网络应用的异步交互模式（上）与AJAX的异步交互模式(下)的区别</p><p>每一个会生成HTTP请求的用户活动通常以JavaScript 的形式调用AJAX引擎。每一个“无需返回服务器端的”用户请求——如简单数据验证，内存中编辑数据以及一些导航——都由AJAX引擎自行处理了。如果引擎需要响应从服务器端返回——如果提交数据用于处理，下载更多的界面数据， 或检索新数据——那么引擎将使用XML来异步这些请求，而无需停止用户与应用的交互。</p><p>谁在使用AJAX<br>谷歌在开发AJAX的应用上已经投入了大量资金。谷歌在去年宣讲的主要产品如Gmail,最终的beta版本的Google Groups,Google Suggest以及Google Maps都是AJAX应用。（欲关注AJAX实施技术点的详解，可以详细的考察谷歌邮件，谷歌搜索以及谷歌地图）</p><p>这些项目展示了Ajax并不仅仅是关起门来的技术方向上的研究，而是真是世界中的应用实践。这并不是一个仅仅在实验室中的技术。并且AJAX应用可以从非常简单的单一功能的谷歌搜索到非常复杂且精致的谷歌地图，即AJAX可适合任何尺寸。</p><p>在我们自己的网站过去数月中，我们用AJAX来做自己的工作。并且我们意识到我们只是利用了AJAX所能提供的丰富的交互性与反应性中中很表面的一些功能。Ajax是网络应用领域中重要的进展，其重要性正在增长中。并且由于有这么多的开发人员已经了解如何来使用这些技术，我们希望更多的组织在谷歌的技术领导下使用富有竞争力的AJAX。</p><p>向前进<br>在使用AJAX方面最大的挑战不是来自技术的， 核心AJAX技术是成熟的而且易于理解的。 这些应用的设计师的挑战是：忘记我们自以为知道的网络限制，而构想一个更大更丰富的可能性。</p>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> Ajax </tag>
            
            <tag> 持之以恒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL主从复制</title>
      <link href="/2015/11/08/mysql-replication/"/>
      <url>/2015/11/08/mysql-replication/</url>
      
        <content type="html"><![CDATA[<p>复制可以让数据从一个MySQL服务器（主库）复制到一个或多个MySQL服务器（从库）。复制默认是异步的，从库不需要一直连在主库上来接收主库的更新。通过不同配置，你可以复制所有DB、想要的部分DB、或者仅复制DB中选定的表。<br>在MySQL中使用复制的好处有：</p><ul><li>水平扩展————把负载分到多个从库上提高性能。在这种情况下，所有写入和更新在主库上，而读操作可以在一个或多个从库上。这种模型可以提高写的性能（因为主库专门用来更新），同时随着从库数量增多也可以极大提高读的速度。</li><li>数据安全性————因为数据被复制到从库，从库能暂停复制，然后进行备份，这样不会破坏主库相关数据</li><li>数据分析————实时数据可以在主库上继续生成，而同时我们可以在从库上进行数据分析，不影响主库性能</li><li>长距离数据分发————可以使用复制技术，给远程网站访问数据备份，而不用一直连着主库</li></ul><p>MySQL 5.7支持不同方式的复制，之前方法是从主库binlog中复制各种事件，需要保证binlog文件及文件中位置在主从间同步。新的方法基于GTID，是事务性的，因此不需要关心这些文件或者文件中的位置，这大大简化了很多复制工作。MySQL使用GTID保证所有主库提交的事务也在从库上执行，从而保证主从一致性。在MySQL 5.7.5及之后版本，GTID记入系统表（mysql.gtid_executed），因此不需要像旧版本依赖binlog来记录。</p><p>MySQL中的复制支持不同类型的同步，最初同步是单向、异步复制（复制过程中主库不关心从库是否接收成功、执行成功），在MySQL 5.7中<code>半同步</code>复制被引入，即在一个事务会话中，主库提交会被阻塞，等待至少一个从库告知它收到并记录了该事务。MySQL 5.7也支持延时复制，即从库可以设置自己延迟主库一定时间。如果有同步复制需求，可以使用MySQL Cluster。</p><p>有很多方法建立服务器之间的复制，但最好的方法，还是需要看你的数据量、存储引擎类型。<br>复制log记录格式主要有两种，基于语句的（记录整个SQL语句）和基于行的（只记录改变的行数据），也可以用第三种，混合类型。MySQL 5.7.7之前版本默认用基于语句的，MySQL 5.7.7及之后版本默认用基于行的。</p><p>复制功能受很多不同选项、配置参数控制，它们控制了复制的核心操作、超时以及哪些DB和表被选择复制。</p><p>你可以用复制来解决很多不同的问题，包括性能、不同DB的备份、系统故障恢复等。</p>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 主从复制 </tag>
            
            <tag> 不会是翻译的吧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL字符集设置</title>
      <link href="/2015/10/29/MySQL%E5%AD%97%E7%AC%A6%E9%9B%86%E8%AE%BE%E7%BD%AE/"/>
      <url>/2015/10/29/MySQL%E5%AD%97%E7%AC%A6%E9%9B%86%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>set names影响下面3个字符集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">"character_set%"</span>;</span><br><span class="line">+--------------------------+------------------------------------------------------+</span><br><span class="line">| Variable_name            | Value                                                |</span><br><span class="line">+--------------------------+------------------------------------------------------+</span><br><span class="line">| character_set_client     | utf8                                                 |</span><br><span class="line">| character_set_connection | utf8                                                 |</span><br><span class="line">| character_set_results    | utf8</span><br></pre></td></tr></table></figure><ul><li>character_set_client影响MySQL服务器对client传过来语句的解析处理</li><li>character_set_connection影响MySQL服务器决定存储数据前是否需要转换编码</li><li>character_set_results影响MySQL服务器返回的结果编码</li></ul><p>总之这3个值就是要一样，还要和客户端一致，所以才有了 set names 这个快捷命令</p>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> MySQL字符集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量设置MIUI收音机频道列表</title>
      <link href="/2015/09/01/%E6%89%B9%E9%87%8F%E8%AE%BE%E7%BD%AEMIUI%E6%94%B6%E9%9F%B3%E6%9C%BA%E9%A2%91%E9%81%93%E5%88%97%E8%A1%A8/"/>
      <url>/2015/09/01/%E6%89%B9%E9%87%8F%E8%AE%BE%E7%BD%AEMIUI%E6%94%B6%E9%9F%B3%E6%9C%BA%E9%A2%91%E9%81%93%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>通过插耳机、打开收音机软件、自动扫描电台，可以得到一系列的频道数据，但频道名称均为“新频道”，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">18,新频道,8870,0</span><br><span class="line">19,新频道,9000,0</span><br><span class="line">20,新频道,9050,0</span><br><span class="line">21,新频道,9080,0</span><br><span class="line">22,新频道,9100,0</span><br><span class="line">23,新频道,9150,0</span><br><span class="line">24,新频道,9190,0</span><br><span class="line">25,新频道,9290,0</span><br><span class="line">26,新频道,9380,0</span><br><span class="line">27,新频道,9450,0</span><br><span class="line">28,新频道,9480,0</span><br><span class="line">29,新频道,9610,0</span><br><span class="line">30,新频道,9660,0</span><br><span class="line">31,新频道,9680,0</span><br><span class="line">32,新频道,9740,0</span><br><span class="line">33,新频道,9930,0</span><br><span class="line">34,新频道,9960,0</span><br><span class="line">35,新频道,10060,0</span><br><span class="line">36,新频道,10180,0</span><br><span class="line">37,新频道,10250,0</span><br><span class="line">38,新频道,10310,0</span><br><span class="line">39,新频道,10390,0</span><br><span class="line">40,新频道,10520,0</span><br><span class="line">41,新频道,10610,0</span><br><span class="line">42,新频道,10660,0</span><br><span class="line">43,新频道,10730,0</span><br><span class="line">44,新频道,8760,0</span><br><span class="line">45,新频道,8800,0</span><br><span class="line">46,呵呵,8810,1</span><br></pre></td></tr></table></figure><p><a href="http://tieba.baidu.com/p/1176987638" target="_blank" rel="noopener">网上找到当地调频频率-频道名称对应数据</a></p><p>整理得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">8760 北京人民广播电台文艺广播</span><br><span class="line">8780 天津娱乐调频</span><br><span class="line">8810 河北音乐广播自在调频</span><br><span class="line">8870 中国国际广播电台CRIHITFM</span><br><span class="line">8920 平谷人民广播电台</span><br><span class="line">8960 旅游时尚广播HOTRADIO</span><br><span class="line">9000 中央人民广播电台音乐之声</span><br><span class="line">9050 中国国际广播电台环球资讯广播</span><br><span class="line">9080 河北经济广播电台</span><br><span class="line">9110 天津生活台</span><br><span class="line">9150 中国国际广播电台EASYFM</span><br><span class="line">9190 河北交通台</span><br><span class="line">9200 天津滨海</span><br><span class="line">9250 中央台音乐之声(天津转播)</span><br><span class="line">9280 延庆人民广播电台</span><br><span class="line">9290 顺义人民广播电台</span><br><span class="line">9320 中央台中国之声(唐山转播)</span><br><span class="line">9350 河北音乐广播自在调频（廊坊转播）</span><br><span class="line">9380 承德人民广播电台新闻台</span><br><span class="line">9410 密云人民广播电台</span><br><span class="line">9430 武清人民广播电台</span><br><span class="line">9450 保定燕赵之声</span><br><span class="line">9470 河北文艺城区及东南部地区</span><br><span class="line">9480 河北文艺广播电台</span><br><span class="line">9510 河北廊坊人民广播电台（旅游时尚广播）新闻台</span><br><span class="line">9570 大厂人民广播电台</span><br><span class="line">9600 宝坻广播评书频道</span><br><span class="line">9620 文安人民广播电台</span><br><span class="line">9630 健康100关爱调频</span><br><span class="line">9660 中央人民广播电台经济之声</span><br><span class="line">9720 天津新闻台</span><br><span class="line">9740 北京人民广播电台音乐广播</span><br><span class="line">9800 中央台经济之声(天津转播)</span><br><span class="line">9840 丰润人民广播电台</span><br><span class="line">9860 大兴人民广播电台阳光调频</span><br><span class="line">9860 大兴人民广播电台</span><br><span class="line">9900 天津人民广播电台音乐台</span><br><span class="line">9930 承德（奇经健康百问）</span><br><span class="line">9960 河北固安广播</span><br><span class="line">9980 宁河人民广播电台</span><br><span class="line">10000 关爱调频</span><br><span class="line">10030 廊坊人民广播电台交通长书频道</span><br><span class="line">10060 北京人民广播电台新闻广播</span><br><span class="line">10070 蓟县人民广播电台</span><br><span class="line">10080 张家口新闻</span><br><span class="line">10100 张家口人民广播电台</span><br><span class="line">10110 玉田人民广播电台</span><br><span class="line">10130 怀柔人民广播电台</span><br><span class="line">10140 天津经济台</span><br><span class="line">10180 中央人民广播电台都市之声</span><br><span class="line">10200 唐山交通文艺台</span><br><span class="line">10250 北京人民广播电台体育广播</span><br><span class="line">10260 高碑店人民广播电台</span><br><span class="line">10290 中央台中国之声(天津转播)</span><br><span class="line">10310 昌平人民广播电台</span><br><span class="line">10360 张家口人民广播电台大地之声</span><br><span class="line">10390 北京人民广播电台交通广播</span><br><span class="line">10460 天津文艺台</span><br><span class="line">10520 河北人民广播电台新闻台</span><br><span class="line">10550 香河长书频道</span><br><span class="line">10550 三河人民广播电台</span><br><span class="line">10580 承德交通文艺台</span><br><span class="line">10610 中央人民广播电台中国之声</span><br><span class="line">10660 中央人民广播电台文艺之声</span><br><span class="line">10680 天津人民广播电台交通台</span><br><span class="line">10700 房山人民广播电台</span><br><span class="line">10730 北京人民广播电台城市管理广播</span><br><span class="line">10770 通州人民广播电台京东调频</span><br><span class="line">10800 廊坊人民广播电台戏曲曲艺频道</span><br></pre></td></tr></table></figure><p>实际通过sqlite导出后修改再导入的方式处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 FMRadio.db .dump &gt;radio.sql</span><br><span class="line">cat 1.csv | <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span> x=`grep <span class="variable">$&#123;line% *&#125;</span> radio.sql`;y=<span class="variable">$&#123;line#* &#125;</span>;<span class="built_in">echo</span> <span class="variable">$&#123;x/新频道/$y&#125;</span>; <span class="keyword">done</span> | sort &gt;tmp.sql</span><br><span class="line"><span class="comment">#将tmp.sql替换radio.sql中相关insert语句，实现频道名称的替换</span></span><br><span class="line">sqlite3 radio.db &lt;radio.sql</span><br><span class="line">mv radio.db FMRadio.db</span><br></pre></td></tr></table></figure><p>收音机APP数据文件位置</p><p><img src="http://ww2.sinaimg.cn/large/4bc2a2bajw1f39tb2aal2j20gm0dmmyk.jpg" alt></p><p>DB中各表，其中station为电台列表数据</p><p><img src="http://ww1.sinaimg.cn/large/4bc2a2bajw1f39srwytjfj20gk0960v2.jpg" alt></p><p>修改后表中数据</p><p><img src="http://ww2.sinaimg.cn/large/4bc2a2bajw1f39srxb0wrj20go0s8jyc.jpg" alt></p><p>再次打开APP得到的电台列表</p><p><img src="http://ww2.sinaimg.cn/large/4bc2a2bajw1f39srxtk0mj20gq0scjti.jpg" alt></p><p>播放界面，越简单越幸福~</p><p><img src="http://ww1.sinaimg.cn/large/4bc2a2bajw1f39srxxni8j20gm0satbd.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlite </tag>
            
            <tag> FM收音机 </tag>
            
            <tag> 手机APP配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Shell</title>
      <link href="/2015/07/28/LeetCode-Shell/"/>
      <url>/2015/07/28/LeetCode-Shell/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problemset/shell/" target="_blank" rel="noopener">问题来源</a></p><h3 id="单词出现次数统计"><a href="#单词出现次数统计" class="headerlink" title="单词出现次数统计"></a>单词出现次数统计</h3><ul><li>计算文本文件words.txt中每个单词的出现次数（按出现次数倒序排列）</li><li>假设words.txt只包含小写字母和空格，每个单词只包含小写字母，单词被一个或多个空格分割；每个单词出现次数唯一</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat words.txt | tr <span class="string">' '</span> <span class="string">'\n'</span> | grep -v <span class="string">"^$"</span> | sort | uniq -c | awk <span class="string">'&#123;print $2,$1&#125;'</span> | sort -nrk2</span><br></pre></td></tr></table></figure><h3 id="有效的电话号码"><a href="#有效的电话号码" class="headerlink" title="有效的电话号码"></a>有效的电话号码</h3><ul><li>文件file.txt中包含一些电话号码（每行一个），写一个一行的shell脚本输出所有有效的电话号码</li><li>假设有效的电话号码只有两种格式：<br>(xxx) xxx-xxxx 或 xxx-xxx-xxxx (x代表一个数字)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file.txt | grep -E <span class="string">"^\([0-9]&#123;3&#125;\) [0-9]&#123;3&#125;-[0-9]&#123;4&#125;$|^[0-9]&#123;3&#125;-[0-9]&#123;3&#125;-[0-9]&#123;4&#125;$"</span></span><br></pre></td></tr></table></figure><h3 id="问题：转置文件内容"><a href="#问题：转置文件内容" class="headerlink" title="问题：转置文件内容"></a>问题：转置文件内容</h3><ul><li>给你一个文本文件file.txt，转置它的内容</li><li>文件中每行记录列数相同，以空格符分隔</li><li>例如，如果file.txt内容如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name age</span><br><span class="line">alice 21</span><br><span class="line">ryan 30</span><br></pre></td></tr></table></figure></li></ul><p>那么你应该输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name alice ryan</span><br><span class="line">age 21 30</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  for (i=1; i&lt;=NF; i++) &#123;</span></span><br><span class="line"><span class="string">    if (NR==1) &#123;</span></span><br><span class="line"><span class="string">      s[i] = $i;</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      s[i] = s[i]" "$i;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">END &#123;</span></span><br><span class="line"><span class="string">  for (i=1; i&lt;=NF; i++) &#123;</span></span><br><span class="line"><span class="string">    print s[i];</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span> file.txt</span><br></pre></td></tr></table></figure><h3 id="输出文件的第十行"><a href="#输出文件的第十行" class="headerlink" title="输出文件的第十行"></a>输出文件的第十行</h3><ul><li>如果文件内容不足10行，你应该输出什么？</li><li>至少有3种不同方法，尽可能思考所有可能性吧~</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">"10p"</span> file.txt</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> shell </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Database</title>
      <link href="/2015/06/16/LeetCode-Database/"/>
      <url>/2015/06/16/LeetCode-Database/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problemset/database/" target="_blank" rel="noopener">问题来源</a></p><p>ps：吐槽下，貌似leetcode升级服务器硬件/软件了，同样的SQL不同时间提交，运行时间截然不同（变快了）。。。</p><h3 id="合并两个表"><a href="#合并两个表" class="headerlink" title="合并两个表"></a>合并两个表</h3><p>表Person, PersonId为主键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| PersonId    | int     |</span><br><span class="line">| FirstName   | varchar |</span><br><span class="line">| LastName    | varchar |</span><br><span class="line">+-------------+---------+</span><br></pre></td></tr></table></figure><p>表Address, AddressId为主键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| AddressId   | int     |</span><br><span class="line">| PersonId    | int     |</span><br><span class="line">| City        | varchar |</span><br><span class="line">| State       | varchar |</span><br><span class="line">+-------------+---------+</span><br></pre></td></tr></table></figure><ul><li>写sql查询FirstName, LastName, City, State</li><li>包含Person中每个人，无论他是否有对应地址</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> p.FirstName,p.LastName,a.City,a.State</span><br><span class="line"><span class="keyword">from</span> Person p <span class="keyword">left</span> <span class="keyword">join</span> Address a <span class="keyword">on</span> p.PersonId=a.PersonId</span><br></pre></td></tr></table></figure><p>TODO：更优解法</p><h3 id="工资第二高"><a href="#工资第二高" class="headerlink" title="工资第二高"></a>工资第二高</h3><p>表Employee</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+--------+</span><br><span class="line">| Id | Salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+----+--------+</span><br></pre></td></tr></table></figure><ul><li>如果没有第二高的工资，则应该 <strong>返回null</strong></li><li>错误思路：order by Salary desc limit 1,1</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(Salary) <span class="keyword">from</span> Employee <span class="keyword">where</span> </span><br><span class="line">Salary &lt;(</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(Salary) <span class="keyword">from</span> Employee</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="工资第n高"><a href="#工资第n高" class="headerlink" title="工资第n高"></a>工资第n高</h3><p>表Employee</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+--------+</span><br><span class="line">| Id | Salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+----+--------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(Salary) <span class="keyword">from</span> (</span><br><span class="line">      <span class="keyword">select</span> t1.Salary <span class="keyword">from</span> Employee t1 <span class="keyword">where</span></span><br><span class="line">      (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> t2.Salary)=N<span class="number">-1</span> <span class="keyword">from</span> Employee t2 <span class="keyword">where</span> t2.Salary&gt;t1.Salary)</span><br><span class="line">) t</span><br></pre></td></tr></table></figure><p>Count+limit+DISTINCT:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.Salary</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Salary <span class="keyword">FROM</span> Employee)e1</span><br><span class="line"><span class="keyword">WHERE</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(Salary) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Salary <span class="keyword">FROM</span> Employee)e2 <span class="keyword">WHERE</span> e1.Salary&lt;e2.Salary</span><br><span class="line">)=N<span class="number">-1</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="分数排名"><a href="#分数排名" class="headerlink" title="分数排名"></a>分数排名</h3><p>表Scores</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+</span><br><span class="line">| Id | Score |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | 3.50  |</span><br><span class="line">| 2  | 3.65  |</span><br><span class="line">| 3  | 4.00  |</span><br><span class="line">| 4  | 3.85  |</span><br><span class="line">| 5  | 4.00  |</span><br><span class="line">| 6  | 3.65  |</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-------+------+</span><br><span class="line">| Score | Rank |</span><br><span class="line">+-------+------+</span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 3.85  | 2    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line">| 3.50  | 4    |</span><br><span class="line">+-------+------+</span><br></pre></td></tr></table></figure><ul><li>排名结果中同样的分数名次应该一样</li><li>名次相同记录后面的名次正常累加，不受名次是否相同、相同记录数影响</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.Score,t.Rank <span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> t1.Score,(<span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> t2.Score) <span class="keyword">from</span> Scores t2 <span class="keyword">where</span> t2.Score&gt;=t1.Score) <span class="keyword">as</span> <span class="keyword">Rank</span></span><br><span class="line"><span class="keyword">from</span> Scores t1</span><br><span class="line">) t</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t.Score <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p>Pre-uniqued:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  Score,</span><br><span class="line">  (<span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">distinct</span> Score s <span class="keyword">FROM</span> Scores) tmp <span class="keyword">WHERE</span> s &gt;= Score) <span class="keyword">Rank</span></span><br><span class="line"><span class="keyword">FROM</span> Scores</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Score <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h3 id="找出连续出现3次的数"><a href="#找出连续出现3次的数" class="headerlink" title="找出连续出现3次的数"></a>找出连续出现3次的数</h3><p>表Logs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+----+-----+</span><br><span class="line">| Id | Num |</span><br><span class="line">+----+-----+</span><br><span class="line">| 1  |  1  |</span><br><span class="line">| 2  |  1  |</span><br><span class="line">| 3  |  1  |</span><br><span class="line">| 4  |  2  |</span><br><span class="line">| 5  |  1  |</span><br><span class="line">| 6  |  2  |</span><br><span class="line">| 7  |  2  |</span><br><span class="line">+----+-----+</span><br></pre></td></tr></table></figure><p>上面示例中只有“1”满足条件<br>MySQL用户变量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">Num</span> <span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">Rank</span>, <span class="keyword">min</span>(<span class="keyword">Num</span>) <span class="keyword">as</span> <span class="keyword">Num</span>, <span class="keyword">count</span>(*) <span class="keyword">as</span> c <span class="keyword">from</span> (</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">Num</span>,@curRank := @curRank + <span class="keyword">IF</span>(@prevNum = <span class="keyword">Num</span>, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">AS</span> <span class="keyword">Rank</span>,@prevNum := <span class="keyword">Num</span></span><br><span class="line">        <span class="keyword">from</span> <span class="keyword">Logs</span> s,</span><br><span class="line">            (<span class="keyword">select</span> @curRank:=<span class="number">0</span>) r,</span><br><span class="line">            (<span class="keyword">select</span> @prevNum:=<span class="number">0</span>) p</span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">Id</span></span><br><span class="line">    ) t1 <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">Rank</span> <span class="keyword">having</span> c&gt;=<span class="number">3</span></span><br><span class="line">) t2;</span><br></pre></td></tr></table></figure><p>sql自连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">DISTINCT</span> l1.Num <span class="keyword">as</span> ConsecutiveNums</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Logs</span> l1, <span class="keyword">Logs</span> l2, <span class="keyword">Logs</span> l3 </span><br><span class="line"><span class="keyword">where</span> l1.Id=l2.Id<span class="number">-1</span> <span class="keyword">and</span> l2.Id=l3.Id<span class="number">-1</span> </span><br><span class="line"><span class="keyword">and</span> l1.Num=l2.Num <span class="keyword">and</span> l2.Num=l3.Num</span><br></pre></td></tr></table></figure><h3 id="比老板工资高的员工"><a href="#比老板工资高的员工" class="headerlink" title="比老板工资高的员工"></a>比老板工资高的员工</h3><p>表Employee</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| Id | Name  | Salary | ManagerId |</span><br><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| 1  | Joe   | 70000  | 3         |</span><br><span class="line">| 2  | Henry | 80000  | 4         |</span><br><span class="line">| 3  | Sam   | 60000  | NULL      |</span><br><span class="line">| 4  | Max   | 90000  | NULL      |</span><br><span class="line">+----+-------+--------+-----------+</span><br></pre></td></tr></table></figure><p>返回结果示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----------+</span><br><span class="line">| Employee |</span><br><span class="line">+----------+</span><br><span class="line">| Joe      |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p>子查询，较慢：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">Name</span> <span class="keyword">from</span> Employee e1</span><br><span class="line"><span class="keyword">where</span> ManagerId <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">and</span> Salary&gt;(<span class="keyword">select</span> <span class="keyword">max</span>(Salary) <span class="keyword">from</span> Employee e2 <span class="keyword">where</span> e2.Id=e1.Managerid)</span><br></pre></td></tr></table></figure><p>自连接，更快：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> E1.Name <span class="keyword">as</span> Employee</span><br><span class="line"><span class="keyword">from</span> Employee <span class="keyword">as</span> E1, Employee <span class="keyword">as</span> E2 </span><br><span class="line"><span class="keyword">where</span> E1.ManagerId = E2.Id <span class="keyword">and</span> E1.Salary &gt; E2.Salary</span><br></pre></td></tr></table></figure><h3 id="找出重复的邮箱地址"><a href="#找出重复的邮箱地址" class="headerlink" title="找出重复的邮箱地址"></a>找出重复的邮箱地址</h3><p>表Person</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+---------+</span><br><span class="line">| Id | Email   |</span><br><span class="line">+----+---------+</span><br><span class="line">| 1  | a@b.com |</span><br><span class="line">| 2  | c@d.com |</span><br><span class="line">| 3  | a@b.com |</span><br><span class="line">+----+---------+</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+---------+</span><br><span class="line">| Email   |</span><br><span class="line">+---------+</span><br><span class="line">| a@b.com |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure><p>使用group by较快：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Email</span><br><span class="line"><span class="keyword">from</span> Person</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> Email</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="从不下单的人"><a href="#从不下单的人" class="headerlink" title="从不下单的人"></a>从不下单的人</h3><p>表Customers</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+</span><br><span class="line">| Id | Name  |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | Joe   |</span><br><span class="line">| 2  | Henry |</span><br><span class="line">| 3  | Sam   |</span><br><span class="line">| 4  | Max   |</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><p>表Orders</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+------------+</span><br><span class="line">| Id | CustomerId |</span><br><span class="line">+----+------------+</span><br><span class="line">| 1  | 3          |</span><br><span class="line">| 2  | 1          |</span><br><span class="line">+----+------------+</span><br></pre></td></tr></table></figure><p>示例返回</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-----------+</span><br><span class="line">| Customers |</span><br><span class="line">+-----------+</span><br><span class="line">| Henry     |</span><br><span class="line">| Max       |</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure><p>优化版子查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.Name <span class="keyword">as</span> Customers</span><br><span class="line"><span class="keyword">from</span> Customers A</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> Orders B <span class="keyword">WHERE</span> A.Id = B.CustomerId <span class="keyword">limit</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="各部门最高工资"><a href="#各部门最高工资" class="headerlink" title="各部门最高工资"></a>各部门最高工资</h3><p>表Employee</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| 1  | Joe   | 70000  | 1            |</span><br><span class="line">| 2  | Henry | 80000  | 2            |</span><br><span class="line">| 3  | Sam   | 60000  | 2            |</span><br><span class="line">| 4  | Max   | 90000  | 1            |</span><br><span class="line">+----+-------+--------+--------------+</span><br></pre></td></tr></table></figure><p>表Department</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+----------+</span><br><span class="line">| Id | Name     |</span><br><span class="line">+----+----------+</span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line">+----+----------+</span><br></pre></td></tr></table></figure><p>示例返回</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------------+----------+--------+</span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line">| Sales      | Henry    | 80000  |</span><br><span class="line">+------------+----------+--------+</span><br></pre></td></tr></table></figure><p>相关子查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> d.Name,t.Name,t.Salary</span><br><span class="line"><span class="keyword">from</span> Department d,(<span class="keyword">select</span> e1.Name,e1.Salary,e1.DepartmentId <span class="keyword">from</span> Employee e1,(<span class="keyword">select</span> DepartmentId,<span class="keyword">max</span>(Salary) <span class="keyword">as</span> Salary <span class="keyword">from</span> Employee <span class="keyword">group</span> <span class="keyword">by</span> DepartmentId) e2 <span class="keyword">where</span> e1.Salary=e2.Salary <span class="keyword">and</span> e1.DepartmentId=e2.DepartmentId) t</span><br><span class="line"><span class="keyword">where</span> d.Id=t.DepartmentId</span><br></pre></td></tr></table></figure><p>优化版子查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> D.Name <span class="keyword">as</span> Department,A.Name <span class="keyword">as</span> Employee,A.Salary </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">Employee A,</span><br><span class="line">Department D   </span><br><span class="line"><span class="keyword">WHERE</span> A.DepartmentId = D.Id </span><br><span class="line">  <span class="keyword">AND</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> Employee B <span class="keyword">WHERE</span> B.Salary &gt; A.Salary <span class="keyword">AND</span> A.DepartmentId = B.DepartmentId)</span><br></pre></td></tr></table></figure><h3 id="各部门前三高工资"><a href="#各部门前三高工资" class="headerlink" title="各部门前三高工资"></a>各部门前三高工资</h3><p>表Employee</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| 1  | Joe   | 70000  | 1            |</span><br><span class="line">| 2  | Henry | 80000  | 2            |</span><br><span class="line">| 3  | Sam   | 60000  | 2            |</span><br><span class="line">| 4  | Max   | 90000  | 1            |</span><br><span class="line">| 5  | Janet | 69000  | 1            |</span><br><span class="line">| 6  | Randy | 85000  | 1            |</span><br><span class="line">+----+-------+--------+--------------+</span><br></pre></td></tr></table></figure><p>表Department</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+----------+</span><br><span class="line">| Id | Name     |</span><br><span class="line">+----+----------+</span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line">+----+----------+</span><br></pre></td></tr></table></figure><p>示例返回</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------------+----------+--------+</span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line">| IT         | Randy    | 85000  |</span><br><span class="line">| IT         | Joe      | 70000  |</span><br><span class="line">| Sales      | Henry    | 80000  |</span><br><span class="line">| Sales      | Sam      | 60000  |</span><br><span class="line">+------------+----------+--------+</span><br></pre></td></tr></table></figure><p>相关子查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> d.Name,e.Name,e.Salary</span><br><span class="line"><span class="keyword">from</span> Department d,Employee e</span><br><span class="line"><span class="keyword">where</span> d.Id=e.DepartmentId</span><br><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> e1.Salary) <span class="keyword">from</span> Employee e1 <span class="keyword">where</span> e1.DepartmentId=e.DepartmentId <span class="keyword">and</span> e1.Salary&gt;e.Salary) &lt; <span class="number">3</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> d.Id,e.Salary <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p>不使用order by：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> d.Name Department, e1.Name Employee, e1.Salary</span><br><span class="line"><span class="keyword">from</span> Employee e1 </span><br><span class="line"><span class="keyword">join</span> Department d</span><br><span class="line"><span class="keyword">on</span> e1.DepartmentId = d.Id</span><br><span class="line"><span class="keyword">where</span> <span class="number">3</span> &gt; (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span>(e2.Salary)) </span><br><span class="line">                  <span class="keyword">from</span> Employee e2 </span><br><span class="line">                  <span class="keyword">where</span> e2.Salary &gt; e1.Salary </span><br><span class="line">                  <span class="keyword">and</span> e1.DepartmentId = e2.DepartmentId</span><br><span class="line">                  );</span><br></pre></td></tr></table></figure><h3 id="删除重复邮箱"><a href="#删除重复邮箱" class="headerlink" title="删除重复邮箱"></a>删除重复邮箱</h3><p>表Person,主键为Id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+------------------+</span><br><span class="line">| Id | Email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">| 3  | john@example.com |</span><br><span class="line">+----+------------------+</span><br></pre></td></tr></table></figure><p>保留最小id记录，示例结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+------------------+</span><br><span class="line">| Id | Email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">+----+------------------+</span><br></pre></td></tr></table></figure><p><a href="http://dev.mysql.com/doc/refman/5.7/en/delete.html" target="_blank" rel="noopener">Multi-Table Deletes</a></p><p>只有“FROM”前指定的表中的记录被删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> p1</span><br><span class="line"><span class="keyword">FROM</span> Person p1, Person p2</span><br><span class="line"><span class="keyword">WHERE</span> p1.Email = p2.Email <span class="keyword">AND</span></span><br><span class="line">p1.Id &gt; p2.Id</span><br></pre></td></tr></table></figure><h3 id="找出比前一天温度高的日期"><a href="#找出比前一天温度高的日期" class="headerlink" title="找出比前一天温度高的日期"></a>找出比前一天温度高的日期</h3><p>表Weather</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------+------------+------------------+</span><br><span class="line">| Id(INT) | Date(DATE) | Temperature(INT) |</span><br><span class="line">+---------+------------+------------------+</span><br><span class="line">|       1 | 2015-01-01 |               10 |</span><br><span class="line">|       2 | 2015-01-02 |               25 |</span><br><span class="line">|       3 | 2015-01-03 |               20 |</span><br><span class="line">|       4 | 2015-01-04 |               30 |</span><br><span class="line">+---------+------------+------------------+</span><br></pre></td></tr></table></figure><ul><li>TODO 简化问题的话，假设表中日期均连续且顺序与id一一对应，这样条件可以转化为Id比前一个大1</li></ul><p>示例结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+</span><br><span class="line">| Id |</span><br><span class="line">+----+</span><br><span class="line">|  2 |</span><br><span class="line">|  4 |</span><br><span class="line">+----+</span><br></pre></td></tr></table></figure><p><a href="http://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_datediff" target="_blank" rel="noopener">日期函数</a>并不常用，还可以用上DATEDIFF等</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> w1.Id</span><br><span class="line"><span class="keyword">from</span> Weather w1,Weather w2</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">date_sub</span>(w1.<span class="string">`Date`</span>,<span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">day</span>)=w2.<span class="string">`Date`</span> <span class="keyword">and</span> w1.Temperature&gt;w2.Temperature</span><br></pre></td></tr></table></figure><h3 id="计算退票率"><a href="#计算退票率" class="headerlink" title="计算退票率"></a>计算退票率</h3><p>表Trips</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+----+-----------+-----------+---------+--------------------+----------+</span><br><span class="line">| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|</span><br><span class="line">+----+-----------+-----------+---------+--------------------+----------+</span><br><span class="line">| 1  |     1     |    10     |    1    |     completed      |2013-10-01|</span><br><span class="line">| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|</span><br><span class="line">| 3  |     3     |    12     |    6    |     completed      |2013-10-01|</span><br><span class="line">| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|</span><br><span class="line">| 5  |     1     |    10     |    1    |     completed      |2013-10-02|</span><br><span class="line">| 6  |     2     |    11     |    6    |     completed      |2013-10-02|</span><br><span class="line">| 7  |     3     |    12     |    6    |     completed      |2013-10-02|</span><br><span class="line">| 8  |     2     |    12     |    12   |     completed      |2013-10-03|</span><br><span class="line">| 9  |     3     |    10     |    12   |     completed      |2013-10-03| </span><br><span class="line">| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|</span><br><span class="line">+----+-----------+-----------+---------+--------------------+----------+</span><br></pre></td></tr></table></figure><ul><li>Id为主键</li><li>Client_Id和Driver_Id都是Users表Users_Id字段的外键</li><li>Status为ENUM类型，取值为(‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’)</li></ul><p>表Users</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+----------+--------+--------+</span><br><span class="line">| Users_Id | Banned |  Role  |</span><br><span class="line">+----------+--------+--------+</span><br><span class="line">|    1     |   No   | client |</span><br><span class="line">|    2     |   Yes  | client |</span><br><span class="line">|    3     |   No   | client |</span><br><span class="line">|    4     |   No   | client |</span><br><span class="line">|    10    |   No   | driver |</span><br><span class="line">|    11    |   No   | driver |</span><br><span class="line">|    12    |   No   | driver |</span><br><span class="line">|    13    |   No   | driver |</span><br><span class="line">+----------+--------+--------+</span><br></pre></td></tr></table></figure><ul><li>Users_Id为主键</li><li>Role为ENUM类型，取值为(‘client’, ‘driver’, ‘partner’)</li></ul><p>现在需要查询从2013-10-01到2013-10-03每天未被封禁用户的退票率(四舍五入，保留两位小数)，示例结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------------+-------------------+</span><br><span class="line">|     Day    | Cancellation Rate |</span><br><span class="line">+------------+-------------------+</span><br><span class="line">| 2013-10-01 |       0.33        |</span><br><span class="line">| 2013-10-02 |       0.00        |</span><br><span class="line">| 2013-10-03 |       0.50        |</span><br><span class="line">+------------+-------------------+</span><br></pre></td></tr></table></figure><ul><li>退款状态为cancelled_by_client、cancelled_by_driver</li><li>封禁用户Banned为Yes</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Request_at <span class="keyword">as</span> <span class="keyword">Day</span>,<span class="keyword">round</span>(<span class="keyword">sum</span>(<span class="keyword">if</span>(<span class="keyword">Status</span> <span class="keyword">in</span> (<span class="string">'cancelled_by_client'</span>, <span class="string">'cancelled_by_driver'</span>),<span class="number">1</span>,<span class="number">0</span>))/<span class="keyword">count</span>(*),<span class="number">2</span>) <span class="keyword">as</span> <span class="string">`Cancellation Rate`</span></span><br><span class="line"><span class="keyword">from</span> Trips</span><br><span class="line"><span class="keyword">where</span> Client_Id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> Users_Id <span class="keyword">from</span> <span class="keyword">Users</span> <span class="keyword">where</span> Banned=<span class="string">'Yes'</span>)</span><br><span class="line"><span class="keyword">and</span> Request_at <span class="keyword">between</span> <span class="string">'2013-10-01'</span> <span class="keyword">and</span> <span class="string">'2013-10-03'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> Request_at;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 刷题 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人人网文章回顾</title>
      <link href="/2013/12/31/%E6%A0%A1%E5%86%85%E6%96%87%E7%AB%A0%E5%BD%92%E6%A1%A3/"/>
      <url>/2013/12/31/%E6%A0%A1%E5%86%85%E6%96%87%E7%AB%A0%E5%BD%92%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="2013-07-13-紫禁之外，仰山之巅～"><a href="#2013-07-13-紫禁之外，仰山之巅～" class="headerlink" title="2013-07-13 紫禁之外，仰山之巅～"></a>2013-07-13 紫禁之外，仰山之巅～</h3><p><img src="http://ww2.sinaimg.cn/large/4bc2a2bajw1f39srvt2stj20dx0ikq6b.jpg" alt></p><h3 id="2013-06-29-Helianthus-annuus"><a href="#2013-06-29-Helianthus-annuus" class="headerlink" title="2013-06-29 Helianthus annuus"></a>2013-06-29 Helianthus annuus</h3><p><img src="http://ww1.sinaimg.cn/large/4bc2a2bajw1f39srsbc9uj20k00qo43u.jpg" alt><br><img src="http://ww4.sinaimg.cn/large/4bc2a2bajw1f39srsmclsj20k00f0n16.jpg" alt><br><img src="http://ww2.sinaimg.cn/large/4bc2a2bajw1f39srtg0xjj20k00f0gpp.jpg" alt><br><img src="http://ww4.sinaimg.cn/large/4bc2a2bajw1f39srumcvaj20k00f0jvr.jpg" alt><br><img src="http://ww3.sinaimg.cn/large/4bc2a2bajw1f39srtblpfj20k00f00x4.jpg" alt><br><img src="http://ww3.sinaimg.cn/large/4bc2a2bajw1f39srtux7qj20k00f0gpz.jpg" alt><br><img src="http://ww4.sinaimg.cn/large/4bc2a2bajw1f39sru50ftj20k00f042h.jpg" alt></p><h3 id="2013-06-26-生命不息，刷机不止"><a href="#2013-06-26-生命不息，刷机不止" class="headerlink" title="2013-06-26 生命不息，刷机不止"></a>2013-06-26 生命不息，刷机不止</h3><p><img src="http://ww3.sinaimg.cn/large/4bc2a2bajw1f39srnu5zoj20c80lqjsq.jpg" alt></p><p>玩android的低级水平，生命不息，刷机不止</p><h3 id="2013-06-10-我们的毕业论文都弱爆了，呵呵"><a href="#2013-06-10-我们的毕业论文都弱爆了，呵呵" class="headerlink" title="2013-06-10 我们的毕业论文都弱爆了，呵呵~"></a>2013-06-10 我们的毕业论文都弱爆了，呵呵~</h3><p><img src="http://ww3.sinaimg.cn/large/4bc2a2bajw1f39srrb29qj20k00dewgl.jpg" alt></p><h3 id="2013-05-31-童年少年青年"><a href="#2013-05-31-童年少年青年" class="headerlink" title="2013-05-31 童年少年青年"></a>2013-05-31 童年少年青年</h3><p><img src="http://ww1.sinaimg.cn/large/4bc2a2bajw1f39srv3md4j208c0c93yq.jpg" alt></p><p>奇怪的是，不知为什么在我小的时候，我极力装得象个大人；而当我已经不再是小孩的时候，我又希望象个孩子。儿童节快乐:-)</p><h3 id="2013-05-14-分享《好大爷要走了，在北邮待了八年，他舍不得，他哭了。为了在…》"><a href="#2013-05-14-分享《好大爷要走了，在北邮待了八年，他舍不得，他哭了。为了在…》" class="headerlink" title="2013-05-14 分享《好大爷要走了，在北邮待了八年，他舍不得，他哭了。为了在…》"></a>2013-05-14 分享《好大爷要走了，在北邮待了八年，他舍不得，他哭了。为了在…》</h3><h3 id="2013-01-20-分享《中财第一届艺术节2013新年联欢晚会《唐…》"><a href="#2013-01-20-分享《中财第一届艺术节2013新年联欢晚会《唐…》" class="headerlink" title="2013-01-20 分享《中财第一届艺术节2013新年联欢晚会《唐…》"></a>2013-01-20 分享《中财第一届艺术节2013新年联欢晚会《唐…》</h3><h3 id="2013-01-15-分享《风姿花传-谷村新司-高清MV-音悦台》"><a href="#2013-01-15-分享《风姿花传-谷村新司-高清MV-音悦台》" class="headerlink" title="2013-01-15 分享《风姿花传-谷村新司 高清MV-音悦台》"></a>2013-01-15 分享《风姿花传-谷村新司 高清MV-音悦台》</h3><h3 id="2013-01-12-末日后的北京，空气实在不怎么样。。"><a href="#2013-01-12-末日后的北京，空气实在不怎么样。。" class="headerlink" title="2013-01-12 末日后的北京，空气实在不怎么样。。"></a>2013-01-12 末日后的北京，空气实在不怎么样。。</h3><h3 id="2012-12-23-10亿"><a href="#2012-12-23-10亿" class="headerlink" title="2012-12-23 10亿"></a>2012-12-23 10亿</h3><p><img src="http://ww1.sinaimg.cn/large/4bc2a2bajw1f39srqqmeaj20i5080wf6.jpg" alt></p><h3 id="2012-12-23-滑雪"><a href="#2012-12-23-滑雪" class="headerlink" title="2012-12-23 滑雪"></a>2012-12-23 滑雪</h3><p>再次滑雪归来，摔的更少了，晚上和白天果然不是一个感觉~</p><h3 id="2012-11-20-分享《2012TVB45周年台庆-01》"><a href="#2012-11-20-分享《2012TVB45周年台庆-01》" class="headerlink" title="2012-11-20 分享《2012TVB45周年台庆-01》"></a>2012-11-20 分享《2012TVB45周年台庆-01》</h3><h3 id="2012-11-09-音乐声、欢呼声、掌声同时响起，测试声场-《Hotel-California-The-Eagles》"><a href="#2012-11-09-音乐声、欢呼声、掌声同时响起，测试声场-《Hotel-California-The-Eagles》" class="headerlink" title="2012-11-09 音乐声、欢呼声、掌声同时响起，测试声场 《Hotel California -The Eagles》"></a>2012-11-09 音乐声、欢呼声、掌声同时响起，测试声场 《Hotel California -The Eagles》</h3><h3 id="2012-11-08-弦乐与钢琴配乐，测试高频表现-分享《偏偏喜欢你-陈百强》"><a href="#2012-11-08-弦乐与钢琴配乐，测试高频表现-分享《偏偏喜欢你-陈百强》" class="headerlink" title="2012-11-08 弦乐与钢琴配乐，测试高频表现 分享《偏偏喜欢你-陈百强》"></a>2012-11-08 弦乐与钢琴配乐，测试高频表现 分享《偏偏喜欢你-陈百强》</h3><h3 id="2012-10-16-打开电脑看电影，国家广播电影电视总局电影卫星频道节目制作中心-版权所有-分享《沈从文《边城》http-www-m19-》"><a href="#2012-10-16-打开电脑看电影，国家广播电影电视总局电影卫星频道节目制作中心-版权所有-分享《沈从文《边城》http-www-m19-》" class="headerlink" title="2012-10-16 打开电脑看电影，国家广播电影电视总局电影卫星频道节目制作中心 版权所有  分享《沈从文《边城》http://www.m19...》"></a>2012-10-16 打开电脑看电影，国家广播电影电视总局电影卫星频道节目制作中心 版权所有  分享《沈从文《边城》<a href="http://www.m19...》" target="_blank" rel="noopener">http://www.m19...》</a></h3><h3 id="2012-10-15-科技论文在线"><a href="#2012-10-15-科技论文在线" class="headerlink" title="2012-10-15 科技论文在线"></a>2012-10-15 科技论文在线</h3><p><img src="http://ww2.sinaimg.cn/large/4bc2a2bajw1f39srrkuhdj20jz06pt98.jpg" alt></p><p>科技论文在线还有这个作用。。。如果是真的，那也不枉我3天写三篇的速度~~</p><h3 id="2012-10-14-分享《《想把我唱给你听》中南林业科技大学，…》"><a href="#2012-10-14-分享《《想把我唱给你听》中南林业科技大学，…》" class="headerlink" title="2012-10-14 分享《《想把我唱给你听》中南林业科技大学，…》"></a>2012-10-14 分享《《想把我唱给你听》中南林业科技大学，…》</h3><h3 id="2012-08-27-最后一集分享《你猜你猜你猜猜-20120818-艺人模仿功力…》"><a href="#2012-08-27-最后一集分享《你猜你猜你猜猜-20120818-艺人模仿功力…》" class="headerlink" title="2012-08-27 最后一集分享《你猜你猜你猜猜-20120818-艺人模仿功力…》"></a>2012-08-27 最后一集分享《你猜你猜你猜猜-20120818-艺人模仿功力…》</h3><h3 id="2012-06-19-别了北邮人论坛版主"><a href="#2012-06-19-别了北邮人论坛版主" class="headerlink" title="2012-06-19 别了北邮人论坛版主"></a>2012-06-19 别了北邮人论坛版主</h3><p><img src="http://ww2.sinaimg.cn/large/4bc2a2bajw1f39srplzcmj20ew0b20u5.jpg" alt></p><h3 id="2012-06-10-和野人帮的xdjm还是有差距啊"><a href="#2012-06-10-和野人帮的xdjm还是有差距啊" class="headerlink" title="2012-06-10 和野人帮的xdjm还是有差距啊~~"></a>2012-06-10 和野人帮的xdjm还是有差距啊~~</h3><p><img src="http://ww4.sinaimg.cn/large/4bc2a2bajw1f39srw59ymj20k00b875z.jpg" alt></p><h3 id="2012-05-08-分享《TVB电视剧《醉打金枝》主题曲》"><a href="#2012-05-08-分享《TVB电视剧《醉打金枝》主题曲》" class="headerlink" title="2012-05-08 分享《TVB电视剧《醉打金枝》主题曲》"></a>2012-05-08 分享《TVB电视剧《醉打金枝》主题曲》</h3><h3 id="2012-05-03-Video-chat-right-from-Gmail"><a href="#2012-05-03-Video-chat-right-from-Gmail" class="headerlink" title="2012-05-03 Video chat right from Gmail"></a>2012-05-03 Video chat right from Gmail</h3><p><img src="http://ww3.sinaimg.cn/large/4bc2a2bajw1f39srr04drj20k0097765.jpg" alt></p><h3 id="2012-04-24-分享《金装四大才子-主题曲-君子好逑-完整版M》"><a href="#2012-04-24-分享《金装四大才子-主题曲-君子好逑-完整版M》" class="headerlink" title="2012-04-24 分享《金装四大才子 主题曲 君子好逑 完整版M》"></a>2012-04-24 分享《金装四大才子 主题曲 君子好逑 完整版M》</h3><h3 id="2012-04-25-分享《TVB主题曲视频集锦-状王宋世杰Ⅰ》"><a href="#2012-04-25-分享《TVB主题曲视频集锦-状王宋世杰Ⅰ》" class="headerlink" title="2012-04-25 分享《TVB主题曲视频集锦].状王宋世杰Ⅰ》"></a>2012-04-25 分享《TVB主题曲视频集锦].状王宋世杰Ⅰ》</h3><h3 id="2012-04-13-怀念通过ipv6在youtube上看1080p的日子～～分享《寶貝對不起》"><a href="#2012-04-13-怀念通过ipv6在youtube上看1080p的日子～～分享《寶貝對不起》" class="headerlink" title="2012-04-13 怀念通过ipv6在youtube上看1080p的日子～～分享《寶貝對不起》"></a>2012-04-13 怀念通过ipv6在youtube上看1080p的日子～～分享《寶貝對不起》</h3><h3 id="2012-04-02-我的第一台Mac"><a href="#2012-04-02-我的第一台Mac" class="headerlink" title="2012-04-02 我的第一台Mac"></a>2012-04-02 我的第一台Mac</h3><p><img src="http://ww2.sinaimg.cn/large/4bc2a2bajw1f39srqffsxj20k00cignz.jpg" alt></p><h3 id="2012-03-26-从学校走向社会"><a href="#2012-03-26-从学校走向社会" class="headerlink" title="2012-03-26 从学校走向社会"></a>2012-03-26 从学校走向社会</h3><p><img src="http://ww1.sinaimg.cn/large/4bc2a2bajw1f39srovyi1j20k00brtbd.jpg" alt><br><img src="http://ww3.sinaimg.cn/large/4bc2a2bajw1f39srp5bi7j20k00boq5b.jpg" alt></p><p>别了<del>~</del></p><h3 id="2012-03-21-毕业了"><a href="#2012-03-21-毕业了" class="headerlink" title="2012-03-21 毕业了"></a>2012-03-21 毕业了</h3><p><img src="http://ww2.sinaimg.cn/large/4bc2a2bajw1f39srodpekj20k00f075y.jpg" alt></p><p>自己动手贴上照片，准备毕业，bless～</p><h3 id="2012-03-08-The-connection-will-never-be-reset-with-the-help-of-IPv6……………"><a href="#2012-03-08-The-connection-will-never-be-reset-with-the-help-of-IPv6……………" class="headerlink" title="2012-03-08 The connection will never be reset with the help of IPv6…………….."></a>2012-03-08 The connection will never be reset with the help of IPv6……………..</h3><h3 id="2012-02-29-分享《S-E-N-S-神思者-kyara伽罗》"><a href="#2012-02-29-分享《S-E-N-S-神思者-kyara伽罗》" class="headerlink" title="2012-02-29 分享《S.E.N.S(神思者) - kyara伽罗》"></a>2012-02-29 分享《S.E.N.S(神思者) - kyara伽罗》</h3><h3 id="2012-02-22-女孩儿的奇妙现象"><a href="#2012-02-22-女孩儿的奇妙现象" class="headerlink" title="2012-02-22 女孩儿的奇妙现象"></a>2012-02-22 女孩儿的奇妙现象</h3><p><img src="http://ww3.sinaimg.cn/large/4bc2a2bajw1f39srrw4oij20c30fyt9w.jpg" alt></p><p>1, 盯着照片上女孩儿鼻子上的红点30秒钟 2，将你的目光移到墙面或较平的表面 3，快速眨动你的眼睛，美妙就在这一刻发生，你看见了什么？推荐给朋友测试哦！ 奇妙现象的原理解释 &gt;&gt;&gt;</p><h3 id="2012-01-07-终于逮住一条漏网之鱼。。。"><a href="#2012-01-07-终于逮住一条漏网之鱼。。。" class="headerlink" title="2012-01-07 终于逮住一条漏网之鱼。。。"></a>2012-01-07 终于逮住一条漏网之鱼。。。</h3><p><img src="http://ww3.sinaimg.cn/large/4bc2a2bajw1f39srnkl2qj20j005475b.jpg" alt></p><h3 id="2011-12-31-23-59-跟风，2011年总结"><a href="#2011-12-31-23-59-跟风，2011年总结" class="headerlink" title="2011-12-31 23:59 跟风，2011年总结"></a>2011-12-31 23:59 跟风，2011年总结</h3><p>站在天寒地冻的2011年结尾，在寒风凛冽的北京，我们一起眺望传说中的2012，哪怕风<br>雪已经离我们远去。</p><p>今日无话可说</p><p>用四个字总结你的2011吧：兔年大吉。</p><h3 id="2011-12-13-22-46-上传了186张照片至TVB"><a href="#2011-12-13-22-46-上传了186张照片至TVB" class="headerlink" title="2011-12-13 22:46 上传了186张照片至TVB"></a>2011-12-13 22:46 上传了186张照片至TVB</h3><h3 id="2011-11-10-20-10-1111征友"><a href="#2011-11-10-20-10-1111征友" class="headerlink" title="2011-11-10 20:10 1111征友"></a>2011-11-10 20:10 1111征友</h3><p><img src="http://ww1.sinaimg.cn/large/4bc2a2bajw1f39srnk6waj20go0ciabj.jpg" alt></p><p><a href="http://bbs.byr.cn/article/Friends/898864" target="_blank" rel="noopener">BYR帖子链接</a></p><h3 id="2011-08-29-01-44-分享《secret-of-my-heart》"><a href="#2011-08-29-01-44-分享《secret-of-my-heart》" class="headerlink" title="2011-08-29 01:44 分享《secret of my heart》"></a>2011-08-29 01:44 分享《secret of my heart》</h3><h3 id="2011-08-06-00-35-分享《Catch-The-Eels》"><a href="#2011-08-06-00-35-分享《Catch-The-Eels》" class="headerlink" title="2011-08-06 00:35 分享《Catch The Eels》"></a>2011-08-06 00:35 分享《Catch The Eels》</h3><h3 id="2011-08-05-09-49-小白鼠，提前进入十月"><a href="#2011-08-05-09-49-小白鼠，提前进入十月" class="headerlink" title="2011-08-05 09:49 小白鼠，提前进入十月"></a>2011-08-05 09:49 小白鼠，提前进入十月</h3><p><img src="http://ww4.sinaimg.cn/large/4bc2a2bajw1f39srve41xj208x043jri.jpg" alt></p><h3 id="2011-06-10-21-17-分享《David-Garrett-He’s-a-Pirate-超清版》"><a href="#2011-06-10-21-17-分享《David-Garrett-He’s-a-Pirate-超清版》" class="headerlink" title="2011-06-10 21:17 分享《David Garrett -He’s a Pirate 超清版》"></a>2011-06-10 21:17 分享《David Garrett -He’s a Pirate 超清版》</h3><h3 id="2011-03-08-23-06-分享《M2M-The-Day-You-Went-Away》"><a href="#2011-03-08-23-06-分享《M2M-The-Day-You-Went-Away》" class="headerlink" title="2011-03-08 23:06 分享《M2M-The Day You Went Away》"></a>2011-03-08 23:06 分享《M2M-The Day You Went Away》</h3><h3 id="2011-03-02-23-46-linux下如何让cpu呈现优美的正弦曲线呢"><a href="#2011-03-02-23-46-linux下如何让cpu呈现优美的正弦曲线呢" class="headerlink" title="2011-03-02 23:46 linux下如何让cpu呈现优美的正弦曲线呢"></a>2011-03-02 23:46 linux下如何让cpu呈现优美的正弦曲线呢</h3><p><img src="http://ww2.sinaimg.cn/large/4bc2a2bajw1f39srpudqsj204c038wej.jpg" alt></p><h3 id="2011-02-27-22-17-分享《MLTR-Fairy-Tale》"><a href="#2011-02-27-22-17-分享《MLTR-Fairy-Tale》" class="headerlink" title="2011-02-27 22:17 分享《MLTR-Fairy Tale》"></a>2011-02-27 22:17 分享《MLTR-Fairy Tale》</h3><h3 id="2010-08-26-20-15-分享《O-Zone-Dragostea-Din-Tei》"><a href="#2010-08-26-20-15-分享《O-Zone-Dragostea-Din-Tei》" class="headerlink" title="2010-08-26 20:15 分享《O-Zone - Dragostea Din Tei》"></a>2010-08-26 20:15 分享《O-Zone - Dragostea Din Tei》</h3><h3 id="2010-07-08-22-45-分享《The-Making-Of-Waka-Waka…》"><a href="#2010-07-08-22-45-分享《The-Making-Of-Waka-Waka…》" class="headerlink" title="2010-07-08 22:45 分享《The Making Of Waka Waka…》"></a>2010-07-08 22:45 分享《The Making Of Waka Waka…》</h3><h3 id="2010-07-08-22-36-分享《《旗开得胜》-Wavin’Flag》"><a href="#2010-07-08-22-36-分享《《旗开得胜》-Wavin’Flag》" class="headerlink" title="2010-07-08 22:36 分享《《旗开得胜》 Wavin’Flag》"></a>2010-07-08 22:36 分享《《旗开得胜》 Wavin’Flag》</h3><h3 id="2010-06-10-20-45-分享《夏天真的到了，推荐一首灰常清新灰常好听灰常夏天的歌，听着好像在床上打滚moumoon-Sunshine-Girl》"><a href="#2010-06-10-20-45-分享《夏天真的到了，推荐一首灰常清新灰常好听灰常夏天的歌，听着好像在床上打滚moumoon-Sunshine-Girl》" class="headerlink" title="2010-06-10 20:45 分享《夏天真的到了，推荐一首灰常清新灰常好听灰常夏天的歌，听着好像在床上打滚moumoon - Sunshine Girl》"></a>2010-06-10 20:45 分享《夏天真的到了，推荐一首灰常清新灰常好听灰常夏天的歌，听着好像在床上打滚moumoon - Sunshine Girl》</h3><h3 id="2010-06-07-23-20-分享《罗大佑-皇后大道东》"><a href="#2010-06-07-23-20-分享《罗大佑-皇后大道东》" class="headerlink" title="2010-06-07 23:20 分享《罗大佑-皇后大道东》"></a>2010-06-07 23:20 分享《罗大佑-皇后大道东》</h3><h3 id="2010-05-20-22-43-上传了29张照片至【六小龄童】和孙悟空一起品西游"><a href="#2010-05-20-22-43-上传了29张照片至【六小龄童】和孙悟空一起品西游" class="headerlink" title="2010-05-20 22:43 上传了29张照片至【六小龄童】和孙悟空一起品西游"></a>2010-05-20 22:43 上传了29张照片至【六小龄童】和孙悟空一起品西游</h3><h3 id="2010-05-14-22-07-安装Mac-OS"><a href="#2010-05-14-22-07-安装Mac-OS" class="headerlink" title="2010-05-14 22:07 安装Mac OS"></a>2010-05-14 22:07 安装Mac OS</h3><p><img src="/2013/12/31/校内文章归档/5f500649.png" alt><br><img src="/2013/12/31/校内文章归档/523abd12.png" alt></p><h3 id="2010-01-10-17-17-发表日志《追忆”我”那些逝去的考研岁月—考研一周年纪念》"><a href="#2010-01-10-17-17-发表日志《追忆”我”那些逝去的考研岁月—考研一周年纪念》" class="headerlink" title="2010-01-10 17:17 发表日志《追忆”我”那些逝去的考研岁月—考研一周年纪念》"></a>2010-01-10 17:17 发表日志《<a href="/2010/01/10/考研岁月">追忆”我”那些逝去的考研岁月—考研一周年纪念</a>》</h3><h3 id="2009-06-29-15-53-发表日志《102，我们的回忆录v19-0》"><a href="#2009-06-29-15-53-发表日志《102，我们的回忆录v19-0》" class="headerlink" title="2009-06-29 15:53 发表日志《102，我们的回忆录v19.0》"></a>2009-06-29 15:53 发表日志《<a href="/2009/06/29/102回忆录">102，我们的回忆录v19.0</a>》</h3><h3 id="2009-03-24-放眼江湖，分享《长路漫漫伴你闯》"><a href="#2009-03-24-放眼江湖，分享《长路漫漫伴你闯》" class="headerlink" title="2009-03-24 放眼江湖，分享《长路漫漫伴你闯》"></a>2009-03-24 放眼江湖，分享《长路漫漫伴你闯》</h3>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校内文章归档 </tag>
            
            <tag> 微博图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>占位</title>
      <link href="/2013/02/17/%E5%8D%A0%E4%BD%8D2013/"/>
      <url>/2013/02/17/%E5%8D%A0%E4%BD%8D2013/</url>
      
        <content type="html"><![CDATA[<a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 占位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>占位</title>
      <link href="/2010/12/17/%E5%8D%A0%E4%BD%8D2010/"/>
      <url>/2010/12/17/%E5%8D%A0%E4%BD%8D2010/</url>
      
        <content type="html"><![CDATA[<a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 占位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>追忆“我”那些逝去的考研岁月---考研一周年纪念</title>
      <link href="/2010/01/10/%E8%80%83%E7%A0%94%E5%B2%81%E6%9C%88/"/>
      <url>/2010/01/10/%E8%80%83%E7%A0%94%E5%B2%81%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<h3 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h3><p>之所以加上引号是因为这确实不是我一个一个字敲出来的，哎，从当时轻松写出不少于800字的作文，到现在只会不停地重复“bd”，“sf”之类的语句，都是Ctrl+CV惹的祸…</p><h3 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h3><p>（按照惯例绪论都是东拼西凑的）<br>距离去年的考研，已经整整一周年了，在这个特殊的日子也该写点东西纪念一下了！人生就是这样的充满戏剧色彩，回头看不得，也设想不得。曾经铁定心思要逃避考研，最终还是走上了这条路。都说考研过的是猪狗不如的生活，但是也许，考研给了每个人一份值得珍惜的经历，一份值得回忆的经历。也许因为考研，我们的人生更加的完整！<br>一年前的今天我坐在考研考场（教三吧，具体哪里忘了），一年后的今天我坐在电脑前回忆这段往事，并谨以此文来纪念我的考研岁月–那段从复习到考试，共100天左右时间（不可考了）….. 不能说考研改变了个人命运，但因了它,我的确有了不少的启示和体会！我将铭记那段考研的日子，感谢当时的我吧。 </p><h3 id="备考"><a href="#备考" class="headerlink" title="备考"></a>备考</h3><p>现在回想当时备考的压力并不大，目标是快网上报名的时候才确定的.我分析了一下这个目标，感觉基本是可以实现的。于是全部的精力都用在了复习上（连我自己都不信），每天的生活也非常单调（到底多么单调我忘了）。日子就这样的过，坚持了几天早起，后来也就自然地自然醒了。 好像是坚持了几天不开电脑，后来也就习惯性的为了“学习”开机了。<br>复习的大部分时间是在数学上，用二李的资料，先快速通看了一遍，之后再细看做题，到12月时才发现不管会不会，分着做几道题和做一份试卷是完全不同的。应该就在临考前在样本书阅览室做了几套真题，感觉还是没有把握，后来果然杯具了。<br>英语考试按照大一以来的惯例没怎么复习，结果也就在我意料之中了。<br>专业课做了一次小白鼠，到12月才拿到几份号称模拟题的模拟题，感觉用在修订题目本身和修改参考答案上的时间远远超过了真正做题的时间，直接导致看到真题时第一反应就是判断题目是否有错，不过成绩最后还好。<br>政治就比较简单了，听着任汝芬老先生的“跟着任汝芬，政治肯定得高分”，记住了“不答白不答，不答是傻瓜”，最后也就依稀记得那个“毛主义”蒙对了，话说政治和英语分数交换，现在就不会郁闷了。</p><h3 id="占座"><a href="#占座" class="headerlink" title="占座"></a>占座</h3><p>现在说起在学校里占座是一个非常有意思的事情，谁都希望有个固定的教室自习。今年这届同学好像改革了政策，不过我从一开始就没打算占一个固定的座位。自习室却又比较紧张，其中上课少的教室显得是弥足珍贵了，也都是大家争抢的目标。国庆之后我一直在339教室。那教室基本不上课，好像有个讲座吧。保暖效果极佳，一到冬天呆在里面的人热的就受不了。</p><h3 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h3><p>1月10日上午 政治<br>1月10日下午 英语<br>1月11日上午 数学<br>1月11日下午 专业课<br> 略</p><h3 id="考完"><a href="#考完" class="headerlink" title="考完"></a>考完</h3><p> 考完不久网上便有各种版本的答案出来，把各科都对了一遍感觉总分最多也就（忘了）。 年后不久开始跟着室友在网上疯狂的投简历，还去参加大型招聘会。记得第一次预面试的同时接到公司笔试通知，后来也就习惯性地在考研和找工作的过程中被bs。 现在记忆深刻的大概就0！吧。 </p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p> 在“认真”做毕设的时候，成绩出来了，当时各种问师兄师姐，得到不同的鼓励话语，这样估计就能进复试了。接着师兄师姐面试，机试，笔试，老师面试。。。。。。。。。</p><h3 id="下文"><a href="#下文" class="headerlink" title="下文"></a>下文</h3><p> 接过上铺的兄弟扔过来的通知书后，毕设也接近尾声了，接着是去实习，真正体验了一下朝九晚五的生活。其实，因为住的地方离公司比较远，每天七八点就起来了，不过，每天都能见到许多“八九点钟的太阳”，感觉也挺好的（当然偶尔会发生几次日全食），尤其是每天从城西跑到城东，又从城东跑到城西，可以每天瞻仰故宫北海两次，太可爱了，爱国之情油然而生(跑题了）。。。</p><h3 id="总之"><a href="#总之" class="headerlink" title="总之"></a>总之</h3><p>一年过去了，这段记忆每次回忆起来都很特别，都很闪亮!！我将铭记那段考研的日子（好像已经忘的差不多了），感谢帮助过我的人。</p>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校内文章 </tag>
            
            <tag> 考研 </tag>
            
            <tag> 复制粘贴 </tag>
            
            <tag> 故作轻松 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>占位</title>
      <link href="/2009/12/17/%E5%8D%A0%E4%BD%8D2009/"/>
      <url>/2009/12/17/%E5%8D%A0%E4%BD%8D2009/</url>
      
        <content type="html"><![CDATA[<a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 占位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>102，我们的回忆录v19.0</title>
      <link href="/2009/06/29/102%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
      <url>/2009/06/29/102%E5%9B%9E%E5%BF%86%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>兄弟们终于各自奔天涯了，其实就小孩去了地球的另一边，lg好像回东北了吧。看着通讯录上那么多“北邮”，我觉得我们仍然在一起。如果不趁着现在清醒记下你们，我想我们在prc60之际一起去天安门看升旗吧。不要拍我，现在让我开始快乐的想起你们。</p><h3 id="ycy"><a href="#ycy" class="headerlink" title="ycy"></a>ycy</h3><p>102的生活，始终有一个永恒的中心，一个神一般的存在，一个将ws人族和完美人族凝练成一门艺术的天才，一个让一位女人为之疯狂四年的男人。他就是我们这个世界里的凉宫春日，才才。作为一 个在我下铺睡了一年的兄弟（在此我想批评一下gl，你为啥把才哥多占有了一年，难道就因为你们在防空洞建立了超越友谊的关系），让我见识了这个世界的丑恶和一丝丝美好的引导者，。。。原谅我每次在你看xyz片时按下空格或单击鼠标左键，就像我原谅你在我们都还没睡时就happy地进入梦乡。现在你身在千米 之外的丰台，随时欢迎你回北邮看mm，蹭食堂——就 好像我随时打算去找你给龙卡加0一样。你的风流史我就不一一叙述了，但是有一个看到你签名“有妻当如具恩才”后毅然把自己签名改成“做一个像具恩才一样的 女人”的人，希望你永远不要忘记。我们在一起的回忆实在太多，。。。嗯，我不是一个懒惰的人，但也不想再回忆了，嗯，祝你娶一个“具恩才”，也祝雅琴姐越来越“具恩才”。</p><h3 id="xsc"><a href="#xsc" class="headerlink" title="xsc"></a>xsc</h3><p>离才才最近的，非小孩莫属了。你们每晚头对头睡，如果不是你玩psp，才才装睡的话，一定可以在我们的卧谈中大放异彩。小孩真的是一个成长型英雄，从大一的天 天酣睡至热天午后，到最终坚定地走向美利坚，成为地球对面的人，四年的你的确变化了很多。。。这段我不太清楚。。。不过加油，我看好你们。现在的你，也是BN小牛了，相信凭你的意识和操作，去浩方虐路人应该问题不大了吧。其实我们om也是蛮有意思的，各有胜负，不像你和段同学，总是一边倒。最后拍的102照片里还有小孩站在桌子上的飒爽背影，祝愿你在异国他乡继续为着梦想而努力。。。</p><h3 id="ys"><a href="#ys" class="headerlink" title="ys"></a>ys</h3><p>和小孩并称江西双雄的ys，平时我们都叫他杨老x，虽然他经常坚称自己是“术哥”，但由于age问题，我们实在无法将他与“哥”联系起来，但这不影响他作为一个超越gl的存在。我仅仅 是指ws程度上，同是江西双雄之 一，你咋就不能像小孩那样纯一点呢（话说小孩在你们的熏陶下也。。。）。……（此处原文省略五十字，大概意思是x树枝柔韧，叶狭长，春天开黄绿色花，种子上有白色毛状物，成熟后随风飞散，飘的校园到处都是。x可以进行无性繁殖，以须x根生长为主。）清华是一个更加适合你的地方，下次见面你不会更ws了吧， 记得带我去万人坑三楼，嘿嘿。作为卧谈的主力，你的跳跃性思维实在是让我敬佩不已，上一分钟还在谈论班里女生谁最漂亮（历史十大无解问题之一，至今没有定论），下一秒便过渡到奥运会对中国的影响和意义，你的衔接让我领悟到了天衣无缝的真谛。唯一让我感到欣慰的是，你虽然在我们这么多群众的监督下成为一个党 员，你的觉悟始终没办法成为党国栋梁之才。</p><h3 id="gl"><a href="#gl" class="headerlink" title="gl"></a>gl</h3><p>睡在我对面的是龙哥，哦，不对，龙哥就睡在我床上，在我对面的是gl。gl，嗯，号称102wsNo.2，总是和他的上铺一起讨论一些人生大事，也时不时借 助地理优势在窗外搜寻“北邮美女”。话说“周星星，鸟山明，tvb”不是我生活的三分之二，如果真是，那剩下的三分之一就只有dota了，我们曾经互相忽悠着叫嚣“dota一局”但有时总是没有下文。当然主要是对付疯狂的computer，也曾有过om，我不服气的输了，虽然不服气，但对你ws的操作仍然相当佩服，尤其是那个披着披风的小矮人。感 谢你感谢我，我也要谢谢你，谢谢你让我成为网协副会长，虽然至今不明白它是干什么的，当然还有那个只靠振动就会发声的音箱。更感谢你现在还在使用龙哥版KMP，嗯，我已经不用好多年了，怎么感觉好像当年才哥劝我们用nod而他自己。。。关于一分钟双杀的斧王，为了弥补你的遗憾，要不我们看升旗时开一局。。。</p><h3 id="nmz"><a href="#nmz" class="headerlink" title="nmz"></a>nmz</h3><p>mz，睡在我上铺的兄弟。不得不说，你是一个有毅力的人。从学业到bn，你都是那么的执着。每晚的夜谈，你总是一鸣惊人，带起一阵阵小高潮。大一时我们403的宿舍长，记 得我们曾一起去北京西站通宵等待第二天的火车，嗯，也曾一起走在路上讨论是否跟迎面而来的不是很熟的人打招呼，不好意思，呵呵。关于dota，我记得我们应该是一起开始在bn上被虐的，当然后来我们走了不同的路线，我陶醉在与6I～10I的玩耍中，而你接着在bn上成长，现在你已经是胜率81%的牛人了， 如果以后我上战网，找你带别拒绝。</p><h3 id="zk"><a href="#zk" class="headerlink" title="zk"></a>zk</h3><p>小凯， 大一对你不是很了解。但这三年你绝对无愧寝室长的称号，毫不夸张的说那个优秀宿舍完全是你一个人赢来的，至少在宿舍卫生上，除了小孩偶尔打扫一下，其他 人，包括我在内，不评价了。你，是个好人。各方面都很好，除了不会玩。以后和女孩子外出要积极主动，自然一些，准备全面，……每晚的夜谈，你都是那不和谐的声音，当然有时你也会发表你的真知灼见。“都别说了，睡觉吧”，几乎是你每晚的口头禅。你和才才，全宿舍最能装睡的两个，偷听了我们不少高谈阔论吧。中 财的mm我没看过，不很 了解。不过物以类聚，和你在一起的都是好人。。。你以后的boss很牛，好好混。相信你不会让我失望。</p><h3 id="lg"><a href="#lg" class="headerlink" title="lg"></a>lg</h3><p>lg，全宿舍最勤奋的人，每天日出而作，日落不息。我们之间的交流不多，离别前才渐渐熟悉起来。最让我难忘的应该是你不时发出的爽朗的笑声，风生水起，此起彼伏,虽然有时让人感觉有点烦，不过，想着“笑一笑十年少”，你也确实为 宿舍带来不少欢笑。呵呵，恭喜你毕业了，以后bn上少了一条威猛的狼，虽然我似乎没怎么被你虐过。</p><h3 id="czjl"><a href="#czjl" class="headerlink" title="czjl"></a>czjl</h3><p>The more you smile,the younger you are.</p><p>祝愿102的所有 xdjm都健康茁壮地成长，快乐每一天！</p><p>REFERENCES</p><p>【1】MUSCLE GUO， “102，我们的回忆录“，［硕士开业论文］，CS OF BUPT，June，2009，<a href="http://blog.xiaonei.com/GetEntry.do?id=" target="_blank" rel="noopener">http://blog.xiaonei.com/GetEntry.do?id=</a></p><p>【2】<a href="http://tieba.baidu.com/f?kw=%D3%F7%B2%C5%D2%E6" target="_blank" rel="noopener">http://tieba.baidu.com/f?kw=%D3%F7%B2%C5%D2%E6</a> </p><p>【3】万恶的教务处，“参考文献至少10篇”，大家大概都已丢掉的黄皮的毕业设计指导手册，xx出版社，xx年x月</p><p>【4】同【3】</p><p>【5】同【4】</p><p>【6】同【5】</p><p>【7】同【6】</p><p>【8】同【7】</p><p>【9】同【8】</p><p>【10】同 【9】</p>]]></content>
      
      
      <categories>
          
          <category> 我的大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校内文章 </tag>
            
            <tag> 大学宿舍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
